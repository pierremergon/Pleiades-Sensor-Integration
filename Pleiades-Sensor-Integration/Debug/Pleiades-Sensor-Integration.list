
Pleiades-Sensor-Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a94  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006cec  08006cec  00007cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d14  08006d14  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006d14  08006d14  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d14  08006d14  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d14  08006d14  00007d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d18  08006d18  00007d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006d1c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  2000000c  08006d28  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  08006d28  00008604  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e580  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037cd  00000000  00000000  000265c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00029d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001445  00000000  00000000  0002b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024aa7  00000000  00000000  0002cbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f3c  00000000  00000000  000516a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea53b  00000000  00000000  000745e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015eb1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007218  00000000  00000000  0015eb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  00165d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08006cd4 	.word	0x08006cd4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08006cd4 	.word	0x08006cd4

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f001 f92c 	bl	80014f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f81a 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 fb54 	bl	8000950 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002a8:	f000 f88a 	bl	80003c0 <MX_ADC1_Init>
  MX_DAC1_Init();
 80002ac:	f000 f8ec 	bl	8000488 <MX_DAC1_Init>
  MX_I2C1_Init();
 80002b0:	f000 f92c 	bl	800050c <MX_I2C1_Init>
  MX_SAU_Init();
 80002b4:	f000 f9bd 	bl	8000632 <MX_SAU_Init>
  MX_SPI1_Init();
 80002b8:	f000 f9c2 	bl	8000640 <MX_SPI1_Init>
  MX_TIM2_Init();
 80002bc:	f000 fa16 	bl	80006ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80002c0:	f000 fa6e 	bl	80007a0 <MX_TIM3_Init>
  MX_USB_PCD_Init();
 80002c4:	f000 fb12 	bl	80008ec <MX_USB_PCD_Init>
  MX_I2C2_Init();
 80002c8:	f000 f960 	bl	800058c <MX_I2C2_Init>
  MX_USART3_Init();
 80002cc:	f000 fac2 	bl	8000854 <MX_USART3_Init>
  MX_ICACHE_Init();
 80002d0:	f000 f99c 	bl	800060c <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <main+0x3c>

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b09c      	sub	sp, #112	@ 0x70
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0320 	add.w	r3, r7, #32
 80002e2:	2250      	movs	r2, #80	@ 0x50
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f006 fcc7 	bl	8006c7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
 80002fc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80002fe:	4b2f      	ldr	r3, [pc, #188]	@ (80003bc <SystemClock_Config+0xe4>)
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	4a2e      	ldr	r2, [pc, #184]	@ (80003bc <SystemClock_Config+0xe4>)
 8000304:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000308:	6113      	str	r3, [r2, #16]
 800030a:	4b2c      	ldr	r3, [pc, #176]	@ (80003bc <SystemClock_Config+0xe4>)
 800030c:	691b      	ldr	r3, [r3, #16]
 800030e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000316:	bf00      	nop
 8000318:	4b28      	ldr	r3, [pc, #160]	@ (80003bc <SystemClock_Config+0xe4>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f003 0308 	and.w	r3, r3, #8
 8000320:	2b08      	cmp	r3, #8
 8000322:	d1f9      	bne.n	8000318 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000324:	233a      	movs	r3, #58	@ 0x3a
 8000326:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_CSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800032c:	2308      	movs	r3, #8
 800032e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000330:	2340      	movs	r3, #64	@ 0x40
 8000332:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000334:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000338:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800033a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800033e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000340:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000344:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000346:	2320      	movs	r3, #32
 8000348:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2302      	movs	r3, #2
 800034c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 800034e:	2302      	movs	r3, #2
 8000350:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000352:	2301      	movs	r3, #1
 8000354:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000356:	2320      	movs	r3, #32
 8000358:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800035a:	2302      	movs	r3, #2
 800035c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800035e:	2302      	movs	r3, #2
 8000360:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000362:	2302      	movs	r3, #2
 8000364:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000366:	2308      	movs	r3, #8
 8000368:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800036a:	2300      	movs	r3, #0
 800036c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	f107 0320 	add.w	r3, r7, #32
 8000376:	4618      	mov	r0, r3
 8000378:	f002 ff20 	bl	80031bc <HAL_RCC_OscConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000382:	f000 fbdb 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000386:	231f      	movs	r3, #31
 8000388:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	2101      	movs	r1, #1
 80003a4:	4618      	mov	r0, r3
 80003a6:	f003 fb41 	bl	8003a2c <HAL_RCC_ClockConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80003b0:	f000 fbc4 	bl	8000b3c <Error_Handler>
  }
}
 80003b4:	bf00      	nop
 80003b6:	3770      	adds	r7, #112	@ 0x70
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	44020800 	.word	0x44020800

080003c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c6:	463b      	mov	r3, r7
 80003c8:	2220      	movs	r2, #32
 80003ca:	2100      	movs	r1, #0
 80003cc:	4618      	mov	r0, r3
 80003ce:	f006 fc54 	bl	8006c7a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003d2:	4b2a      	ldr	r3, [pc, #168]	@ (800047c <MX_ADC1_Init+0xbc>)
 80003d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000480 <MX_ADC1_Init+0xc0>)
 80003d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003d8:	4b28      	ldr	r3, [pc, #160]	@ (800047c <MX_ADC1_Init+0xbc>)
 80003da:	2200      	movs	r2, #0
 80003dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003de:	4b27      	ldr	r3, [pc, #156]	@ (800047c <MX_ADC1_Init+0xbc>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e4:	4b25      	ldr	r3, [pc, #148]	@ (800047c <MX_ADC1_Init+0xbc>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ea:	4b24      	ldr	r3, [pc, #144]	@ (800047c <MX_ADC1_Init+0xbc>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f0:	4b22      	ldr	r3, [pc, #136]	@ (800047c <MX_ADC1_Init+0xbc>)
 80003f2:	2204      	movs	r2, #4
 80003f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003f6:	4b21      	ldr	r3, [pc, #132]	@ (800047c <MX_ADC1_Init+0xbc>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003fc:	4b1f      	ldr	r3, [pc, #124]	@ (800047c <MX_ADC1_Init+0xbc>)
 80003fe:	2200      	movs	r2, #0
 8000400:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000402:	4b1e      	ldr	r3, [pc, #120]	@ (800047c <MX_ADC1_Init+0xbc>)
 8000404:	2201      	movs	r2, #1
 8000406:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000408:	4b1c      	ldr	r3, [pc, #112]	@ (800047c <MX_ADC1_Init+0xbc>)
 800040a:	2200      	movs	r2, #0
 800040c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000410:	4b1a      	ldr	r3, [pc, #104]	@ (800047c <MX_ADC1_Init+0xbc>)
 8000412:	2200      	movs	r2, #0
 8000414:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000416:	4b19      	ldr	r3, [pc, #100]	@ (800047c <MX_ADC1_Init+0xbc>)
 8000418:	2200      	movs	r2, #0
 800041a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800041c:	4b17      	ldr	r3, [pc, #92]	@ (800047c <MX_ADC1_Init+0xbc>)
 800041e:	2200      	movs	r2, #0
 8000420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000424:	4b15      	ldr	r3, [pc, #84]	@ (800047c <MX_ADC1_Init+0xbc>)
 8000426:	2200      	movs	r2, #0
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800042a:	4b14      	ldr	r3, [pc, #80]	@ (800047c <MX_ADC1_Init+0xbc>)
 800042c:	2200      	movs	r2, #0
 800042e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000430:	4b12      	ldr	r3, [pc, #72]	@ (800047c <MX_ADC1_Init+0xbc>)
 8000432:	2200      	movs	r2, #0
 8000434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000438:	4810      	ldr	r0, [pc, #64]	@ (800047c <MX_ADC1_Init+0xbc>)
 800043a:	f001 faa1 	bl	8001980 <HAL_ADC_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000444:	f000 fb7a 	bl	8000b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000448:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <MX_ADC1_Init+0xc4>)
 800044a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800044c:	2306      	movs	r3, #6
 800044e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000450:	2300      	movs	r3, #0
 8000452:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000454:	237f      	movs	r3, #127	@ 0x7f
 8000456:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000458:	2304      	movs	r3, #4
 800045a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000460:	463b      	mov	r3, r7
 8000462:	4619      	mov	r1, r3
 8000464:	4805      	ldr	r0, [pc, #20]	@ (800047c <MX_ADC1_Init+0xbc>)
 8000466:	f001 fbd9 	bl	8001c1c <HAL_ADC_ConfigChannel>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000470:	f000 fb64 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000028 	.word	0x20000028
 8000480:	42028000 	.word	0x42028000
 8000484:	04300002 	.word	0x04300002

08000488 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08c      	sub	sp, #48	@ 0x30
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	222c      	movs	r2, #44	@ 0x2c
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f006 fbf0 	bl	8006c7a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800049a:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <MX_DAC1_Init+0x7c>)
 800049c:	4a1a      	ldr	r2, [pc, #104]	@ (8000508 <MX_DAC1_Init+0x80>)
 800049e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004a0:	4818      	ldr	r0, [pc, #96]	@ (8000504 <MX_DAC1_Init+0x7c>)
 80004a2:	f002 f8f3 	bl	800268c <HAL_DAC_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004ac:	f000 fb46 	bl	8000b3c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	723b      	strb	r3, [r7, #8]
  sConfig.DAC_SignedFormat = DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	727b      	strb	r3, [r7, #9]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80004c8:	2301      	movs	r3, #1
 80004ca:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	4619      	mov	r1, r3
 80004d6:	480b      	ldr	r0, [pc, #44]	@ (8000504 <MX_DAC1_Init+0x7c>)
 80004d8:	f002 f8fa 	bl	80026d0 <HAL_DAC_ConfigChannel>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 80004e2:	f000 fb2b 	bl	8000b3c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2210      	movs	r2, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4805      	ldr	r0, [pc, #20]	@ (8000504 <MX_DAC1_Init+0x7c>)
 80004ee:	f002 f8ef 	bl	80026d0 <HAL_DAC_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_DAC1_Init+0x74>
  {
    Error_Handler();
 80004f8:	f000 fb20 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	3730      	adds	r7, #48	@ 0x30
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000090 	.word	0x20000090
 8000508:	42028400 	.word	0x42028400

0800050c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000510:	4b1b      	ldr	r3, [pc, #108]	@ (8000580 <MX_I2C1_Init+0x74>)
 8000512:	4a1c      	ldr	r2, [pc, #112]	@ (8000584 <MX_I2C1_Init+0x78>)
 8000514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000516:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <MX_I2C1_Init+0x74>)
 8000518:	4a1b      	ldr	r2, [pc, #108]	@ (8000588 <MX_I2C1_Init+0x7c>)
 800051a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800051c:	4b18      	ldr	r3, [pc, #96]	@ (8000580 <MX_I2C1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000522:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <MX_I2C1_Init+0x74>)
 8000524:	2201      	movs	r2, #1
 8000526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000528:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <MX_I2C1_Init+0x74>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800052e:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <MX_I2C1_Init+0x74>)
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000534:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <MX_I2C1_Init+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <MX_I2C1_Init+0x74>)
 800053c:	2200      	movs	r2, #0
 800053e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <MX_I2C1_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000546:	480e      	ldr	r0, [pc, #56]	@ (8000580 <MX_I2C1_Init+0x74>)
 8000548:	f002 fbe2 	bl	8002d10 <HAL_I2C_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000552:	f000 faf3 	bl	8000b3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000556:	2100      	movs	r1, #0
 8000558:	4809      	ldr	r0, [pc, #36]	@ (8000580 <MX_I2C1_Init+0x74>)
 800055a:	f002 fc74 	bl	8002e46 <HAL_I2CEx_ConfigAnalogFilter>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000564:	f000 faea 	bl	8000b3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000568:	2100      	movs	r1, #0
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <MX_I2C1_Init+0x74>)
 800056c:	f002 fcb6 	bl	8002edc <HAL_I2CEx_ConfigDigitalFilter>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000576:	f000 fae1 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000a4 	.word	0x200000a4
 8000584:	40005400 	.word	0x40005400
 8000588:	00707cbb 	.word	0x00707cbb

0800058c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000590:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <MX_I2C2_Init+0x74>)
 8000592:	4a1c      	ldr	r2, [pc, #112]	@ (8000604 <MX_I2C2_Init+0x78>)
 8000594:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000596:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <MX_I2C2_Init+0x74>)
 8000598:	4a1b      	ldr	r2, [pc, #108]	@ (8000608 <MX_I2C2_Init+0x7c>)
 800059a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <MX_I2C2_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_I2C2_Init+0x74>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_I2C2_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_I2C2_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_I2C2_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_I2C2_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_I2C2_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005c6:	480e      	ldr	r0, [pc, #56]	@ (8000600 <MX_I2C2_Init+0x74>)
 80005c8:	f002 fba2 	bl	8002d10 <HAL_I2C_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80005d2:	f000 fab3 	bl	8000b3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4809      	ldr	r0, [pc, #36]	@ (8000600 <MX_I2C2_Init+0x74>)
 80005da:	f002 fc34 	bl	8002e46 <HAL_I2CEx_ConfigAnalogFilter>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80005e4:	f000 faaa 	bl	8000b3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005e8:	2100      	movs	r1, #0
 80005ea:	4805      	ldr	r0, [pc, #20]	@ (8000600 <MX_I2C2_Init+0x74>)
 80005ec:	f002 fc76 	bl	8002edc <HAL_I2CEx_ConfigDigitalFilter>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80005f6:	f000 faa1 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000f8 	.word	0x200000f8
 8000604:	40005800 	.word	0x40005800
 8000608:	00707cbb 	.word	0x00707cbb

0800060c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000610:	2000      	movs	r0, #0
 8000612:	f002 fcaf 	bl	8002f74 <HAL_ICACHE_ConfigAssociativityMode>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800061c:	f000 fa8e 	bl	8000b3c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000620:	f002 fcc8 	bl	8002fb4 <HAL_ICACHE_Enable>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800062a:	f000 fa87 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}

08000632 <MX_SAU_Init>:
  * @brief SAU Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAU_Init(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END SAU_Init 1 */
  /* USER CODE BEGIN SAU_Init 2 */

  /* USER CODE END SAU_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000644:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 8000646:	4a28      	ldr	r2, [pc, #160]	@ (80006e8 <MX_SPI1_Init+0xa8>)
 8000648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800064a:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 800064c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000652:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000658:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 800065a:	2203      	movs	r2, #3
 800065c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800065e:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000664:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800066a:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 800066c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000670:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000678:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 8000686:	2200      	movs	r2, #0
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 800068c:	2207      	movs	r2, #7
 800068e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 8000692:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000696:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 800069a:	2200      	movs	r2, #0
 800069c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_SPI1_Init+0xa4>)
 80006d0:	f004 fd36 	bl	8005140 <HAL_SPI_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80006da:	f000 fa2f 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000014c 	.word	0x2000014c
 80006e8:	40013000 	.word	0x40013000

080006ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]
 800070e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000710:	4b22      	ldr	r3, [pc, #136]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000712:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000718:	4b20      	ldr	r3, [pc, #128]	@ (800079c <MX_TIM2_Init+0xb0>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000726:	f04f 32ff 	mov.w	r2, #4294967295
 800072a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <MX_TIM2_Init+0xb0>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000738:	4818      	ldr	r0, [pc, #96]	@ (800079c <MX_TIM2_Init+0xb0>)
 800073a:	f004 fecd 	bl	80054d8 <HAL_TIM_PWM_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000744:	f000 f9fa 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4811      	ldr	r0, [pc, #68]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000758:	f005 fc50 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000762:	f000 f9eb 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000766:	2360      	movs	r3, #96	@ 0x60
 8000768:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	4619      	mov	r1, r3
 800077c:	4807      	ldr	r0, [pc, #28]	@ (800079c <MX_TIM2_Init+0xb0>)
 800077e:	f005 f851 	bl	8005824 <HAL_TIM_PWM_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000788:	f000 f9d8 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <MX_TIM2_Init+0xb0>)
 800078e:	f000 fc47 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	@ 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001dc 	.word	0x200001dc

080007a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007c4:	4b21      	ldr	r3, [pc, #132]	@ (800084c <MX_TIM3_Init+0xac>)
 80007c6:	4a22      	ldr	r2, [pc, #136]	@ (8000850 <MX_TIM3_Init+0xb0>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007ca:	4b20      	ldr	r3, [pc, #128]	@ (800084c <MX_TIM3_Init+0xac>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b1e      	ldr	r3, [pc, #120]	@ (800084c <MX_TIM3_Init+0xac>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007d6:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_TIM3_Init+0xac>)
 80007d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <MX_TIM3_Init+0xac>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e4:	4b19      	ldr	r3, [pc, #100]	@ (800084c <MX_TIM3_Init+0xac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007ea:	4818      	ldr	r0, [pc, #96]	@ (800084c <MX_TIM3_Init+0xac>)
 80007ec:	f004 fe74 	bl	80054d8 <HAL_TIM_PWM_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80007f6:	f000 f9a1 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4810      	ldr	r0, [pc, #64]	@ (800084c <MX_TIM3_Init+0xac>)
 800080a:	f005 fbf7 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000814:	f000 f992 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000818:	2360      	movs	r3, #96	@ 0x60
 800081a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	4807      	ldr	r0, [pc, #28]	@ (800084c <MX_TIM3_Init+0xac>)
 8000830:	f004 fff8 	bl	8005824 <HAL_TIM_PWM_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800083a:	f000 f97f 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800083e:	4803      	ldr	r0, [pc, #12]	@ (800084c <MX_TIM3_Init+0xac>)
 8000840:	f000 fbee 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	@ 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000228 	.word	0x20000228
 8000850:	40000400 	.word	0x40000400

08000854 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000858:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <MX_USART3_Init+0x90>)
 800085a:	4a23      	ldr	r2, [pc, #140]	@ (80008e8 <MX_USART3_Init+0x94>)
 800085c:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 800085e:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_USART3_Init+0x90>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000866:	4b1f      	ldr	r3, [pc, #124]	@ (80008e4 <MX_USART3_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_USART3_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_USART3_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_USART3_Init+0x90>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_USART3_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_USART3_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_USART3_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_USART3_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000896:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_USART3_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 800089c:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <MX_USART3_Init+0x90>)
 800089e:	f005 fc5b 	bl	8006158 <HAL_USART_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART3_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f948 	bl	8000b3c <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_USART3_Init+0x90>)
 80008b0:	f006 f8c2 	bl	8006a38 <HAL_USARTEx_SetTxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 80008ba:	f000 f93f 	bl	8000b3c <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <MX_USART3_Init+0x90>)
 80008c2:	f006 f8f7 	bl	8006ab4 <HAL_USARTEx_SetRxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f000 f936 	bl	8000b3c <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_USART3_Init+0x90>)
 80008d2:	f006 f878 	bl	80069c6 <HAL_USARTEx_DisableFifoMode>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART3_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f92e 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000274 	.word	0x20000274
 80008e8:	40004800 	.word	0x40004800

080008ec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 80008f2:	4a16      	ldr	r2, [pc, #88]	@ (800094c <MX_USB_PCD_Init+0x60>)
 80008f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 80008f8:	2208      	movs	r2, #8
 80008fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 80008fe:	2202      	movs	r2, #2
 8000900:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 8000904:	2202      	movs	r2, #2
 8000906:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 8000922:	2200      	movs	r2, #0
 8000924:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USB_PCD_Init+0x5c>)
 8000934:	f002 fb4e 	bl	8002fd4 <HAL_PCD_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 800093e:	f000 f8fd 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200002d4 	.word	0x200002d4
 800094c:	40016000 	.word	0x40016000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b66      	ldr	r3, [pc, #408]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 8000968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800096c:	4a64      	ldr	r2, [pc, #400]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000976:	4b62      	ldr	r3, [pc, #392]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 8000978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000984:	4b5e      	ldr	r3, [pc, #376]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 8000986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098a:	4a5d      	ldr	r2, [pc, #372]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000990:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000994:	4b5a      	ldr	r3, [pc, #360]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 8000996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800099a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b57      	ldr	r3, [pc, #348]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 80009a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a8:	4a55      	ldr	r2, [pc, #340]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009b2:	4b53      	ldr	r3, [pc, #332]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 80009b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c0:	4b4f      	ldr	r3, [pc, #316]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 80009c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c6:	4a4e      	ldr	r2, [pc, #312]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d0:	4b4b      	ldr	r3, [pc, #300]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 80009d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	4b48      	ldr	r3, [pc, #288]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 80009e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e4:	4a46      	ldr	r2, [pc, #280]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ee:	4b44      	ldr	r3, [pc, #272]	@ (8000b00 <MX_GPIO_Init+0x1b0>)
 80009f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP32_EN_Pin|LED_DRV_EN_Pin|Air_Sensor_Disable_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f245 0140 	movw	r1, #20544	@ 0x5040
 8000a02:	4840      	ldr	r0, [pc, #256]	@ (8000b04 <MX_GPIO_Init+0x1b4>)
 8000a04:	f002 f96c 	bl	8002ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nCHG_TIME_EN_Pin|CHG_SOURCE_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000a0e:	483e      	ldr	r0, [pc, #248]	@ (8000b08 <MX_GPIO_Init+0x1b8>)
 8000a10:	f002 f966 	bl	8002ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000a1a:	483c      	ldr	r0, [pc, #240]	@ (8000b0c <MX_GPIO_Init+0x1bc>)
 8000a1c:	f002 f960 	bl	8002ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4835      	ldr	r0, [pc, #212]	@ (8000b0c <MX_GPIO_Init+0x1bc>)
 8000a36:	f002 f801 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Air_INT_Pin PIR1_IN_Pin PROX1_SIG_Pin PROTO_PIR_Pin
                           ACC_INT2_Pin */
  GPIO_InitStruct.Pin = Air_INT_Pin|PIR1_IN_Pin|PROX1_SIG_Pin|PROTO_PIR_Pin
 8000a3a:	f24d 03a0 	movw	r3, #53408	@ 0xd0a0
 8000a3e:	617b      	str	r3, [r7, #20]
                          |ACC_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a40:	4b33      	ldr	r3, [pc, #204]	@ (8000b10 <MX_GPIO_Init+0x1c0>)
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	482f      	ldr	r0, [pc, #188]	@ (8000b0c <MX_GPIO_Init+0x1bc>)
 8000a50:	f001 fff4 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX2_SIG_Pin */
  GPIO_InitStruct.Pin = PROX2_SIG_Pin;
 8000a54:	2301      	movs	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a58:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <MX_GPIO_Init+0x1c0>)
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX2_SIG_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4827      	ldr	r0, [pc, #156]	@ (8000b04 <MX_GPIO_Init+0x1b4>)
 8000a68:	f001 ffe8 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP32_EN_Pin LED_DRV_EN_Pin Air_Sensor_Disable_Pin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|LED_DRV_EN_Pin|Air_Sensor_Disable_Pin;
 8000a6c:	f245 0340 	movw	r3, #20544	@ 0x5040
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	481f      	ldr	r0, [pc, #124]	@ (8000b04 <MX_GPIO_Init+0x1b4>)
 8000a86:	f001 ffd9 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : nCHG_TIME_EN_Pin CHG_SOURCE_Pin */
  GPIO_InitStruct.Pin = nCHG_TIME_EN_Pin|CHG_SOURCE_Pin;
 8000a8a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4819      	ldr	r0, [pc, #100]	@ (8000b08 <MX_GPIO_Init+0x1b8>)
 8000aa4:	f001 ffca 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000aa8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4812      	ldr	r0, [pc, #72]	@ (8000b0c <MX_GPIO_Init+0x1bc>)
 8000ac2:	f001 ffbb 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <MX_GPIO_Init+0x1c0>)
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480e      	ldr	r0, [pc, #56]	@ (8000b14 <MX_GPIO_Init+0x1c4>)
 8000ada:	f001 ffaf 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : COMP_OUT_Pin HALL_Pin */
  GPIO_InitStruct.Pin = COMP_OUT_Pin|HALL_Pin;
 8000ade:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_GPIO_Init+0x1b4>)
 8000af4:	f001 ffa2 	bl	8002a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	@ 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	44020c00 	.word	0x44020c00
 8000b04:	42020400 	.word	0x42020400
 8000b08:	42020000 	.word	0x42020000
 8000b0c:	42020800 	.word	0x42020800
 8000b10:	10110000 	.word	0x10110000
 8000b14:	42020c00 	.word	0x42020c00

08000b18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2a:	f000 fd0d 	bl	8001548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40012c00 	.word	0x40012c00

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <Error_Handler+0x8>

08000b48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0318 	add.w	r3, r7, #24
 8000b74:	2288      	movs	r2, #136	@ 0x88
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f006 f87e 	bl	8006c7a <memset>
  if(hadc->Instance==ADC1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a32      	ldr	r2, [pc, #200]	@ (8000c4c <HAL_ADC_MspInit+0xf4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d15c      	bne.n	8000c42 <HAL_ADC_MspInit+0xea>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000b88:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 faa9 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8000ba8:	f7ff ffc8 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bac:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb2:	4a27      	ldr	r2, [pc, #156]	@ (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bbc:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bee:	4a18      	ldr	r2, [pc, #96]	@ (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_INP0
    PA1     ------> ADC1_INP1
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|AA_LVL_Pin|LIPO_LVL_Pin;
 8000c06:	2343      	movs	r3, #67	@ 0x43
 8000c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	@ (8000c54 <HAL_ADC_MspInit+0xfc>)
 8000c20:	f001 ff0c 	bl	8002a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Light_Level_Pin;
 8000c24:	2302      	movs	r3, #2
 8000c26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(Light_Level_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4806      	ldr	r0, [pc, #24]	@ (8000c58 <HAL_ADC_MspInit+0x100>)
 8000c3e:	f001 fefd 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	37b8      	adds	r7, #184	@ 0xb8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	42028000 	.word	0x42028000
 8000c50:	44020c00 	.word	0x44020c00
 8000c54:	42020000 	.word	0x42020000
 8000c58:	42020400 	.word	0x42020400

08000c5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0ac      	sub	sp, #176	@ 0xb0
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	2288      	movs	r2, #136	@ 0x88
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f005 fffc 	bl	8006c7a <memset>
  if(hdac->Instance==DAC1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a22      	ldr	r2, [pc, #136]	@ (8000d10 <HAL_DAC_MspInit+0xb4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d13c      	bne.n	8000d06 <HAL_DAC_MspInit+0xaa>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DAC;
 8000c8c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 fa29 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_DAC_MspInit+0x50>
    {
      Error_Handler();
 8000ca8:	f7ff ff48 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_DAC_MspInit+0xb8>)
 8000cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb2:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <HAL_DAC_MspInit+0xb8>)
 8000cb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cbc:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_DAC_MspInit+0xb8>)
 8000cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_DAC_MspInit+0xb8>)
 8000ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd0:	4a10      	ldr	r2, [pc, #64]	@ (8000d14 <HAL_DAC_MspInit+0xb8>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_DAC_MspInit+0xb8>)
 8000cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ce8:	2330      	movs	r3, #48	@ 0x30
 8000cea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_DAC_MspInit+0xbc>)
 8000d02:	f001 fe9b 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	37b0      	adds	r7, #176	@ 0xb0
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	42028400 	.word	0x42028400
 8000d14:	44020c00 	.word	0x44020c00
 8000d18:	42020000 	.word	0x42020000

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0ae      	sub	sp, #184	@ 0xb8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	2288      	movs	r2, #136	@ 0x88
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 ff9c 	bl	8006c7a <memset>
  if(hi2c->Instance==I2C1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a57      	ldr	r2, [pc, #348]	@ (8000ea4 <HAL_I2C_MspInit+0x188>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d146      	bne.n	8000dda <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 f9c7 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000d6c:	f7ff fee6 	bl	8000b3c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d70:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d76:	4a4c      	ldr	r2, [pc, #304]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d80:	4b49      	ldr	r3, [pc, #292]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PC8     ------> I2C1_SCL
    PC9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d96:	2312      	movs	r3, #18
 8000d98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da8:	2304      	movs	r3, #4
 8000daa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000db2:	4619      	mov	r1, r3
 8000db4:	483d      	ldr	r0, [pc, #244]	@ (8000eac <HAL_I2C_MspInit+0x190>)
 8000db6:	f001 fe41 	bl	8002a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dba:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dc0:	4a39      	ldr	r2, [pc, #228]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000dc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dc6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000dca:	4b37      	ldr	r3, [pc, #220]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dd8:	e05f      	b.n	8000e9a <HAL_I2C_MspInit+0x17e>
  else if(hi2c->Instance==I2C2)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a34      	ldr	r2, [pc, #208]	@ (8000eb0 <HAL_I2C_MspInit+0x194>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d15a      	bne.n	8000e9a <HAL_I2C_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000de4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 f97b 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_I2C_MspInit+0xec>
      Error_Handler();
 8000e04:	f7ff fe9a 	bl	8000b3c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e0e:	4a26      	ldr	r2, [pc, #152]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e18:	4b23      	ldr	r3, [pc, #140]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2e:	2312      	movs	r3, #18
 8000e30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e40:	2304      	movs	r3, #4
 8000e42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4819      	ldr	r0, [pc, #100]	@ (8000eb4 <HAL_I2C_MspInit+0x198>)
 8000e4e:	f001 fdf5 	bl	8002a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e52:	2320      	movs	r3, #32
 8000e54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e58:	2312      	movs	r3, #18
 8000e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e74:	4619      	mov	r1, r3
 8000e76:	480f      	ldr	r0, [pc, #60]	@ (8000eb4 <HAL_I2C_MspInit+0x198>)
 8000e78:	f001 fde0 	bl	8002a3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e82:	4a09      	ldr	r2, [pc, #36]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000e84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e88:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_I2C_MspInit+0x18c>)
 8000e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
}
 8000e9a:	bf00      	nop
 8000e9c:	37b8      	adds	r7, #184	@ 0xb8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	44020c00 	.word	0x44020c00
 8000eac:	42020800 	.word	0x42020800
 8000eb0:	40005800 	.word	0x40005800
 8000eb4:	42020400 	.word	0x42020400

08000eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0ac      	sub	sp, #176	@ 0xb0
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	2288      	movs	r2, #136	@ 0x88
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f005 fece 	bl	8006c7a <memset>
  if(hspi->Instance==SPI1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a30      	ldr	r2, [pc, #192]	@ (8000fa4 <HAL_SPI_MspInit+0xec>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d159      	bne.n	8000f9c <HAL_SPI_MspInit+0xe4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000ee8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 f8f9 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f08:	f7ff fe18 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0c:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <HAL_SPI_MspInit+0xf0>)
 8000f0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000f12:	4a25      	ldr	r2, [pc, #148]	@ (8000fa8 <HAL_SPI_MspInit+0xf0>)
 8000f14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f18:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <HAL_SPI_MspInit+0xf0>)
 8000f1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <HAL_SPI_MspInit+0xf0>)
 8000f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f30:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <HAL_SPI_MspInit+0xf0>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_SPI_MspInit+0xf0>)
 8000f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PC0     ------> SPI1_SCK
    PC2     ------> SPI1_MISO
    PC3     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f60:	2305      	movs	r3, #5
 8000f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f66:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480f      	ldr	r0, [pc, #60]	@ (8000fac <HAL_SPI_MspInit+0xf4>)
 8000f6e:	f001 fd65 	bl	8002a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f72:	230c      	movs	r3, #12
 8000f74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f94:	4619      	mov	r1, r3
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <HAL_SPI_MspInit+0xf4>)
 8000f98:	f001 fd50 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f9c:	bf00      	nop
 8000f9e:	37b0      	adds	r7, #176	@ 0xb0
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40013000 	.word	0x40013000
 8000fa8:	44020c00 	.word	0x44020c00
 8000fac:	42020800 	.word	0x42020800

08000fb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fc0:	d10f      	bne.n	8000fe2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_TIM_PWM_MspInit+0x68>)
 8000fc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fc8:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <HAL_TIM_PWM_MspInit+0x68>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <HAL_TIM_PWM_MspInit+0x68>)
 8000fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fe0:	e013      	b.n	800100a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <HAL_TIM_PWM_MspInit+0x6c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d10e      	bne.n	800100a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fec:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_TIM_PWM_MspInit+0x68>)
 8000fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ff2:	4a09      	ldr	r2, [pc, #36]	@ (8001018 <HAL_TIM_PWM_MspInit+0x68>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_TIM_PWM_MspInit+0x68>)
 8000ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	44020c00 	.word	0x44020c00
 800101c:	40000400 	.word	0x40000400

08001020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001040:	d11f      	bne.n	8001082 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <HAL_TIM_MspPostInit+0xb4>)
 8001044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001048:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <HAL_TIM_MspPostInit+0xb4>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001052:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <HAL_TIM_MspPostInit+0xb4>)
 8001054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = IR1_DRIVE_Pin;
 8001060:	2304      	movs	r3, #4
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8001070:	230e      	movs	r3, #14
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IR1_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4817      	ldr	r0, [pc, #92]	@ (80010d8 <HAL_TIM_MspPostInit+0xb8>)
 800107c:	f001 fcde 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001080:	e023      	b.n	80010ca <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a15      	ldr	r2, [pc, #84]	@ (80010dc <HAL_TIM_MspPostInit+0xbc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d11e      	bne.n	80010ca <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <HAL_TIM_MspPostInit+0xb4>)
 800108e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001092:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <HAL_TIM_MspPostInit+0xb4>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HAL_TIM_MspPostInit+0xb4>)
 800109e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IR2_DRIVE_Pin;
 80010aa:	2340      	movs	r3, #64	@ 0x40
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ba:	2302      	movs	r3, #2
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IR2_DRIVE_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <HAL_TIM_MspPostInit+0xc0>)
 80010c6:	f001 fcb9 	bl	8002a3c <HAL_GPIO_Init>
}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	@ 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	44020c00 	.word	0x44020c00
 80010d8:	42020400 	.word	0x42020400
 80010dc:	40000400 	.word	0x40000400
 80010e0:	42020800 	.word	0x42020800

080010e4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ae      	sub	sp, #184	@ 0xb8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	2288      	movs	r2, #136	@ 0x88
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f005 fdb8 	bl	8006c7a <memset>
  if(husart->Instance==USART3)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a38      	ldr	r2, [pc, #224]	@ (80011f0 <HAL_USART_MspInit+0x10c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d169      	bne.n	80011e8 <HAL_USART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001114:	f04f 0204 	mov.w	r2, #4
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001120:	2300      	movs	r3, #0
 8001122:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	4618      	mov	r0, r3
 800112a:	f002 ffe3 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_USART_MspInit+0x54>
    {
      Error_Handler();
 8001134:	f7ff fd02 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001138:	4b2e      	ldr	r3, [pc, #184]	@ (80011f4 <HAL_USART_MspInit+0x110>)
 800113a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800113e:	4a2d      	ldr	r2, [pc, #180]	@ (80011f4 <HAL_USART_MspInit+0x110>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001144:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001148:	4b2a      	ldr	r3, [pc, #168]	@ (80011f4 <HAL_USART_MspInit+0x110>)
 800114a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800114e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <HAL_USART_MspInit+0x110>)
 8001158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800115c:	4a25      	ldr	r2, [pc, #148]	@ (80011f4 <HAL_USART_MspInit+0x110>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <HAL_USART_MspInit+0x110>)
 8001168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <HAL_USART_MspInit+0x110>)
 8001176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800117a:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <HAL_USART_MspInit+0x110>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HAL_USART_MspInit+0x110>)
 8001186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PA7     ------> USART3_CK
    PC4     ------> USART3_RX
    PA8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|VCP1_T_RX_Pin;
 8001192:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001196:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 80011ac:	230d      	movs	r3, #13
 80011ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011b6:	4619      	mov	r1, r3
 80011b8:	480f      	ldr	r0, [pc, #60]	@ (80011f8 <HAL_USART_MspInit+0x114>)
 80011ba:	f001 fc3f 	bl	8002a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP1_T_TX_Pin;
 80011be:	2310      	movs	r3, #16
 80011c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d6:	2307      	movs	r3, #7
 80011d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP1_T_TX_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	@ (80011fc <HAL_USART_MspInit+0x118>)
 80011e4:	f001 fc2a 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	37b8      	adds	r7, #184	@ 0xb8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40004800 	.word	0x40004800
 80011f4:	44020c00 	.word	0x44020c00
 80011f8:	42020000 	.word	0x42020000
 80011fc:	42020800 	.word	0x42020800

08001200 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0a6      	sub	sp, #152	@ 0x98
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2288      	movs	r2, #136	@ 0x88
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f005 fd32 	bl	8006c7a <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a14      	ldr	r2, [pc, #80]	@ (800126c <HAL_PCD_MspInit+0x6c>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d121      	bne.n	8001264 <HAL_PCD_MspInit+0x64>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0310 	mov.w	r3, #16
 8001228:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800122c:	2330      	movs	r3, #48	@ 0x30
 800122e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4618      	mov	r0, r3
 8001238:	f002 ff5c 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8001242:	f7ff fc7b 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_PCD_MspInit+0x70>)
 8001248:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800124c:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <HAL_PCD_MspInit+0x70>)
 800124e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001252:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_PCD_MspInit+0x70>)
 8001258:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800125c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	3798      	adds	r7, #152	@ 0x98
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40016000 	.word	0x40016000
 8001270:	44020c00 	.word	0x44020c00

08001274 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	@ 0x38
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800127c:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <HAL_InitTick+0xc4>)
 800127e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001282:	4a2d      	ldr	r2, [pc, #180]	@ (8001338 <HAL_InitTick+0xc4>)
 8001284:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001288:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800128c:	4b2a      	ldr	r3, [pc, #168]	@ (8001338 <HAL_InitTick+0xc4>)
 800128e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800129a:	f107 0210 	add.w	r2, r7, #16
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 feed 	bl	8004084 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012aa:	f002 fed5 	bl	8004058 <HAL_RCC_GetPCLK2Freq>
 80012ae:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 80012b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	4a21      	ldr	r2, [pc, #132]	@ (800133c <HAL_InitTick+0xc8>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	09db      	lsrs	r3, r3, #7
 80012bc:	3b01      	subs	r3, #1
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <HAL_InitTick+0xcc>)
 80012c2:	4a20      	ldr	r2, [pc, #128]	@ (8001344 <HAL_InitTick+0xd0>)
 80012c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (100000U / 1000U) - 1U;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <HAL_InitTick+0xcc>)
 80012c8:	2263      	movs	r2, #99	@ 0x63
 80012ca:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <HAL_InitTick+0xcc>)
 80012ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012d0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <HAL_InitTick+0xcc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_InitTick+0xcc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80012de:	4818      	ldr	r0, [pc, #96]	@ (8001340 <HAL_InitTick+0xcc>)
 80012e0:	f004 f845 	bl	800536e <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80012ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d118      	bne.n	8001324 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012f2:	4813      	ldr	r0, [pc, #76]	@ (8001340 <HAL_InitTick+0xcc>)
 80012f4:	f004 f89c 	bl	8005430 <HAL_TIM_Base_Start_IT>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80012fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10e      	bne.n	8001324 <HAL_InitTick+0xb0>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d808      	bhi.n	800131e <HAL_InitTick+0xaa>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	202a      	movs	r0, #42	@ 0x2a
 8001312:	f001 f93b 	bl	800258c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001316:	4a0c      	ldr	r2, [pc, #48]	@ (8001348 <HAL_InitTick+0xd4>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e002      	b.n	8001324 <HAL_InitTick+0xb0>
      }
      else
      {
        status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
}

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001324:	202a      	movs	r0, #42	@ 0x2a
 8001326:	f001 f94b 	bl	80025c0 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 800132a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800132e:	4618      	mov	r0, r3
 8001330:	3738      	adds	r7, #56	@ 0x38
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	44020c00 	.word	0x44020c00
 800133c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001340:	200005b4 	.word	0x200005b4
 8001344:	40012c00 	.word	0x40012c00
 8001348:	20000004 	.word	0x20000004

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <NMI_Handler+0x4>

08001354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <UsageFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <TIM1_UP_IRQHandler+0x10>)
 80013b2:	f004 f8e8 	bl	8005586 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200005b4 	.word	0x200005b4

080013c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c6:	4b30      	ldr	r3, [pc, #192]	@ (8001488 <SystemInit+0xc8>)
 80013c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001488 <SystemInit+0xc8>)
 80013ce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80013d6:	4b2d      	ldr	r3, [pc, #180]	@ (800148c <SystemInit+0xcc>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <SystemInit+0xcc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <SystemInit+0xcc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <SystemInit+0xcc>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4927      	ldr	r1, [pc, #156]	@ (800148c <SystemInit+0xcc>)
 80013ee:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <SystemInit+0xd0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80013f4:	4b25      	ldr	r3, [pc, #148]	@ (800148c <SystemInit+0xcc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <SystemInit+0xcc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001400:	4b22      	ldr	r3, [pc, #136]	@ (800148c <SystemInit+0xcc>)
 8001402:	4a24      	ldr	r2, [pc, #144]	@ (8001494 <SystemInit+0xd4>)
 8001404:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <SystemInit+0xcc>)
 8001408:	2200      	movs	r2, #0
 800140a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800140c:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <SystemInit+0xcc>)
 800140e:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <SystemInit+0xd4>)
 8001410:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001412:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <SystemInit+0xcc>)
 8001414:	2200      	movs	r2, #0
 8001416:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001418:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <SystemInit+0xcc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1b      	ldr	r2, [pc, #108]	@ (800148c <SystemInit+0xcc>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001422:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001424:	4b19      	ldr	r3, [pc, #100]	@ (800148c <SystemInit+0xcc>)
 8001426:	2200      	movs	r2, #0
 8001428:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <SystemInit+0xc8>)
 800142c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001430:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <SystemInit+0xd8>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800143a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001442:	d003      	beq.n	800144c <SystemInit+0x8c>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800144a:	d117      	bne.n	800147c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <SystemInit+0xd8>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <SystemInit+0xd8>)
 800145a:	4a10      	ldr	r2, [pc, #64]	@ (800149c <SystemInit+0xdc>)
 800145c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <SystemInit+0xd8>)
 8001460:	4a0f      	ldr	r2, [pc, #60]	@ (80014a0 <SystemInit+0xe0>)
 8001462:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <SystemInit+0xd8>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <SystemInit+0xd8>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <SystemInit+0xd8>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	4a08      	ldr	r2, [pc, #32]	@ (8001498 <SystemInit+0xd8>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	61d3      	str	r3, [r2, #28]
  }
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00
 800148c:	44020c00 	.word	0x44020c00
 8001490:	fae2eae3 	.word	0xfae2eae3
 8001494:	01010280 	.word	0x01010280
 8001498:	40022000 	.word	0x40022000
 800149c:	08192a3b 	.word	0x08192a3b
 80014a0:	4c5d6e7f 	.word	0x4c5d6e7f

080014a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80014a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014aa:	e003      	b.n	80014b4 <LoopCopyDataInit>

080014ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014b2:	3104      	adds	r1, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014b4:	480b      	ldr	r0, [pc, #44]	@ (80014e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014bc:	d3f6      	bcc.n	80014ac <CopyDataInit>
	ldr	r2, =_sbss
 80014be:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80014c0:	e002      	b.n	80014c8 <LoopFillZerobss>

080014c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014c4:	f842 3b04 	str.w	r3, [r2], #4

080014c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <LoopForever+0x16>)
	cmp	r2, r3
 80014ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014cc:	d3f9      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ce:	f7ff ff77 	bl	80013c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d2:	f005 fbdb 	bl	8006c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d6:	f7fe fedf 	bl	8000298 <main>

080014da <LoopForever>:

LoopForever:
    b LoopForever
 80014da:	e7fe      	b.n	80014da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80014dc:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80014e0:	08006d1c 	.word	0x08006d1c
	ldr	r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014e8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80014ec:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80014f0:	20000604 	.word	0x20000604

080014f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC1_IRQHandler>
	...

080014f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f001 f83a 	bl	8002576 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001502:	f002 fc4b 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8001506:	4602      	mov	r2, r0
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <HAL_Init+0x44>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	490b      	ldr	r1, [pc, #44]	@ (8001540 <HAL_Init+0x48>)
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_Init+0x4c>)
 800151a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800151c:	2004      	movs	r0, #4
 800151e:	f001 f85d 	bl	80025dc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001522:	200f      	movs	r0, #15
 8001524:	f7ff fea6 	bl	8001274 <HAL_InitTick>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e002      	b.n	8001538 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001532:	f7ff fb09 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	bd80      	pop	{r7, pc}
 800153c:	44020c00 	.word	0x44020c00
 8001540:	08006cec 	.word	0x08006cec
 8001544:	20000000 	.word	0x20000000

08001548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000008 	.word	0x20000008
 800156c:	20000600 	.word	0x20000600

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000600 	.word	0x20000600

08001588 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	609a      	str	r2, [r3, #8]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80015fe:	f043 0202 	orr.w	r2, r3, #2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800161e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001622:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	42028000 	.word	0x42028000

0800163c <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3360      	adds	r3, #96	@ 0x60
 800164e:	461a      	mov	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <LL_ADC_SetOffset+0x44>)
 800165e:	4013      	ands	r3, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	4313      	orrs	r3, r2
 800166c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001674:	bf00      	nop
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	03fff000 	.word	0x03fff000

08001684 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3360      	adds	r3, #96	@ 0x60
 8001692:	461a      	mov	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3360      	adds	r3, #96	@ 0x60
 80016c0:	461a      	mov	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b087      	sub	sp, #28
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3360      	adds	r3, #96	@ 0x60
 80016f6:	461a      	mov	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	431a      	orrs	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3360      	adds	r3, #96	@ 0x60
 800172c:	461a      	mov	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	431a      	orrs	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	615a      	str	r2, [r3, #20]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3330      	adds	r3, #48	@ 0x30
 8001788:	461a      	mov	r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	4413      	add	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	211f      	movs	r1, #31
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	401a      	ands	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0e9b      	lsrs	r3, r3, #26
 80017b0:	f003 011f 	and.w	r1, r3, #31
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	431a      	orrs	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017c4:	bf00      	nop
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3314      	adds	r3, #20
 80017e0:	461a      	mov	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	0e5b      	lsrs	r3, r3, #25
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	0d1b      	lsrs	r3, r3, #20
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2107      	movs	r1, #7
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	401a      	ands	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	0d1b      	lsrs	r3, r3, #20
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0318 	and.w	r3, r3, #24
 800184a:	4908      	ldr	r1, [pc, #32]	@ (800186c <LL_ADC_SetChannelSingleDiff+0x44>)
 800184c:	40d9      	lsrs	r1, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	400b      	ands	r3, r1
 8001852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001856:	431a      	orrs	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	000fffff 	.word	0x000fffff

08001870 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001880:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6093      	str	r3, [r2, #8]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018a8:	d101      	bne.n	80018ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80018cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80018f8:	d101      	bne.n	80018fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <LL_ADC_IsEnabled+0x18>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <LL_ADC_IsEnabled+0x1a>
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b04      	cmp	r3, #4
 8001944:	d101      	bne.n	800194a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b08      	cmp	r3, #8
 800196a:	d101      	bne.n	8001970 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e131      	b.n	8001bfe <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff f8d5 	bl	8000b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff67 	bl	8001894 <LL_ADC_IsDeepPowerDownEnabled>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff4d 	bl	8001870 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff82 	bl	80018e4 <LL_ADC_IsInternalRegulatorEnabled>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d115      	bne.n	8001a12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff66 	bl	80018bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019f0:	4b85      	ldr	r3, [pc, #532]	@ (8001c08 <HAL_ADC_Init+0x288>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	099b      	lsrs	r3, r3, #6
 80019f6:	4a85      	ldr	r2, [pc, #532]	@ (8001c0c <HAL_ADC_Init+0x28c>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	3301      	adds	r3, #1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a04:	e002      	b.n	8001a0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f9      	bne.n	8001a06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff64 	bl	80018e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10d      	bne.n	8001a3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff75 	bl	8001932 <LL_ADC_REG_IsConversionOngoing>
 8001a48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 80ca 	bne.w	8001bec <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 80c6 	bne.w	8001bec <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a68:	f043 0202 	orr.w	r2, r3, #2
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff49 	bl	800190c <LL_ADC_IsEnabled>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10b      	bne.n	8001a98 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a80:	4863      	ldr	r0, [pc, #396]	@ (8001c10 <HAL_ADC_Init+0x290>)
 8001a82:	f7ff ff43 	bl	800190c <LL_ADC_IsEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d105      	bne.n	8001a98 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4619      	mov	r1, r3
 8001a92:	4860      	ldr	r0, [pc, #384]	@ (8001c14 <HAL_ADC_Init+0x294>)
 8001a94:	f7ff fd78 	bl	8001588 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7e5b      	ldrb	r3, [r3, #25]
 8001a9c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aa2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001aa8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001aae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d106      	bne.n	8001ad4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	3b01      	subs	r3, #1
 8001acc:	045b      	lsls	r3, r3, #17
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d009      	beq.n	8001af0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	4b48      	ldr	r3, [pc, #288]	@ (8001c18 <HAL_ADC_Init+0x298>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	69b9      	ldr	r1, [r7, #24]
 8001b00:	430b      	orrs	r3, r1
 8001b02:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff1a 	bl	8001958 <LL_ADC_INJ_IsConversionOngoing>
 8001b24:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d13d      	bne.n	8001ba8 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d13a      	bne.n	8001ba8 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7e1b      	ldrb	r3, [r3, #24]
 8001b36:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b3e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b4e:	f023 0302 	bic.w	r3, r3, #2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	69b9      	ldr	r1, [r7, #24]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d118      	bne.n	8001b98 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b7c:	4311      	orrs	r1, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b82:	4311      	orrs	r1, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	611a      	str	r2, [r3, #16]
 8001b96:	e007      	b.n	8001ba8 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10c      	bne.n	8001bca <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f023 010f 	bic.w	r1, r3, #15
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	1e5a      	subs	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bc8:	e007      	b.n	8001bda <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 020f 	bic.w	r2, r2, #15
 8001bd8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	f023 0303 	bic.w	r3, r3, #3
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bea:	e007      	b.n	8001bfc <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	f043 0210 	orr.w	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	053e2d63 	.word	0x053e2d63
 8001c10:	42028000 	.word	0x42028000
 8001c14:	42028300 	.word	0x42028300
 8001c18:	fff04007 	.word	0xfff04007

08001c1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0b6      	sub	sp, #216	@ 0xd8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x22>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e3d8      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x7d4>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fe71 	bl	8001932 <LL_ADC_REG_IsConversionOngoing>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 83bd 	bne.w	80023d2 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d104      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fcd5 	bl	8001614 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6859      	ldr	r1, [r3, #4]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f7ff fd7e 	bl	8001778 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fe56 	bl	8001932 <LL_ADC_REG_IsConversionOngoing>
 8001c86:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fe62 	bl	8001958 <LL_ADC_INJ_IsConversionOngoing>
 8001c94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f040 81d9 	bne.w	8002054 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ca2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 81d4 	bne.w	8002054 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001cb4:	d10f      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7ff fd85 	bl	80017d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fd3f 	bl	8001752 <LL_ADC_SetSamplingTimeCommonConfig>
 8001cd4:	e00e      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6819      	ldr	r1, [r3, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f7ff fd74 	bl	80017d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fd2f 	bl	8001752 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d022      	beq.n	8001d5c <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6919      	ldr	r1, [r3, #16]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d26:	f7ff fc89 	bl	800163c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6919      	ldr	r1, [r3, #16]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	461a      	mov	r2, r3
 8001d38:	f7ff fcd5 	bl	80016e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d102      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x136>
 8001d4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d50:	e000      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x138>
 8001d52:	2300      	movs	r3, #0
 8001d54:	461a      	mov	r2, r3
 8001d56:	f7ff fce1 	bl	800171c <LL_ADC_SetOffsetSaturation>
 8001d5a:	e17b      	b.n	8002054 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fc8e 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10a      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x16c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fc83 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	f003 021f 	and.w	r2, r3, #31
 8001d86:	e01e      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x1aa>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fc78 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8001da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001daa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8001dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8001db6:	2320      	movs	r3, #32
 8001db8:	e004      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8001dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x1c2>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0e9b      	lsrs	r3, r3, #26
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	e018      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x1f4>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001df6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8001e02:	2320      	movs	r3, #32
 8001e04:	e004      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8001e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d106      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fc47 	bl	80016b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2101      	movs	r1, #1
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fc2b 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10a      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x232>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fc20 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	0e9b      	lsrs	r3, r3, #26
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	e01e      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x270>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fc15 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001e6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001e74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	e004      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8001e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d105      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x288>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	e018      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x2ba>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	e004      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8001ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d106      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fbe4 	bl	80016b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2102      	movs	r1, #2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fbc8 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10a      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x2f8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2102      	movs	r1, #2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fbbd 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	f003 021f 	and.w	r2, r3, #31
 8001f12:	e01e      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x336>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2102      	movs	r1, #2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fbb2 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8001f42:	2320      	movs	r3, #32
 8001f44:	e004      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8001f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x34e>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0e9b      	lsrs	r3, r3, #26
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	e016      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x37c>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001f7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	e004      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8001f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d106      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fb83 	bl	80016b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2103      	movs	r1, #3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fb67 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10a      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x3ba>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2103      	movs	r1, #3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fb5c 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	0e9b      	lsrs	r3, r3, #26
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	e017      	b.n	8002006 <HAL_ADC_ConfigChannel+0x3ea>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2103      	movs	r1, #3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fb51 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001fee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ff0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001ff2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	e003      	b.n	8002004 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8001ffc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_ADC_ConfigChannel+0x402>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	e011      	b.n	8002042 <HAL_ADC_ConfigChannel+0x426>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800202c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800202e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8002036:	2320      	movs	r3, #32
 8002038:	e003      	b.n	8002042 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 800203a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002042:	429a      	cmp	r2, r3
 8002044:	d106      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	2103      	movs	r1, #3
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fb2e 	bl	80016b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fc57 	bl	800190c <LL_ADC_IsEnabled>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	f040 813f 	bne.w	80022e4 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	461a      	mov	r2, r3
 8002074:	f7ff fbd8 	bl	8001828 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a8e      	ldr	r2, [pc, #568]	@ (80022b8 <HAL_ADC_ConfigChannel+0x69c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	f040 8130 	bne.w	80022e4 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10b      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x490>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0e9b      	lsrs	r3, r3, #26
 800209a:	3301      	adds	r3, #1
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	bf94      	ite	ls
 80020a4:	2301      	movls	r3, #1
 80020a6:	2300      	movhi	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e019      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x4c4>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80020ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80020be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80020c4:	2320      	movs	r3, #32
 80020c6:	e003      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80020c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2b09      	cmp	r3, #9
 80020d8:	bf94      	ite	ls
 80020da:	2301      	movls	r3, #1
 80020dc:	2300      	movhi	r3, #0
 80020de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d079      	beq.n	80021d8 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x4e4>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0e9b      	lsrs	r3, r3, #26
 80020f6:	3301      	adds	r3, #1
 80020f8:	069b      	lsls	r3, r3, #26
 80020fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020fe:	e015      	b.n	800212c <HAL_ADC_ConfigChannel+0x510>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800210e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002110:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e003      	b.n	8002124 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 800211c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3301      	adds	r3, #1
 8002126:	069b      	lsls	r3, r3, #26
 8002128:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_ADC_ConfigChannel+0x530>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	3301      	adds	r3, #1
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	e017      	b.n	800217c <HAL_ADC_ConfigChannel+0x560>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800215a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800215c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800215e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	ea42 0103 	orr.w	r1, r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10a      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x586>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0e9b      	lsrs	r3, r3, #26
 8002192:	3301      	adds	r3, #1
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	051b      	lsls	r3, r3, #20
 80021a0:	e018      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x5b8>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80021b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80021b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 80021ba:	2320      	movs	r3, #32
 80021bc:	e003      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 80021be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d4:	430b      	orrs	r3, r1
 80021d6:	e080      	b.n	80022da <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x5d8>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	3301      	adds	r3, #1
 80021ec:	069b      	lsls	r3, r3, #26
 80021ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021f2:	e015      	b.n	8002220 <HAL_ADC_ConfigChannel+0x604>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002204:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e003      	b.n	8002218 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8002210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3301      	adds	r3, #1
 800221a:	069b      	lsls	r3, r3, #26
 800221c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002228:	2b00      	cmp	r3, #0
 800222a:	d109      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x624>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	3301      	adds	r3, #1
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	e017      	b.n	8002270 <HAL_ADC_ConfigChannel+0x654>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	61fb      	str	r3, [r7, #28]
  return result;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e003      	b.n	8002264 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	ea42 0103 	orr.w	r1, r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10d      	bne.n	800229c <HAL_ADC_ConfigChannel+0x680>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0e9b      	lsrs	r3, r3, #26
 8002286:	3301      	adds	r3, #1
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	3b1e      	subs	r3, #30
 8002294:	051b      	lsls	r3, r3, #20
 8002296:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800229a:	e01d      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x6bc>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	613b      	str	r3, [r7, #16]
  return result;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d103      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e005      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x6a8>
 80022b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f003 021f 	and.w	r2, r3, #31
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	3b1e      	subs	r3, #30
 80022d2:	051b      	lsls	r3, r3, #20
 80022d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022de:	4619      	mov	r1, r3
 80022e0:	f7ff fa76 	bl	80017d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b43      	ldr	r3, [pc, #268]	@ (80023f8 <HAL_ADC_ConfigChannel+0x7dc>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d079      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f0:	4842      	ldr	r0, [pc, #264]	@ (80023fc <HAL_ADC_ConfigChannel+0x7e0>)
 80022f2:	f7ff f96f 	bl	80015d4 <LL_ADC_GetCommonPathInternalCh>
 80022f6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a40      	ldr	r2, [pc, #256]	@ (8002400 <HAL_ADC_ConfigChannel+0x7e4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d124      	bne.n	800234e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11e      	bne.n	800234e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a3b      	ldr	r2, [pc, #236]	@ (8002404 <HAL_ADC_ConfigChannel+0x7e8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d164      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800231a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800231e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002322:	4619      	mov	r1, r3
 8002324:	4835      	ldr	r0, [pc, #212]	@ (80023fc <HAL_ADC_ConfigChannel+0x7e0>)
 8002326:	f7ff f942 	bl	80015ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800232a:	4b37      	ldr	r3, [pc, #220]	@ (8002408 <HAL_ADC_ConfigChannel+0x7ec>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	099b      	lsrs	r3, r3, #6
 8002330:	4a36      	ldr	r2, [pc, #216]	@ (800240c <HAL_ADC_ConfigChannel+0x7f0>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	3301      	adds	r3, #1
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800233e:	e002      	b.n	8002346 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3b01      	subs	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f9      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800234c:	e04a      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2f      	ldr	r2, [pc, #188]	@ (8002410 <HAL_ADC_ConfigChannel+0x7f4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d113      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002358:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800235c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10d      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a26      	ldr	r2, [pc, #152]	@ (8002404 <HAL_ADC_ConfigChannel+0x7e8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d13a      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800236e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002376:	4619      	mov	r1, r3
 8002378:	4820      	ldr	r0, [pc, #128]	@ (80023fc <HAL_ADC_ConfigChannel+0x7e0>)
 800237a:	f7ff f918 	bl	80015ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800237e:	e031      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a23      	ldr	r2, [pc, #140]	@ (8002414 <HAL_ADC_ConfigChannel+0x7f8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d113      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800238a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800238e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1a      	ldr	r2, [pc, #104]	@ (8002404 <HAL_ADC_ConfigChannel+0x7e8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d121      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023a8:	4619      	mov	r1, r3
 80023aa:	4814      	ldr	r0, [pc, #80]	@ (80023fc <HAL_ADC_ConfigChannel+0x7e0>)
 80023ac:	f7ff f8ff 	bl	80015ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 80023b0:	e018      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a18      	ldr	r2, [pc, #96]	@ (8002418 <HAL_ADC_ConfigChannel+0x7fc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d113      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a10      	ldr	r2, [pc, #64]	@ (8002404 <HAL_ADC_ConfigChannel+0x7e8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00e      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f910 	bl	80015f0 <LL_ADC_EnableChannelVDDcore>
 80023d0:	e008      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80023ec:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	37d8      	adds	r7, #216	@ 0xd8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	80080000 	.word	0x80080000
 80023fc:	42028300 	.word	0x42028300
 8002400:	c3210000 	.word	0xc3210000
 8002404:	42028000 	.word	0x42028000
 8002408:	20000000 	.word	0x20000000
 800240c:	053e2d63 	.word	0x053e2d63
 8002410:	88600004 	.word	0x88600004
 8002414:	c7520000 	.word	0xc7520000
 8002418:	99200040 	.word	0x99200040

0800241c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002444:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800248a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800248e:	2b00      	cmp	r3, #0
 8002490:	db0b      	blt.n	80024aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	4907      	ldr	r1, [pc, #28]	@ (80024b8 <__NVIC_EnableIRQ+0x38>)
 800249a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2001      	movs	r0, #1
 80024a2:	fa00 f202 	lsl.w	r2, r0, r2
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100

080024bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0a      	blt.n	80024e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	490c      	ldr	r1, [pc, #48]	@ (8002508 <__NVIC_SetPriority+0x4c>)
 80024d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e4:	e00a      	b.n	80024fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4908      	ldr	r1, [pc, #32]	@ (800250c <__NVIC_SetPriority+0x50>)
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3b04      	subs	r3, #4
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	761a      	strb	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f1c3 0307 	rsb	r3, r3, #7
 800252a:	2b04      	cmp	r3, #4
 800252c:	bf28      	it	cs
 800252e:	2304      	movcs	r3, #4
 8002530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3304      	adds	r3, #4
 8002536:	2b06      	cmp	r3, #6
 8002538:	d902      	bls.n	8002540 <NVIC_EncodePriority+0x30>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3b03      	subs	r3, #3
 800253e:	e000      	b.n	8002542 <NVIC_EncodePriority+0x32>
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43d9      	mvns	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	4313      	orrs	r3, r2
         );
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	@ 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff4c 	bl	800241c <__NVIC_SetPriorityGrouping>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800259a:	f7ff ff63 	bl	8002464 <__NVIC_GetPriorityGrouping>
 800259e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	6978      	ldr	r0, [r7, #20]
 80025a6:	f7ff ffb3 	bl	8002510 <NVIC_EncodePriority>
 80025aa:	4602      	mov	r2, r0
 80025ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff82 	bl	80024bc <__NVIC_SetPriority>
}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff56 	bl	8002480 <__NVIC_EnableIRQ>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d844      	bhi.n	8002674 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80025ea:	a201      	add	r2, pc, #4	@ (adr r2, 80025f0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002613 	.word	0x08002613
 80025f4:	08002631 	.word	0x08002631
 80025f8:	08002653 	.word	0x08002653
 80025fc:	08002675 	.word	0x08002675
 8002600:	08002605 	.word	0x08002605
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002604:	4b1f      	ldr	r3, [pc, #124]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1e      	ldr	r2, [pc, #120]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6013      	str	r3, [r2, #0]
      break;
 8002610:	e031      	b.n	8002676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002612:	4b1c      	ldr	r3, [pc, #112]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1b      	ldr	r2, [pc, #108]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002620:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002624:	4a18      	ldr	r2, [pc, #96]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002626:	f023 030c 	bic.w	r3, r3, #12
 800262a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800262e:	e022      	b.n	8002676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a13      	ldr	r2, [pc, #76]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002636:	f023 0304 	bic.w	r3, r3, #4
 800263a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800263e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002642:	f023 030c 	bic.w	r3, r3, #12
 8002646:	4a10      	ldr	r2, [pc, #64]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002650:	e011      	b.n	8002676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002652:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0b      	ldr	r2, [pc, #44]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800265e:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002660:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002664:	f023 030c 	bic.w	r3, r3, #12
 8002668:	4a07      	ldr	r2, [pc, #28]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800266a:	f043 0308 	orr.w	r3, r3, #8
 800266e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002672:	e000      	b.n	8002676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002674:	bf00      	nop
  }
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000e010 	.word	0xe000e010
 8002688:	44020c00 	.word	0x44020c00

0800268c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e014      	b.n	80026c8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	791b      	ldrb	r3, [r3, #4]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fad4 	bl	8000c5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	@ 0x30
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_DAC_ConfigChannel+0x1e>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e19a      	b.n	8002a28 <HAL_DAC_ConfigChannel+0x358>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	795b      	ldrb	r3, [r3, #5]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_DAC_ConfigChannel+0x2e>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e194      	b.n	8002a28 <HAL_DAC_ConfigChannel+0x358>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2202      	movs	r2, #2
 8002708:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b04      	cmp	r3, #4
 8002710:	d17a      	bne.n	8002808 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002712:	f7fe ff2d 	bl	8001570 <HAL_GetTick>
 8002716:	6238      	str	r0, [r7, #32]

    if (Channel == DAC_CHANNEL_1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d13d      	bne.n	800279a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800271e:	e018      	b.n	8002752 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002720:	f7fe ff26 	bl	8001570 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d911      	bls.n	8002752 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002734:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f043 0208 	orr.w	r2, r3, #8
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2203      	movs	r2, #3
 800274c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e16a      	b.n	8002a28 <HAL_DAC_ConfigChannel+0x358>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1df      	bne.n	8002720 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	6a12      	ldr	r2, [r2, #32]
 8002768:	641a      	str	r2, [r3, #64]	@ 0x40
 800276a:	e020      	b.n	80027ae <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800276c:	f7fe ff00 	bl	8001570 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d90f      	bls.n	800279a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002780:	2b00      	cmp	r3, #0
 8002782:	da0a      	bge.n	800279a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f043 0208 	orr.w	r2, r3, #8
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2203      	movs	r2, #3
 8002794:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e146      	b.n	8002a28 <HAL_DAC_ConfigChannel+0x358>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	dbe3      	blt.n	800276c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	6a12      	ldr	r2, [r2, #32]
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	ea02 0103 	and.w	r1, r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	21ff      	movs	r1, #255	@ 0xff
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	ea02 0103 	and.w	r1, r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d11d      	bne.n	800284c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	221f      	movs	r2, #31
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002828:	4013      	ands	r3, r2
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	61fb      	str	r3, [r7, #28]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002840:	4313      	orrs	r3, r2
 8002842:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800284a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2207      	movs	r2, #7
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002864:	4013      	ands	r3, r2
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
#if !defined(TIM8)
  /* Devices STM32H503xx */
  /* On STM32H503EB (package WLCSP25) DAC channel 1 connection to GPIO is not available and should not be configured.
     Package information is stored at the address PACKAGE_BASE, WLCSP25 correspond to the value 0xF (For more
     information, please refer to the Reference Manual) */
  const __IO uint16_t *tmp_package = (uint16_t *)PACKAGE_BASE;
 8002868:	4b71      	ldr	r3, [pc, #452]	@ (8002a30 <HAL_DAC_ConfigChannel+0x360>)
 800286a:	61bb      	str	r3, [r7, #24]
  if ((*(tmp_package) & 0x1FUL) == 0x0FUL)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2b0f      	cmp	r3, #15
 8002878:	d116      	bne.n	80028a8 <HAL_DAC_ConfigChannel+0x1d8>
  {
    if ((Channel == DAC_CHANNEL_1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d113      	bne.n	80028a8 <HAL_DAC_ConfigChannel+0x1d8>
        && ((sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d003      	beq.n	8002890 <HAL_DAC_ConfigChannel+0x1c0>
            || (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH)))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d10b      	bne.n	80028a8 <HAL_DAC_ConfigChannel+0x1d8>
    {
      /* Update return status */
      status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

      /* Change the DAC state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2204      	movs	r2, #4
 800289a:	711a      	strb	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_INVALID_CONFIG);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	611a      	str	r2, [r3, #16]
    }
  }
#endif /* Devices STM32H503xx */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d102      	bne.n	80028b6 <HAL_DAC_ConfigChannel+0x1e6>
  {
    connectOnChip = 0x00000000UL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b4:	e00f      	b.n	80028d6 <HAL_DAC_ConfigChannel+0x206>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d102      	bne.n	80028c4 <HAL_DAC_ConfigChannel+0x1f4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80028be:	2301      	movs	r3, #1
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c2:	e008      	b.n	80028d6 <HAL_DAC_ConfigChannel+0x206>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <HAL_DAC_ConfigChannel+0x202>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80028cc:	2301      	movs	r3, #1
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d0:	e001      	b.n	80028d6 <HAL_DAC_ConfigChannel+0x206>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028f8:	4013      	ands	r3, r2
 80028fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	791b      	ldrb	r3, [r3, #4]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d102      	bne.n	800290a <HAL_DAC_ConfigChannel+0x23a>
 8002904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002908:	e000      	b.n	800290c <HAL_DAC_ConfigChannel+0x23c>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	4313      	orrs	r3, r2
 8002910:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002924:	4013      	ands	r3, r2
 8002926:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	795b      	ldrb	r3, [r3, #5]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_DAC_ConfigChannel+0x266>
 8002930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002934:	e000      	b.n	8002938 <HAL_DAC_ConfigChannel+0x268>
 8002936:	2300      	movs	r3, #0
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	4313      	orrs	r3, r2
 800293c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002944:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d114      	bne.n	8002978 <HAL_DAC_ConfigChannel+0x2a8>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800294e:	f001 fb51 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8002952:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	4a37      	ldr	r2, [pc, #220]	@ (8002a34 <HAL_DAC_ConfigChannel+0x364>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d904      	bls.n	8002966 <HAL_DAC_ConfigChannel+0x296>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002964:	e00f      	b.n	8002986 <HAL_DAC_ConfigChannel+0x2b6>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	4a33      	ldr	r2, [pc, #204]	@ (8002a38 <HAL_DAC_ConfigChannel+0x368>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d90a      	bls.n	8002984 <HAL_DAC_ConfigChannel+0x2b4>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002976:	e006      	b.n	8002986 <HAL_DAC_ConfigChannel+0x2b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800297e:	4313      	orrs	r3, r2
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002982:	e000      	b.n	8002986 <HAL_DAC_ConfigChannel+0x2b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002984:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002994:	4313      	orrs	r3, r2
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800299e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029d8:	4013      	ands	r3, r2
 80029da:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61fb      	str	r3, [r7, #28]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029f0:	4313      	orrs	r3, r2
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	22c0      	movs	r2, #192	@ 0xc0
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002a24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3730      	adds	r7, #48	@ 0x30
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	08fff80e 	.word	0x08fff80e
 8002a34:	09896800 	.word	0x09896800
 8002a38:	04c4b400 	.word	0x04c4b400

08002a3c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a4a:	e136      	b.n	8002cba <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8128 	beq.w	8002cb4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d003      	beq.n	8002a74 <HAL_GPIO_Init+0x38>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b12      	cmp	r3, #18
 8002a72:	d125      	bne.n	8002ac0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a80:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4013      	ands	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	6979      	ldr	r1, [r7, #20]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d00b      	beq.n	8002b14 <HAL_GPIO_Init+0xd8>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d007      	beq.n	8002b14 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b08:	2b11      	cmp	r3, #17
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b12      	cmp	r3, #18
 8002b12:	d130      	bne.n	8002b76 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4013      	ands	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	f003 0201 	and.w	r2, r3, #1
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d017      	beq.n	8002bae <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4013      	ands	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d07c      	beq.n	8002cb4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002bba:	4a47      	ldr	r2, [pc, #284]	@ (8002cd8 <HAL_GPIO_Init+0x29c>)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3318      	adds	r3, #24
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0a9a      	lsrs	r2, r3, #10
 8002be2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cdc <HAL_GPIO_Init+0x2a0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	f002 0203 	and.w	r2, r2, #3
 8002bec:	00d2      	lsls	r2, r2, #3
 8002bee:	4093      	lsls	r3, r2
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002bf6:	4938      	ldr	r1, [pc, #224]	@ (8002cd8 <HAL_GPIO_Init+0x29c>)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	089b      	lsrs	r3, r3, #2
 8002bfc:	3318      	adds	r3, #24
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002c04:	4b34      	ldr	r3, [pc, #208]	@ (8002cd8 <HAL_GPIO_Init+0x29c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4013      	ands	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002c28:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd8 <HAL_GPIO_Init+0x29c>)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd8 <HAL_GPIO_Init+0x29c>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002c52:	4a21      	ldr	r2, [pc, #132]	@ (8002cd8 <HAL_GPIO_Init+0x29c>)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002c58:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <HAL_GPIO_Init+0x29c>)
 8002c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c5e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4013      	ands	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002c7e:	4a16      	ldr	r2, [pc, #88]	@ (8002cd8 <HAL_GPIO_Init+0x29c>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002c86:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <HAL_GPIO_Init+0x29c>)
 8002c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4013      	ands	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002cac:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <HAL_GPIO_Init+0x29c>)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f aec1 	bne.w	8002a4c <HAL_GPIO_Init+0x10>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	44022000 	.word	0x44022000
 8002cdc:	002f7f7f 	.word	0x002f7f7f

08002ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
 8002cec:	4613      	mov	r3, r2
 8002cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf0:	787b      	ldrb	r3, [r7, #1]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cf6:	887a      	ldrh	r2, [r7, #2]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e08d      	b.n	8002e3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd fff0 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	@ 0x24
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	e006      	b.n	8002d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d108      	bne.n	8002db2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	e007      	b.n	8002dc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69d9      	ldr	r1, [r3, #28]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d138      	bne.n	8002ece <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e032      	b.n	8002ed0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2224      	movs	r2, #36	@ 0x24
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e98:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0201 	orr.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ece:	2302      	movs	r3, #2
  }
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d139      	bne.n	8002f66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e033      	b.n	8002f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2224      	movs	r2, #36	@ 0x24
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e000      	b.n	8002f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
  }
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002f80:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e007      	b.n	8002fa2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0204 	bic.w	r2, r3, #4
 8002f9a:	4905      	ldr	r1, [pc, #20]	@ (8002fb0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	40030400 	.word	0x40030400

08002fb4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_ICACHE_Enable+0x1c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <HAL_ICACHE_Enable+0x1c>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40030400 	.word	0x40030400

08002fd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0c3      	b.n	800316e <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe f900 	bl	8001200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2203      	movs	r2, #3
 8003004:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f003 fdd9 	bl	8006bc4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	e03f      	b.n	8003098 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	440b      	add	r3, r1
 8003026:	3315      	adds	r3, #21
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	3314      	adds	r3, #20
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	3317      	adds	r3, #23
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	3324      	adds	r3, #36	@ 0x24
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	440b      	add	r3, r1
 8003076:	3328      	adds	r3, #40	@ 0x28
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	3304      	adds	r3, #4
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	3301      	adds	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	791b      	ldrb	r3, [r3, #4]
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d3ba      	bcc.n	8003018 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	e044      	b.n	8003132 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	440b      	add	r3, r1
 80030cc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	440b      	add	r3, r1
 800310e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	440b      	add	r3, r1
 8003124:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	3301      	adds	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	791b      	ldrb	r3, [r3, #4]
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	429a      	cmp	r2, r3
 800313a:	d3b5      	bcc.n	80030a8 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	7c1a      	ldrb	r2, [r3, #16]
 8003144:	f88d 2000 	strb.w	r2, [sp]
 8003148:	3304      	adds	r3, #4
 800314a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800314c:	f003 fd72 	bl	8006c34 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7b1b      	ldrb	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d102      	bne.n	800316c <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f805 	bl	8003176 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a4:	f043 0202 	orr.w	r2, r3, #2
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f000 bc28 	b.w	8003a20 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d0:	4b94      	ldr	r3, [pc, #592]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f003 0318 	and.w	r3, r3, #24
 80031d8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80031da:	4b92      	ldr	r3, [pc, #584]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d05b      	beq.n	80032a8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x46>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2b18      	cmp	r3, #24
 80031fa:	d114      	bne.n	8003226 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d111      	bne.n	8003226 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f000 bc08 	b.w	8003a20 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003210:	4b84      	ldr	r3, [pc, #528]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	4981      	ldr	r1, [pc, #516]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003220:	4313      	orrs	r3, r2
 8003222:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003224:	e040      	b.n	80032a8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d023      	beq.n	8003276 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800322e:	4b7d      	ldr	r3, [pc, #500]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a7c      	ldr	r2, [pc, #496]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fe f999 	bl	8001570 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003242:	f7fe f995 	bl	8001570 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e3e5      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003254:	4b73      	ldr	r3, [pc, #460]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003260:	4b70      	ldr	r3, [pc, #448]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	496d      	ldr	r1, [pc, #436]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003270:	4313      	orrs	r3, r2
 8003272:	618b      	str	r3, [r1, #24]
 8003274:	e018      	b.n	80032a8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003276:	4b6b      	ldr	r3, [pc, #428]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6a      	ldr	r2, [pc, #424]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 800327c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fe f975 	bl	8001570 <HAL_GetTick>
 8003286:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800328a:	f7fe f971 	bl	8001570 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e3c1      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800329c:	4b61      	ldr	r3, [pc, #388]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80a0 	beq.w	80033f6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_OscConfig+0x10c>
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b18      	cmp	r3, #24
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 8092 	bne.w	80033f6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e3a4      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x132>
 80032e0:	4b50      	ldr	r3, [pc, #320]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	e058      	b.n	80033a0 <HAL_RCC_OscConfig+0x1e4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d112      	bne.n	800331c <HAL_RCC_OscConfig+0x160>
 80032f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 80032fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b48      	ldr	r3, [pc, #288]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a47      	ldr	r2, [pc, #284]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003308:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b45      	ldr	r3, [pc, #276]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a44      	ldr	r2, [pc, #272]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e041      	b.n	80033a0 <HAL_RCC_OscConfig+0x1e4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003324:	d112      	bne.n	800334c <HAL_RCC_OscConfig+0x190>
 8003326:	4b3f      	ldr	r3, [pc, #252]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a3e      	ldr	r2, [pc, #248]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b3c      	ldr	r3, [pc, #240]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a3b      	ldr	r2, [pc, #236]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003338:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b39      	ldr	r3, [pc, #228]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a38      	ldr	r2, [pc, #224]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e029      	b.n	80033a0 <HAL_RCC_OscConfig+0x1e4>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003354:	d112      	bne.n	800337c <HAL_RCC_OscConfig+0x1c0>
 8003356:	4b33      	ldr	r3, [pc, #204]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a32      	ldr	r2, [pc, #200]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 800335c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b30      	ldr	r3, [pc, #192]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2f      	ldr	r2, [pc, #188]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003368:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b2d      	ldr	r3, [pc, #180]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2c      	ldr	r2, [pc, #176]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e011      	b.n	80033a0 <HAL_RCC_OscConfig+0x1e4>
 800337c:	4b29      	ldr	r3, [pc, #164]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a28      	ldr	r2, [pc, #160]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b26      	ldr	r3, [pc, #152]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a25      	ldr	r2, [pc, #148]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b23      	ldr	r3, [pc, #140]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a22      	ldr	r2, [pc, #136]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 800339a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800339e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe f8e2 	bl	8001570 <HAL_GetTick>
 80033ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80033b0:	f7fe f8de 	bl	8001570 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	@ 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e32e      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c2:	4b18      	ldr	r3, [pc, #96]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x1f4>
 80033ce:	e012      	b.n	80033f6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f8ce 	bl	8001570 <HAL_GetTick>
 80033d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80033d8:	f7fe f8ca 	bl	8001570 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	@ 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e31a      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003424 <HAL_RCC_OscConfig+0x268>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 809a 	beq.w	8003538 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x25a>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	2b18      	cmp	r3, #24
 800340e:	d149      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d146      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e2fe      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
 8003422:	bf00      	nop
 8003424:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11c      	bne.n	8003468 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800342e:	4b9a      	ldr	r3, [pc, #616]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0218 	and.w	r2, r3, #24
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	429a      	cmp	r2, r3
 800343c:	d014      	beq.n	8003468 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800343e:	4b96      	ldr	r3, [pc, #600]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 0218 	bic.w	r2, r3, #24
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	4993      	ldr	r1, [pc, #588]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003450:	f000 fdd0 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003454:	4b91      	ldr	r3, [pc, #580]	@ (800369c <HAL_RCC_OscConfig+0x4e0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd ff0b 	bl	8001274 <HAL_InitTick>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e2db      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe f882 	bl	8001570 <HAL_GetTick>
 800346c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003470:	f7fe f87e 	bl	8001570 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e2ce      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003482:	4b85      	ldr	r3, [pc, #532]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800348e:	4b82      	ldr	r3, [pc, #520]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	497e      	ldr	r1, [pc, #504]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80034a2:	e049      	b.n	8003538 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d02c      	beq.n	8003506 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80034ac:	4b7a      	ldr	r3, [pc, #488]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 0218 	bic.w	r2, r3, #24
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	4977      	ldr	r1, [pc, #476]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80034be:	4b76      	ldr	r3, [pc, #472]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a75      	ldr	r2, [pc, #468]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fe f851 	bl	8001570 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80034d2:	f7fe f84d 	bl	8001570 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e29d      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80034f0:	4b69      	ldr	r3, [pc, #420]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4966      	ldr	r1, [pc, #408]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	610b      	str	r3, [r1, #16]
 8003504:	e018      	b.n	8003538 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003506:	4b64      	ldr	r3, [pc, #400]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a63      	ldr	r2, [pc, #396]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fe f82d 	bl	8001570 <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800351a:	f7fe f829 	bl	8001570 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e279      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800352c:	4b5a      	ldr	r3, [pc, #360]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03c      	beq.n	80035be <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01c      	beq.n	8003586 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354c:	4b52      	ldr	r3, [pc, #328]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800354e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003552:	4a51      	ldr	r2, [pc, #324]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003554:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003558:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe f808 	bl	8001570 <HAL_GetTick>
 8003560:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003564:	f7fe f804 	bl	8001570 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e254      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003576:	4b48      	ldr	r3, [pc, #288]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800357c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ef      	beq.n	8003564 <HAL_RCC_OscConfig+0x3a8>
 8003584:	e01b      	b.n	80035be <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003586:	4b44      	ldr	r3, [pc, #272]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800358c:	4a42      	ldr	r2, [pc, #264]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800358e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7fd ffeb 	bl	8001570 <HAL_GetTick>
 800359a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800359e:	f7fd ffe7 	bl	8001570 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e237      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80035b0:	4b39      	ldr	r3, [pc, #228]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 80035b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ef      	bne.n	800359e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80d2 	beq.w	8003770 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80035cc:	4b34      	ldr	r3, [pc, #208]	@ (80036a0 <HAL_RCC_OscConfig+0x4e4>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d118      	bne.n	800360a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80035d8:	4b31      	ldr	r3, [pc, #196]	@ (80036a0 <HAL_RCC_OscConfig+0x4e4>)
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	4a30      	ldr	r2, [pc, #192]	@ (80036a0 <HAL_RCC_OscConfig+0x4e4>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e4:	f7fd ffc4 	bl	8001570 <HAL_GetTick>
 80035e8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ec:	f7fd ffc0 	bl	8001570 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e210      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80035fe:	4b28      	ldr	r3, [pc, #160]	@ (80036a0 <HAL_RCC_OscConfig+0x4e4>)
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d108      	bne.n	8003624 <HAL_RCC_OscConfig+0x468>
 8003612:	4b21      	ldr	r3, [pc, #132]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003618:	4a1f      	ldr	r2, [pc, #124]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003622:	e074      	b.n	800370e <HAL_RCC_OscConfig+0x552>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d118      	bne.n	800365e <HAL_RCC_OscConfig+0x4a2>
 800362c:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800362e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003632:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800363c:	4b16      	ldr	r3, [pc, #88]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800363e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003642:	4a15      	ldr	r2, [pc, #84]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003648:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800364c:	4b12      	ldr	r3, [pc, #72]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800364e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003652:	4a11      	ldr	r2, [pc, #68]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003654:	f023 0304 	bic.w	r3, r3, #4
 8003658:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800365c:	e057      	b.n	800370e <HAL_RCC_OscConfig+0x552>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b05      	cmp	r3, #5
 8003664:	d11e      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4e8>
 8003666:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800366c:	4a0a      	ldr	r2, [pc, #40]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800366e:	f043 0304 	orr.w	r3, r3, #4
 8003672:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003676:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800367c:	4a06      	ldr	r2, [pc, #24]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800367e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003682:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003686:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 8003688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800368c:	4a02      	ldr	r2, [pc, #8]	@ (8003698 <HAL_RCC_OscConfig+0x4dc>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003696:	e03a      	b.n	800370e <HAL_RCC_OscConfig+0x552>
 8003698:	44020c00 	.word	0x44020c00
 800369c:	20000004 	.word	0x20000004
 80036a0:	44020800 	.word	0x44020800
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b85      	cmp	r3, #133	@ 0x85
 80036aa:	d118      	bne.n	80036de <HAL_RCC_OscConfig+0x522>
 80036ac:	4ba2      	ldr	r3, [pc, #648]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80036ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036b2:	4aa1      	ldr	r2, [pc, #644]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80036b4:	f043 0304 	orr.w	r3, r3, #4
 80036b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036bc:	4b9e      	ldr	r3, [pc, #632]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80036be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036c2:	4a9d      	ldr	r2, [pc, #628]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80036c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036cc:	4b9a      	ldr	r3, [pc, #616]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80036ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036d2:	4a99      	ldr	r2, [pc, #612]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036dc:	e017      	b.n	800370e <HAL_RCC_OscConfig+0x552>
 80036de:	4b96      	ldr	r3, [pc, #600]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80036e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036e4:	4a94      	ldr	r2, [pc, #592]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036ee:	4b92      	ldr	r3, [pc, #584]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80036f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036f4:	4a90      	ldr	r2, [pc, #576]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80036f6:	f023 0304 	bic.w	r3, r3, #4
 80036fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036fe:	4b8e      	ldr	r3, [pc, #568]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003704:	4a8c      	ldr	r2, [pc, #560]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800370a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fd ff2b 	bl	8001570 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fd ff27 	bl	8001570 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e175      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003734:	4b80      	ldr	r3, [pc, #512]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0ed      	beq.n	800371e <HAL_RCC_OscConfig+0x562>
 8003742:	e015      	b.n	8003770 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd ff14 	bl	8001570 <HAL_GetTick>
 8003748:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800374a:	e00a      	b.n	8003762 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fd ff10 	bl	8001570 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e15e      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003762:	4b75      	ldr	r3, [pc, #468]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ed      	bne.n	800374c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d036      	beq.n	80037ea <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d019      	beq.n	80037b8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003784:	4b6c      	ldr	r3, [pc, #432]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a6b      	ldr	r2, [pc, #428]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 800378a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800378e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fd feee 	bl	8001570 <HAL_GetTick>
 8003794:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003798:	f7fd feea 	bl	8001570 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e13a      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80037aa:	4b63      	ldr	r3, [pc, #396]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x5dc>
 80037b6:	e018      	b.n	80037ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80037be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd fed4 	bl	8001570 <HAL_GetTick>
 80037c8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80037cc:	f7fd fed0 	bl	8001570 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e120      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80037de:	4b56      	ldr	r3, [pc, #344]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8115 	beq.w	8003a1e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b18      	cmp	r3, #24
 80037f8:	f000 80af 	beq.w	800395a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003800:	2b02      	cmp	r3, #2
 8003802:	f040 8086 	bne.w	8003912 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003806:	4b4c      	ldr	r3, [pc, #304]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a4b      	ldr	r2, [pc, #300]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 800380c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fd fead 	bl	8001570 <HAL_GetTick>
 8003816:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800381a:	f7fd fea9 	bl	8001570 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0f9      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800382c:	4b42      	ldr	r3, [pc, #264]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003838:	4b3f      	ldr	r3, [pc, #252]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 800383a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003840:	f023 0303 	bic.w	r3, r3, #3
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800384c:	0212      	lsls	r2, r2, #8
 800384e:	430a      	orrs	r2, r1
 8003850:	4939      	ldr	r1, [pc, #228]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003852:	4313      	orrs	r3, r2
 8003854:	628b      	str	r3, [r1, #40]	@ 0x28
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385a:	3b01      	subs	r3, #1
 800385c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003864:	3b01      	subs	r3, #1
 8003866:	025b      	lsls	r3, r3, #9
 8003868:	b29b      	uxth	r3, r3
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	3b01      	subs	r3, #1
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	3b01      	subs	r3, #1
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003886:	492c      	ldr	r1, [pc, #176]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800388c:	4b2a      	ldr	r3, [pc, #168]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	4a29      	ldr	r2, [pc, #164]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003892:	f023 0310 	bic.w	r3, r3, #16
 8003896:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389c:	4a26      	ldr	r2, [pc, #152]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80038a2:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	4a24      	ldr	r2, [pc, #144]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038a8:	f043 0310 	orr.w	r3, r3, #16
 80038ac:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80038ae:	4b22      	ldr	r3, [pc, #136]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b2:	f023 020c 	bic.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	491f      	ldr	r1, [pc, #124]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	f023 0220 	bic.w	r2, r3, #32
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038cc:	491a      	ldr	r1, [pc, #104]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038d2:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d6:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038dc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80038de:	4b16      	ldr	r3, [pc, #88]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a15      	ldr	r2, [pc, #84]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fd fe41 	bl	8001570 <HAL_GetTick>
 80038ee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80038f2:	f7fd fe3d 	bl	8001570 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e08d      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003904:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x736>
 8003910:	e085      	b.n	8003a1e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003912:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a08      	ldr	r2, [pc, #32]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 8003918:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800391c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fd fe27 	bl	8001570 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003924:	e00a      	b.n	800393c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003926:	f7fd fe23 	bl	8001570 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d903      	bls.n	800393c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e073      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
 8003938:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800393c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ee      	bne.n	8003926 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003948:	4b37      	ldr	r3, [pc, #220]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	4a36      	ldr	r2, [pc, #216]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 800394e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	6293      	str	r3, [r2, #40]	@ 0x28
 8003958:	e061      	b.n	8003a1e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800395a:	4b33      	ldr	r3, [pc, #204]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003960:	4b31      	ldr	r3, [pc, #196]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 8003962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003964:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396a:	2b01      	cmp	r3, #1
 800396c:	d031      	beq.n	80039d2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f003 0203 	and.w	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d12a      	bne.n	80039d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d122      	bne.n	80039d2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003996:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d11a      	bne.n	80039d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	0a5b      	lsrs	r3, r3, #9
 80039a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d111      	bne.n	80039d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ba:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d108      	bne.n	80039d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	0e1b      	lsrs	r3, r3, #24
 80039c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d001      	beq.n	80039d6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e024      	b.n	8003a20 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80039d6:	4b14      	ldr	r3, [pc, #80]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 80039d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039da:	08db      	lsrs	r3, r3, #3
 80039dc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d01a      	beq.n	8003a1e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80039e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 80039ee:	f023 0310 	bic.w	r3, r3, #16
 80039f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fd fdbc 	bl	8001570 <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80039fa:	bf00      	nop
 80039fc:	f7fd fdb8 	bl	8001570 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d0f9      	beq.n	80039fc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0c:	4a06      	ldr	r2, [pc, #24]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	4a04      	ldr	r2, [pc, #16]	@ (8003a28 <HAL_RCC_OscConfig+0x86c>)
 8003a18:	f043 0310 	orr.w	r3, r3, #16
 8003a1c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3720      	adds	r7, #32
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	44020c00 	.word	0x44020c00

08003a2c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e19e      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a40:	4b83      	ldr	r3, [pc, #524]	@ (8003c50 <HAL_RCC_ClockConfig+0x224>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d910      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b80      	ldr	r3, [pc, #512]	@ (8003c50 <HAL_RCC_ClockConfig+0x224>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 020f 	bic.w	r2, r3, #15
 8003a56:	497e      	ldr	r1, [pc, #504]	@ (8003c50 <HAL_RCC_ClockConfig+0x224>)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c50 <HAL_RCC_ClockConfig+0x224>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e186      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d012      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	4b74      	ldr	r3, [pc, #464]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d909      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003a8e:	4b71      	ldr	r3, [pc, #452]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	496d      	ldr	r1, [pc, #436]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d012      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	4b68      	ldr	r3, [pc, #416]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d909      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003ac0:	4b64      	ldr	r3, [pc, #400]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	4961      	ldr	r1, [pc, #388]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d908      	bls.n	8003b02 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003af0:	4b58      	ldr	r3, [pc, #352]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4955      	ldr	r1, [pc, #340]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d010      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	4b50      	ldr	r3, [pc, #320]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d908      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 020f 	bic.w	r2, r3, #15
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	494a      	ldr	r1, [pc, #296]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8093 	beq.w	8003c64 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b46:	4b43      	ldr	r3, [pc, #268]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d121      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e113      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d115      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e107      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d107      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003b76:	4b37      	ldr	r3, [pc, #220]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0fb      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b86:	4b33      	ldr	r3, [pc, #204]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0f3      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003b96:	4b2f      	ldr	r3, [pc, #188]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f023 0203 	bic.w	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	492c      	ldr	r1, [pc, #176]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba8:	f7fd fce2 	bl	8001570 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d112      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fd fcda 	bl	8001570 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0d7      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bce:	4b21      	ldr	r3, [pc, #132]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 0318 	and.w	r3, r3, #24
 8003bd6:	2b18      	cmp	r3, #24
 8003bd8:	d1ee      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x18c>
 8003bda:	e043      	b.n	8003c64 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d112      	bne.n	8003c0a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003be6:	f7fd fcc3 	bl	8001570 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e0c0      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bfc:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f003 0318 	and.w	r3, r3, #24
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d1ee      	bne.n	8003be6 <HAL_RCC_ClockConfig+0x1ba>
 8003c08:	e02c      	b.n	8003c64 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d122      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c14:	f7fd fcac 	bl	8001570 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0a9      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <HAL_RCC_ClockConfig+0x228>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f003 0318 	and.w	r3, r3, #24
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d1ee      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x1e8>
 8003c36:	e015      	b.n	8003c64 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fd fc9a 	bl	8001570 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d906      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e097      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
 8003c4e:	bf00      	nop
 8003c50:	40022000 	.word	0x40022000
 8003c54:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c58:	4b4b      	ldr	r3, [pc, #300]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f003 0318 	and.w	r3, r3, #24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e9      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	4b44      	ldr	r3, [pc, #272]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d208      	bcs.n	8003c92 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003c80:	4b41      	ldr	r3, [pc, #260]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f023 020f 	bic.w	r2, r3, #15
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	493e      	ldr	r1, [pc, #248]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c92:	4b3e      	ldr	r3, [pc, #248]	@ (8003d8c <HAL_RCC_ClockConfig+0x360>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d210      	bcs.n	8003cc2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8003d8c <HAL_RCC_ClockConfig+0x360>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 020f 	bic.w	r2, r3, #15
 8003ca8:	4938      	ldr	r1, [pc, #224]	@ (8003d8c <HAL_RCC_ClockConfig+0x360>)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb0:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <HAL_RCC_ClockConfig+0x360>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e05d      	b.n	8003d7e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d208      	bcs.n	8003cf0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003cde:	4b2a      	ldr	r3, [pc, #168]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4927      	ldr	r1, [pc, #156]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d012      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	4b21      	ldr	r3, [pc, #132]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d209      	bcs.n	8003d22 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	491a      	ldr	r1, [pc, #104]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d012      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d209      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003d40:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	490e      	ldr	r1, [pc, #56]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003d54:	f000 f822 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_ClockConfig+0x35c>)
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	490b      	ldr	r1, [pc, #44]	@ (8003d90 <HAL_RCC_ClockConfig+0x364>)
 8003d64:	5ccb      	ldrb	r3, [r1, r3]
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d94 <HAL_RCC_ClockConfig+0x368>)
 8003d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <HAL_RCC_ClockConfig+0x36c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd fa7e 	bl	8001274 <HAL_InitTick>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	44020c00 	.word	0x44020c00
 8003d8c:	40022000 	.word	0x40022000
 8003d90:	08006cec 	.word	0x08006cec
 8003d94:	20000000 	.word	0x20000000
 8003d98:	20000004 	.word	0x20000004

08003d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	@ 0x24
 8003da0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003da2:	4b8c      	ldr	r3, [pc, #560]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 0318 	and.w	r3, r3, #24
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d102      	bne.n	8003db4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003dae:	4b8a      	ldr	r3, [pc, #552]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	e107      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003db4:	4b87      	ldr	r3, [pc, #540]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f003 0318 	and.w	r3, r3, #24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d112      	bne.n	8003de6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003dc0:	4b84      	ldr	r3, [pc, #528]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003dcc:	4b81      	ldr	r3, [pc, #516]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	08db      	lsrs	r3, r3, #3
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	4a81      	ldr	r2, [pc, #516]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x240>)
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	e0f1      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003de0:	4b7e      	ldr	r3, [pc, #504]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x240>)
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	e0ee      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de6:	4b7b      	ldr	r3, [pc, #492]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 0318 	and.w	r3, r3, #24
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d102      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003df2:	4b7b      	ldr	r3, [pc, #492]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x244>)
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e0e5      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df8:	4b76      	ldr	r3, [pc, #472]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f003 0318 	and.w	r3, r3, #24
 8003e00:	2b18      	cmp	r3, #24
 8003e02:	f040 80dd 	bne.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003e06:	4b73      	ldr	r3, [pc, #460]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003e10:	4b70      	ldr	r3, [pc, #448]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003e1c:	4b6d      	ldr	r3, [pc, #436]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003e28:	4b6a      	ldr	r3, [pc, #424]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003e2c:	08db      	lsrs	r3, r3, #3
 8003e2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	fb02 f303 	mul.w	r3, r2, r3
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e40:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80b7 	beq.w	8003fba <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0xbe>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d056      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0x16a>
 8003e58:	e077      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003e5a:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02d      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e66:	4b5b      	ldr	r3, [pc, #364]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	08db      	lsrs	r3, r3, #3
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	4a5a      	ldr	r2, [pc, #360]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x240>)
 8003e72:	fa22 f303 	lsr.w	r3, r2, r3
 8003e76:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	ee07 3a90 	vmov	s15, r3
 8003e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e90:	4b50      	ldr	r3, [pc, #320]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ea0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ea4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003fe4 <HAL_RCC_GetSysClockFreq+0x248>
 8003ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003eb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003ec0:	e065      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	ee07 3a90 	vmov	s15, r3
 8003ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ecc:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003fe8 <HAL_RCC_GetSysClockFreq+0x24c>
 8003ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ee4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ee8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003fe4 <HAL_RCC_GetSysClockFreq+0x248>
 8003eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ef4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f00:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003f04:	e043      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	ee07 3a90 	vmov	s15, r3
 8003f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f10:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003fec <HAL_RCC_GetSysClockFreq+0x250>
 8003f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f18:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f20:	ee07 3a90 	vmov	s15, r3
 8003f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f28:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f2c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003fe4 <HAL_RCC_GetSysClockFreq+0x248>
 8003f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f44:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003f48:	e021      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f54:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ff0 <HAL_RCC_GetSysClockFreq+0x254>
 8003f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f70:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003fe4 <HAL_RCC_GetSysClockFreq+0x248>
 8003f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f88:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003f8c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003f8e:	4b11      	ldr	r3, [pc, #68]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f92:	0a5b      	lsrs	r3, r3, #9
 8003f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f98:	3301      	adds	r3, #1
 8003f9a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fa6:	edd7 6a06 	vldr	s13, [r7, #24]
 8003faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb2:	ee17 3a90 	vmov	r3, s15
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	e004      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e001      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003fc0:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x240>)
 8003fc2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3724      	adds	r7, #36	@ 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	44020c00 	.word	0x44020c00
 8003fd8:	003d0900 	.word	0x003d0900
 8003fdc:	03d09000 	.word	0x03d09000
 8003fe0:	017d7840 	.word	0x017d7840
 8003fe4:	46000000 	.word	0x46000000
 8003fe8:	4c742400 	.word	0x4c742400
 8003fec:	4bbebc20 	.word	0x4bbebc20
 8003ff0:	4a742400 	.word	0x4a742400

08003ff4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003ff8:	f7ff fed0 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b08      	ldr	r3, [pc, #32]	@ (8004020 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004000:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004002:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004006:	4907      	ldr	r1, [pc, #28]	@ (8004024 <HAL_RCC_GetHCLKFreq+0x30>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800400a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800400e:	fa22 f303 	lsr.w	r3, r2, r3
 8004012:	4a05      	ldr	r2, [pc, #20]	@ (8004028 <HAL_RCC_GetHCLKFreq+0x34>)
 8004014:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004016:	4b04      	ldr	r3, [pc, #16]	@ (8004028 <HAL_RCC_GetHCLKFreq+0x34>)
 8004018:	681b      	ldr	r3, [r3, #0]
}
 800401a:	4618      	mov	r0, r3
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	44020c00 	.word	0x44020c00
 8004024:	08006cec 	.word	0x08006cec
 8004028:	20000000 	.word	0x20000000

0800402c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004030:	f7ff ffe0 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4904      	ldr	r1, [pc, #16]	@ (8004054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd80      	pop	{r7, pc}
 8004050:	44020c00 	.word	0x44020c00
 8004054:	08006cfc 	.word	0x08006cfc

08004058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800405c:	f7ff ffca 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b06      	ldr	r3, [pc, #24]	@ (800407c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	4904      	ldr	r1, [pc, #16]	@ (8004080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	44020c00 	.word	0x44020c00
 8004080:	08006cfc 	.word	0x08006cfc

08004084 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	221f      	movs	r2, #31
 8004092:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004094:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <HAL_RCC_GetClockConfig+0x68>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f003 0203 	and.w	r2, r3, #3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 80040a0:	4b12      	ldr	r3, [pc, #72]	@ (80040ec <HAL_RCC_GetClockConfig+0x68>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040d2:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <HAL_RCC_GetClockConfig+0x6c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 020f 	and.w	r2, r3, #15
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	601a      	str	r2, [r3, #0]
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	44020c00 	.word	0x44020c00
 80040f0:	40022000 	.word	0x40022000

080040f4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80040f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f8:	b0aa      	sub	sp, #168	@ 0xa8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004100:	2300      	movs	r3, #0
 8004102:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004106:	2300      	movs	r3, #0
 8004108:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800410c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004118:	2500      	movs	r5, #0
 800411a:	ea54 0305 	orrs.w	r3, r4, r5
 800411e:	d00b      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004120:	4bb8      	ldr	r3, [pc, #736]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004126:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800412a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800412e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004130:	4ab4      	ldr	r2, [pc, #720]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004132:	430b      	orrs	r3, r1
 8004134:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004138:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f002 0801 	and.w	r8, r2, #1
 8004144:	f04f 0900 	mov.w	r9, #0
 8004148:	ea58 0309 	orrs.w	r3, r8, r9
 800414c:	d038      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800414e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004154:	2b05      	cmp	r3, #5
 8004156:	d819      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004158:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004195 	.word	0x08004195
 8004164:	08004179 	.word	0x08004179
 8004168:	0800418d 	.word	0x0800418d
 800416c:	08004195 	.word	0x08004195
 8004170:	08004195 	.word	0x08004195
 8004174:	08004195 	.word	0x08004195
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004178:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800417c:	3308      	adds	r3, #8
 800417e:	4618      	mov	r0, r3
 8004180:	f000 ff46 	bl	8005010 <RCCEx_PLL2_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800418a:	e004      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004192:	e000      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8004194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004196:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10c      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800419e:	4b99      	ldr	r3, [pc, #612]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041a4:	f023 0107 	bic.w	r1, r3, #7
 80041a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ae:	4a95      	ldr	r2, [pc, #596]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041b0:	430b      	orrs	r3, r1
 80041b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80041b6:	e003      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80041bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	f002 0a02 	and.w	sl, r2, #2
 80041cc:	f04f 0b00 	mov.w	fp, #0
 80041d0:	ea5a 030b 	orrs.w	r3, sl, fp
 80041d4:	d03c      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80041d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041dc:	2b28      	cmp	r3, #40	@ 0x28
 80041de:	d01b      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80041e0:	2b28      	cmp	r3, #40	@ 0x28
 80041e2:	d815      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d019      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x128>
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d811      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80041ec:	2b18      	cmp	r3, #24
 80041ee:	d017      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80041f0:	2b18      	cmp	r3, #24
 80041f2:	d80d      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d015      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d109      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004200:	3308      	adds	r3, #8
 8004202:	4618      	mov	r0, r3
 8004204:	f000 ff04 	bl	8005010 <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800420e:	e00a      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004216:	e006      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004218:	bf00      	nop
 800421a:	e004      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800421c:	bf00      	nop
 800421e:	e002      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004220:	bf00      	nop
 8004222:	e000      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004226:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10c      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800422e:	4b75      	ldr	r3, [pc, #468]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004234:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004238:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800423c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423e:	4a71      	ldr	r2, [pc, #452]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004240:	430b      	orrs	r3, r1
 8004242:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004246:	e003      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800424c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004250:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f002 0304 	and.w	r3, r2, #4
 800425c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004266:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d040      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004270:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004276:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800427a:	d01e      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800427c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004280:	d817      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004286:	d01a      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8004288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428c:	d811      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800428e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004290:	d017      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004292:	2bc0      	cmp	r3, #192	@ 0xc0
 8004294:	d80d      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d015      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800429a:	2b40      	cmp	r3, #64	@ 0x40
 800429c:	d109      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800429e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042a2:	3308      	adds	r3, #8
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 feb3 	bl	8005010 <RCCEx_PLL2_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80042b0:	e00a      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80042b8:	e006      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80042ba:	bf00      	nop
 80042bc:	e004      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80042be:	bf00      	nop
 80042c0:	e002      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80042c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10c      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80042d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80042d6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80042da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e0:	4a48      	ldr	r2, [pc, #288]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80042e8:	e003      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80042ee:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80042fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004308:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800430c:	460b      	mov	r3, r1
 800430e:	4313      	orrs	r3, r2
 8004310:	d043      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004312:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800431c:	d021      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800431e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004322:	d81a      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004324:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004328:	d01d      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800432a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800432e:	d814      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004330:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004334:	d019      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004336:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800433a:	d80e      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d016      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004344:	d109      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004346:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800434a:	3308      	adds	r3, #8
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fe5f 	bl	8005010 <RCCEx_PLL2_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004358:	e00a      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004362:	bf00      	nop
 8004364:	e004      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004366:	bf00      	nop
 8004368:	e002      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800436a:	bf00      	nop
 800436c:	e000      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800436e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004370:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10c      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004378:	4b22      	ldr	r3, [pc, #136]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800437a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800437e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004382:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	4a1e      	ldr	r2, [pc, #120]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800438a:	430b      	orrs	r3, r1
 800438c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004390:	e003      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004396:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800439a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80043a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043a8:	2300      	movs	r3, #0
 80043aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043b0:	460b      	mov	r3, r1
 80043b2:	4313      	orrs	r3, r2
 80043b4:	d03e      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80043b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043c0:	d01b      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x306>
 80043c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043c6:	d814      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80043c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043cc:	d017      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80043ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043d2:	d80e      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d017      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043dc:	d109      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043e2:	3308      	adds	r3, #8
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fe13 	bl	8005010 <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80043f0:	e00b      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80043f8:	e007      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80043fa:	bf00      	nop
 80043fc:	e005      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80043fe:	bf00      	nop
 8004400:	e003      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004402:	bf00      	nop
 8004404:	44020c00 	.word	0x44020c00
        break;
 8004408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10c      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004412:	4ba5      	ldr	r3, [pc, #660]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004414:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004418:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800441c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	4aa1      	ldr	r2, [pc, #644]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004424:	430b      	orrs	r3, r1
 8004426:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004430:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004434:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004440:	673b      	str	r3, [r7, #112]	@ 0x70
 8004442:	2300      	movs	r3, #0
 8004444:	677b      	str	r3, [r7, #116]	@ 0x74
 8004446:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800444a:	460b      	mov	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	d03b      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004450:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004456:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800445a:	d01b      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800445c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004460:	d814      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004462:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004466:	d017      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004468:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800446c:	d80e      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x398>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d014      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8004472:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004476:	d109      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004478:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800447c:	3308      	adds	r3, #8
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fdc6 	bl	8005010 <RCCEx_PLL2_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800448a:	e008      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004492:	e004      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004494:	bf00      	nop
 8004496:	e002      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004498:	bf00      	nop
 800449a:	e000      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800449c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80044a6:	4b80      	ldr	r3, [pc, #512]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80044a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044ac:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80044b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b6:	4a7c      	ldr	r2, [pc, #496]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80044be:	e003      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80044c4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80044c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80044d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044d6:	2300      	movs	r3, #0
 80044d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80044de:	460b      	mov	r3, r1
 80044e0:	4313      	orrs	r3, r2
 80044e2:	d033      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80044e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044ee:	d015      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x428>
 80044f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044f4:	d80e      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d012      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80044fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044fe:	d109      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004500:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004504:	3308      	adds	r3, #8
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fd82 	bl	8005010 <RCCEx_PLL2_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004512:	e006      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800451a:	e002      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800451c:	bf00      	nop
 800451e:	e000      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004522:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10c      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800452a:	4b5f      	ldr	r3, [pc, #380]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800452c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004530:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004534:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453a:	4a5b      	ldr	r2, [pc, #364]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800453c:	430b      	orrs	r3, r1
 800453e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004542:	e003      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004548:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800454c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	2100      	movs	r1, #0
 8004556:	6639      	str	r1, [r7, #96]	@ 0x60
 8004558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800455c:	667b      	str	r3, [r7, #100]	@ 0x64
 800455e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004562:	460b      	mov	r3, r1
 8004564:	4313      	orrs	r3, r2
 8004566:	d033      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004568:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800456c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004572:	d015      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8004574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004578:	d80e      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800457a:	2b00      	cmp	r3, #0
 800457c:	d012      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800457e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004582:	d109      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004584:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004588:	3308      	adds	r3, #8
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fd40 	bl	8005010 <RCCEx_PLL2_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004596:	e006      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800459e:	e002      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80045a0:	bf00      	nop
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80045a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80045ae:	4b3e      	ldr	r3, [pc, #248]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80045b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045b4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80045b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045be:	4a3a      	ldr	r2, [pc, #232]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80045c6:	e003      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80045cc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	2100      	movs	r1, #0
 80045da:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80045e6:	460b      	mov	r3, r1
 80045e8:	4313      	orrs	r3, r2
 80045ea:	d00e      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80045ec:	4b2e      	ldr	r3, [pc, #184]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	4a2d      	ldr	r2, [pc, #180]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80045f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045f6:	61d3      	str	r3, [r2, #28]
 80045f8:	4b2b      	ldr	r3, [pc, #172]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80045fa:	69d9      	ldr	r1, [r3, #28]
 80045fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004604:	4a28      	ldr	r2, [pc, #160]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004606:	430b      	orrs	r3, r1
 8004608:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800460a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004616:	653b      	str	r3, [r7, #80]	@ 0x50
 8004618:	2300      	movs	r3, #0
 800461a:	657b      	str	r3, [r7, #84]	@ 0x54
 800461c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d046      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004626:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004630:	d021      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004632:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004636:	d81a      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463c:	d01d      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800463e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004642:	d814      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004648:	d019      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800464a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800464e:	d80e      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d016      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8004654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004658:	d109      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800465a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800465e:	3308      	adds	r3, #8
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fcd5 	bl	8005010 <RCCEx_PLL2_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800466c:	e00a      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004674:	e006      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004676:	bf00      	nop
 8004678:	e004      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800467a:	bf00      	nop
 800467c:	e002      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004684:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10f      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800468e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004692:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004696:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800469a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469c:	4a02      	ldr	r2, [pc, #8]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800469e:	430b      	orrs	r3, r1
 80046a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80046a4:	e006      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80046a6:	bf00      	nop
 80046a8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80046b0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80046c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046c2:	2300      	movs	r3, #0
 80046c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046ca:	460b      	mov	r3, r1
 80046cc:	4313      	orrs	r3, r2
 80046ce:	d043      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80046d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80046da:	d021      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80046dc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80046e0:	d81a      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80046e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046e6:	d01d      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80046e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046ec:	d814      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80046ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046f2:	d019      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80046f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046f8:	d80e      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x638>
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004702:	d109      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004704:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004708:	3308      	adds	r3, #8
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fc80 	bl	8005010 <RCCEx_PLL2_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004716:	e00a      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800471e:	e006      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004720:	bf00      	nop
 8004722:	e004      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004724:	bf00      	nop
 8004726:	e002      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004728:	bf00      	nop
 800472a:	e000      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800472c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10c      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004736:	4bb6      	ldr	r3, [pc, #728]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004738:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800473c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004740:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004746:	4ab2      	ldr	r2, [pc, #712]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004748:	430b      	orrs	r3, r1
 800474a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800474e:	e003      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004750:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004754:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004758:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004764:	643b      	str	r3, [r7, #64]	@ 0x40
 8004766:	2300      	movs	r3, #0
 8004768:	647b      	str	r3, [r7, #68]	@ 0x44
 800476a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d030      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004774:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800477a:	2b05      	cmp	r3, #5
 800477c:	d80f      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800477e:	2b03      	cmp	r3, #3
 8004780:	d211      	bcs.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8004782:	2b01      	cmp	r3, #1
 8004784:	d911      	bls.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8004786:	2b02      	cmp	r3, #2
 8004788:	d109      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800478a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800478e:	3308      	adds	r3, #8
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fc3d 	bl	8005010 <RCCEx_PLL2_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800479c:	e006      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80047a4:	e002      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80047aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10c      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80047b4:	4b96      	ldr	r3, [pc, #600]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80047b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047ba:	f023 0107 	bic.w	r1, r3, #7
 80047be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047c4:	4a92      	ldr	r2, [pc, #584]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80047c6:	430b      	orrs	r3, r1
 80047c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80047cc:	e003      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80047d2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80047d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	2100      	movs	r1, #0
 80047e0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047ec:	460b      	mov	r3, r1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80047f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d005      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004806:	e002      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8004808:	bf00      	nop
 800480a:	e000      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800480c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800480e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10c      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004816:	4b7e      	ldr	r3, [pc, #504]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800481c:	f023 0108 	bic.w	r1, r3, #8
 8004820:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004824:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004826:	4a7a      	ldr	r2, [pc, #488]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004828:	430b      	orrs	r3, r1
 800482a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004834:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004838:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004844:	633b      	str	r3, [r7, #48]	@ 0x30
 8004846:	2300      	movs	r3, #0
 8004848:	637b      	str	r3, [r7, #52]	@ 0x34
 800484a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800484e:	460b      	mov	r3, r1
 8004850:	4313      	orrs	r3, r2
 8004852:	f000 80b0 	beq.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004856:	4b6f      	ldr	r3, [pc, #444]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	4a6e      	ldr	r2, [pc, #440]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004862:	f7fc fe85 	bl	8001570 <HAL_GetTick>
 8004866:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800486a:	e00b      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486c:	f7fc fe80 	bl	8001570 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d903      	bls.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004882:	e005      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004884:	4b63      	ldr	r3, [pc, #396]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ed      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8004890:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004894:	2b00      	cmp	r3, #0
 8004896:	f040 808a 	bne.w	80049ae <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800489a:	4b5d      	ldr	r3, [pc, #372]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800489c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80048a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d022      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80048b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d01b      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048be:	4b54      	ldr	r3, [pc, #336]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80048c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048cc:	4b50      	ldr	r3, [pc, #320]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80048ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048d2:	4a4f      	ldr	r2, [pc, #316]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048dc:	4b4c      	ldr	r3, [pc, #304]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80048de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e2:	4a4b      	ldr	r2, [pc, #300]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80048e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048ec:	4a48      	ldr	r2, [pc, #288]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80048ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d019      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004902:	f7fc fe35 	bl	8001570 <HAL_GetTick>
 8004906:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490a:	e00d      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490c:	f7fc fe30 	bl	8001570 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491c:	4293      	cmp	r3, r2
 800491e:	d903      	bls.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8004926:	e006      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004928:	4b39      	ldr	r3, [pc, #228]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800492a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0ea      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8004936:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d132      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800493e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004948:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800494c:	d10f      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800494e:	4b30      	ldr	r3, [pc, #192]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004956:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800495a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004962:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004966:	4a2a      	ldr	r2, [pc, #168]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004968:	430b      	orrs	r3, r1
 800496a:	61d3      	str	r3, [r2, #28]
 800496c:	e005      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x886>
 800496e:	4b28      	ldr	r3, [pc, #160]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	4a27      	ldr	r2, [pc, #156]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004974:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004978:	61d3      	str	r3, [r2, #28]
 800497a:	4b25      	ldr	r3, [pc, #148]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800497c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004980:	4a23      	ldr	r2, [pc, #140]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004986:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800498a:	4b21      	ldr	r3, [pc, #132]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800498c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004990:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800499c:	430b      	orrs	r3, r1
 800499e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049a2:	e008      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80049a8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80049b2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80049c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c4:	2300      	movs	r3, #0
 80049c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80049cc:	460b      	mov	r3, r1
 80049ce:	4313      	orrs	r3, r2
 80049d0:	d038      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80049d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d8:	2b30      	cmp	r3, #48	@ 0x30
 80049da:	d014      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80049dc:	2b30      	cmp	r3, #48	@ 0x30
 80049de:	d80e      	bhi.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d012      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x916>
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d80a      	bhi.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d106      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f0:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	4a06      	ldr	r2, [pc, #24]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80049f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049fa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80049fc:	e00d      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004a04:	e009      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8004a06:	bf00      	nop
 8004a08:	e007      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8004a0a:	bf00      	nop
 8004a0c:	e005      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x926>
 8004a0e:	bf00      	nop
 8004a10:	44020c00 	.word	0x44020c00
 8004a14:	44020800 	.word	0x44020800
        break;
 8004a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a1a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004a22:	4bb5      	ldr	r3, [pc, #724]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a32:	49b1      	ldr	r1, [pc, #708]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004a3a:	e003      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004a40:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004a44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	2300      	movs	r3, #0
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	d03c      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d81d      	bhi.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8004a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a85 	.word	0x08004a85
 8004a74:	08004a93 	.word	0x08004a93
 8004a78:	08004aa7 	.word	0x08004aa7
 8004a7c:	08004aaf 	.word	0x08004aaf
 8004a80:	08004aaf 	.word	0x08004aaf
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a84:	4b9c      	ldr	r3, [pc, #624]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a88:	4a9b      	ldr	r2, [pc, #620]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a8e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004a90:	e00e      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a96:	3308      	adds	r3, #8
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fab9 	bl	8005010 <RCCEx_PLL2_Config>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004aa4:	e004      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004aac:	e000      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8004aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10c      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004abe:	f023 0207 	bic.w	r2, r3, #7
 8004ac2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac8:	498b      	ldr	r1, [pc, #556]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004ad0:	e003      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ad6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004af0:	460b      	mov	r3, r1
 8004af2:	4313      	orrs	r3, r2
 8004af4:	d03c      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d01f      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d819      	bhi.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8004b04:	2b18      	cmp	r3, #24
 8004b06:	d01d      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004b08:	2b18      	cmp	r3, #24
 8004b0a:	d815      	bhi.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d007      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004b14:	e010      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b16:	4b78      	ldr	r3, [pc, #480]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1a:	4a77      	ldr	r2, [pc, #476]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b20:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004b22:	e010      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b28:	3308      	adds	r3, #8
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fa70 	bl	8005010 <RCCEx_PLL2_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004b36:	e006      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004b3e:	e002      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8004b40:	bf00      	nop
 8004b42:	e000      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8004b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b46:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b54:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8004b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5e:	4966      	ldr	r1, [pc, #408]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004b66:	e003      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b68:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004b6c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004b70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b86:	460b      	mov	r3, r1
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	d03e      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b96:	d020      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8004b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b9c:	d819      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8004b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ba0:	d01d      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ba4:	d815      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8004baa:	2b40      	cmp	r3, #64	@ 0x40
 8004bac:	d007      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004bae:	e010      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb0:	4b51      	ldr	r3, [pc, #324]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	4a50      	ldr	r2, [pc, #320]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004bbc:	e010      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fa23 	bl	8005010 <RCCEx_PLL2_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004bd0:	e006      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8004bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10c      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004be8:	4b43      	ldr	r3, [pc, #268]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bee:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8004bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf8:	493f      	ldr	r1, [pc, #252]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004c00:	e003      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c02:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c06:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	2100      	movs	r1, #0
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c20:	460b      	mov	r3, r1
 8004c22:	4313      	orrs	r3, r2
 8004c24:	d038      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004c26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c30:	d00e      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8004c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c36:	d815      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d017      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8004c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c40:	d110      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c42:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c46:	4a2c      	ldr	r2, [pc, #176]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c4c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004c4e:	e00e      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c54:	3308      	adds	r3, #8
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f9da 	bl	8005010 <RCCEx_PLL2_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004c62:	e004      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004c6a:	e000      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8004c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c6e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004c76:	4b20      	ldr	r3, [pc, #128]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c86:	491c      	ldr	r1, [pc, #112]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004c8e:	e003      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c94:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	6039      	str	r1, [r7, #0]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	d039      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004cb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cba:	2b30      	cmp	r3, #48	@ 0x30
 8004cbc:	d01e      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004cbe:	2b30      	cmp	r3, #48	@ 0x30
 8004cc0:	d815      	bhi.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d002      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d007      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8004cca:	e010      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	4a09      	ldr	r2, [pc, #36]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cd8:	e011      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cde:	3308      	adds	r3, #8
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f995 	bl	8005010 <RCCEx_PLL2_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004cec:	e007      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004cf4:	e003      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8004cf6:	bf00      	nop
 8004cf8:	44020c00 	.word	0x44020c00
        break;
 8004cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004d06:	4b0c      	ldr	r3, [pc, #48]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d16:	4908      	ldr	r1, [pc, #32]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004d1e:	e003      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d24:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8004d28:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	37a8      	adds	r7, #168	@ 0xa8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d36:	bf00      	nop
 8004d38:	44020c00 	.word	0x44020c00

08004d3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b08b      	sub	sp, #44	@ 0x2c
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004d44:	4bad      	ldr	r3, [pc, #692]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004d4e:	4bab      	ldr	r3, [pc, #684]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004d58:	4ba8      	ldr	r3, [pc, #672]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5c:	0a1b      	lsrs	r3, r3, #8
 8004d5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d62:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004d64:	4ba5      	ldr	r3, [pc, #660]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004d6e:	4ba3      	ldr	r3, [pc, #652]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	08db      	lsrs	r3, r3, #3
 8004d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8126 	beq.w	8004fde <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d053      	beq.n	8004e40 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d86f      	bhi.n	8004e7e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d003      	beq.n	8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d02b      	beq.n	8004e02 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004daa:	e068      	b.n	8004e7e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004dac:	4b93      	ldr	r3, [pc, #588]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	08db      	lsrs	r3, r3, #3
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	4a92      	ldr	r2, [pc, #584]	@ (8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dbc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de0:	ed97 6a04 	vldr	s12, [r7, #16]
 8004de4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004e00:	e068      	b.n	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004e3e:	e049      	b.n	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800500c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	ee07 3a90 	vmov	s15, r3
 8004e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e60:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004e64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e78:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004e7c:	e02a      	b.n	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e7e:	4b5f      	ldr	r3, [pc, #380]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	08db      	lsrs	r3, r3, #3
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	4a5d      	ldr	r2, [pc, #372]	@ (8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	ee07 3a90 	vmov	s15, r3
 8004ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a04 	vldr	s12, [r7, #16]
 8004eb6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004ed2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ed4:	4b49      	ldr	r3, [pc, #292]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004edc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ee0:	d121      	bne.n	8004f26 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004ee2:	4b46      	ldr	r3, [pc, #280]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d017      	beq.n	8004f1e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004eee:	4b43      	ldr	r3, [pc, #268]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	0a5b      	lsrs	r3, r3, #9
 8004ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ef8:	ee07 3a90 	vmov	s15, r3
 8004efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004f00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f04:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004f08:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f14:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e006      	b.n	8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e002      	b.n	8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f2c:	4b33      	ldr	r3, [pc, #204]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f38:	d121      	bne.n	8004f7e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004f3a:	4b30      	ldr	r3, [pc, #192]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d017      	beq.n	8004f76 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f46:	4b2d      	ldr	r3, [pc, #180]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4a:	0c1b      	lsrs	r3, r3, #16
 8004f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004f58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004f60:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f6c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	605a      	str	r2, [r3, #4]
 8004f74:	e006      	b.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	e002      	b.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f84:	4b1d      	ldr	r3, [pc, #116]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f90:	d121      	bne.n	8004fd6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004f92:	4b1a      	ldr	r3, [pc, #104]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d017      	beq.n	8004fce <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f9e:	4b17      	ldr	r3, [pc, #92]	@ (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	0e1b      	lsrs	r3, r3, #24
 8004fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fa8:	ee07 3a90 	vmov	s15, r3
 8004fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004fb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fb4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004fb8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fcc:	e010      	b.n	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	e00c      	b.n	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	372c      	adds	r7, #44	@ 0x2c
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	44020c00 	.word	0x44020c00
 8005000:	03d09000 	.word	0x03d09000
 8005004:	46000000 	.word	0x46000000
 8005008:	4a742400 	.word	0x4a742400
 800500c:	4bbebc20 	.word	0x4bbebc20

08005010 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005018:	4b48      	ldr	r3, [pc, #288]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a47      	ldr	r2, [pc, #284]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 800501e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005022:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005024:	f7fc faa4 	bl	8001570 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800502a:	e008      	b.n	800503e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800502c:	f7fc faa0 	bl	8001570 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e07a      	b.n	8005134 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800503e:	4b3f      	ldr	r3, [pc, #252]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800504a:	4b3c      	ldr	r3, [pc, #240]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 800504c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6811      	ldr	r1, [r2, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6852      	ldr	r2, [r2, #4]
 800505e:	0212      	lsls	r2, r2, #8
 8005060:	430a      	orrs	r2, r1
 8005062:	4936      	ldr	r1, [pc, #216]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 8005064:	4313      	orrs	r3, r2
 8005066:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	3b01      	subs	r3, #1
 800506e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	3b01      	subs	r3, #1
 8005078:	025b      	lsls	r3, r3, #9
 800507a:	b29b      	uxth	r3, r3
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	3b01      	subs	r3, #1
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005098:	4928      	ldr	r1, [pc, #160]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 800509a:	4313      	orrs	r3, r2
 800509c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800509e:	4b27      	ldr	r3, [pc, #156]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	f023 020c 	bic.w	r2, r3, #12
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	4924      	ldr	r1, [pc, #144]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80050b0:	4b22      	ldr	r3, [pc, #136]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	f023 0220 	bic.w	r2, r3, #32
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	491f      	ldr	r1, [pc, #124]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80050c2:	4b1e      	ldr	r3, [pc, #120]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	491c      	ldr	r1, [pc, #112]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80050d0:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d4:	4a19      	ldr	r2, [pc, #100]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050d6:	f023 0310 	bic.w	r3, r3, #16
 80050da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80050dc:	4b17      	ldr	r3, [pc, #92]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6a12      	ldr	r2, [r2, #32]
 80050ec:	00d2      	lsls	r2, r2, #3
 80050ee:	4913      	ldr	r1, [pc, #76]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80050f4:	4b11      	ldr	r3, [pc, #68]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f8:	4a10      	ldr	r2, [pc, #64]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 80050fa:	f043 0310 	orr.w	r3, r3, #16
 80050fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005100:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a0d      	ldr	r2, [pc, #52]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 8005106:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800510a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800510c:	f7fc fa30 	bl	8001570 <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005112:	e008      	b.n	8005126 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005114:	f7fc fa2c 	bl	8001570 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e006      	b.n	8005134 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005126:	4b05      	ldr	r3, [pc, #20]	@ (800513c <RCCEx_PLL2_Config+0x12c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005132:	2300      	movs	r3, #0

}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	44020c00 	.word	0x44020c00

08005140 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0e7      	b.n	8005322 <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d105      	bne.n	800516c <HAL_SPI_Init+0x2c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b0f      	cmp	r3, #15
 8005166:	d901      	bls.n	800516c <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0da      	b.n	8005322 <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f8e3 	bl	8005338 <SPI_GetPacketSize>
 8005172:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d102      	bne.n	8005182 <HAL_SPI_Init+0x42>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b08      	cmp	r3, #8
 8005180:	d811      	bhi.n	80051a6 <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005186:	4a69      	ldr	r2, [pc, #420]	@ (800532c <HAL_SPI_Init+0x1ec>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a67      	ldr	r2, [pc, #412]	@ (8005330 <HAL_SPI_Init+0x1f0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_SPI_Init+0x60>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a66      	ldr	r2, [pc, #408]	@ (8005334 <HAL_SPI_Init+0x1f4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d104      	bne.n	80051aa <HAL_SPI_Init+0x6a>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d901      	bls.n	80051aa <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0bb      	b.n	8005322 <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fb fe7a 	bl	8000eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80051e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051f0:	d119      	bne.n	8005226 <HAL_SPI_Init+0xe6>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051fa:	d103      	bne.n	8005204 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10c      	bne.n	8005226 <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005210:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005214:	d107      	bne.n	8005226 <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005224:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00f      	beq.n	8005252 <HAL_SPI_Init+0x112>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2b06      	cmp	r3, #6
 8005238:	d90b      	bls.n	8005252 <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e007      	b.n	8005262 <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005260:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69da      	ldr	r2, [r3, #28]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	431a      	orrs	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005274:	ea42 0103 	orr.w	r1, r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ce:	ea42 0103 	orr.w	r1, r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40013000 	.word	0x40013000
 8005330:	40003800 	.word	0x40003800
 8005334:	40003c00 	.word	0x40003c00

08005338 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005344:	095b      	lsrs	r3, r3, #5
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	3307      	adds	r3, #7
 8005356:	08db      	lsrs	r3, r3, #3
 8005358:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e049      	b.n	8005414 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f841 	bl	800541c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f000 fb75 	bl	8005a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d001      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e03b      	b.n	80054c0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a19      	ldr	r2, [pc, #100]	@ (80054cc <HAL_TIM_Base_Start_IT+0x9c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_TIM_Base_Start_IT+0x4e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005472:	d004      	beq.n	800547e <HAL_TIM_Base_Start_IT+0x4e>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a15      	ldr	r2, [pc, #84]	@ (80054d0 <HAL_TIM_Base_Start_IT+0xa0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d115      	bne.n	80054aa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	4b13      	ldr	r3, [pc, #76]	@ (80054d4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005486:	4013      	ands	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b06      	cmp	r3, #6
 800548e:	d015      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x8c>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005496:	d011      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	e008      	b.n	80054bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e000      	b.n	80054be <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40000400 	.word	0x40000400
 80054d4:	00010007 	.word	0x00010007

080054d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e049      	b.n	800557e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fb fd56 	bl	8000fb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f000 fac0 	bl	8005a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d020      	beq.n	80055ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01b      	beq.n	80055ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f06f 0202 	mvn.w	r2, #2
 80055ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fa45 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 80055d6:	e005      	b.n	80055e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fa37 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa48 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d020      	beq.n	8005636 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01b      	beq.n	8005636 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f06f 0204 	mvn.w	r2, #4
 8005606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fa1f 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 8005622:	e005      	b.n	8005630 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fa11 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa22 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d020      	beq.n	8005682 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01b      	beq.n	8005682 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f06f 0208 	mvn.w	r2, #8
 8005652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2204      	movs	r2, #4
 8005658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f9f9 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 800566e:	e005      	b.n	800567c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f9eb 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9fc 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	d020      	beq.n	80056ce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01b      	beq.n	80056ce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f06f 0210 	mvn.w	r2, #16
 800569e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2208      	movs	r2, #8
 80056a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f9d3 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 80056ba:	e005      	b.n	80056c8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f9c5 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f9d6 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f06f 0201 	mvn.w	r2, #1
 80056ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fb fa13 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00c      	beq.n	8005720 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fce0 	bl	80060e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800573c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fcd8 	bl	80060f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00c      	beq.n	8005768 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f990 	bl	8005a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0220 	mvn.w	r2, #32
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fca0 	bl	80060cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00c      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d007      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fcac 	bl	8006108 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fca4 	bl	800611c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00c      	beq.n	80057f8 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fc9c 	bl	8006130 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00c      	beq.n	800581c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fc94 	bl	8006144 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800583e:	2302      	movs	r3, #2
 8005840:	e0ff      	b.n	8005a42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b14      	cmp	r3, #20
 800584e:	f200 80f0 	bhi.w	8005a32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005852:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	080058ad 	.word	0x080058ad
 800585c:	08005a33 	.word	0x08005a33
 8005860:	08005a33 	.word	0x08005a33
 8005864:	08005a33 	.word	0x08005a33
 8005868:	080058ed 	.word	0x080058ed
 800586c:	08005a33 	.word	0x08005a33
 8005870:	08005a33 	.word	0x08005a33
 8005874:	08005a33 	.word	0x08005a33
 8005878:	0800592f 	.word	0x0800592f
 800587c:	08005a33 	.word	0x08005a33
 8005880:	08005a33 	.word	0x08005a33
 8005884:	08005a33 	.word	0x08005a33
 8005888:	0800596f 	.word	0x0800596f
 800588c:	08005a33 	.word	0x08005a33
 8005890:	08005a33 	.word	0x08005a33
 8005894:	08005a33 	.word	0x08005a33
 8005898:	080059b1 	.word	0x080059b1
 800589c:	08005a33 	.word	0x08005a33
 80058a0:	08005a33 	.word	0x08005a33
 80058a4:	08005a33 	.word	0x08005a33
 80058a8:	080059f1 	.word	0x080059f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f958 	bl	8005b68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0208 	orr.w	r2, r2, #8
 80058c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0204 	bic.w	r2, r2, #4
 80058d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6999      	ldr	r1, [r3, #24]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	619a      	str	r2, [r3, #24]
      break;
 80058ea:	e0a5      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f9a0 	bl	8005c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6999      	ldr	r1, [r3, #24]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	021a      	lsls	r2, r3, #8
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	619a      	str	r2, [r3, #24]
      break;
 800592c:	e084      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f9ed 	bl	8005d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0208 	orr.w	r2, r2, #8
 8005948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0204 	bic.w	r2, r2, #4
 8005958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69d9      	ldr	r1, [r3, #28]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	61da      	str	r2, [r3, #28]
      break;
 800596c:	e064      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fa39 	bl	8005dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69d9      	ldr	r1, [r3, #28]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	021a      	lsls	r2, r3, #8
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	61da      	str	r2, [r3, #28]
      break;
 80059ae:	e043      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fa86 	bl	8005ec8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0208 	orr.w	r2, r2, #8
 80059ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0204 	bic.w	r2, r2, #4
 80059da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059ee:	e023      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fab2 	bl	8005f60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	021a      	lsls	r2, r3, #8
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a30:	e002      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
      break;
 8005a36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop

08005a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2c      	ldr	r2, [pc, #176]	@ (8005b60 <TIM_Base_SetConfig+0xc4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_Base_SetConfig+0x28>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aba:	d003      	beq.n	8005ac4 <TIM_Base_SetConfig+0x28>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a29      	ldr	r2, [pc, #164]	@ (8005b64 <TIM_Base_SetConfig+0xc8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d108      	bne.n	8005ad6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a21      	ldr	r2, [pc, #132]	@ (8005b60 <TIM_Base_SetConfig+0xc4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d007      	beq.n	8005aee <TIM_Base_SetConfig+0x52>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae4:	d003      	beq.n	8005aee <TIM_Base_SetConfig+0x52>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8005b64 <TIM_Base_SetConfig+0xc8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d108      	bne.n	8005b00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a0e      	ldr	r2, [pc, #56]	@ (8005b60 <TIM_Base_SetConfig+0xc4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d103      	bne.n	8005b34 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d105      	bne.n	8005b52 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f023 0201 	bic.w	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]
  }
}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40000400 	.word	0x40000400

08005b68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f023 0201 	bic.w	r2, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f023 0302 	bic.w	r3, r3, #2
 8005bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c34 <TIM_OC1_SetConfig+0xcc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d10c      	bne.n	8005be2 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0308 	bic.w	r3, r3, #8
 8005bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 0304 	bic.w	r3, r3, #4
 8005be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a13      	ldr	r2, [pc, #76]	@ (8005c34 <TIM_OC1_SetConfig+0xcc>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d111      	bne.n	8005c0e <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	621a      	str	r2, [r3, #32]
}
 8005c28:	bf00      	nop
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40012c00 	.word	0x40012c00

08005c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f023 0210 	bic.w	r2, r3, #16
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 0320 	bic.w	r3, r3, #32
 8005c86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a1e      	ldr	r2, [pc, #120]	@ (8005d10 <TIM_OC2_SetConfig+0xd8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d10d      	bne.n	8005cb8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a15      	ldr	r2, [pc, #84]	@ (8005d10 <TIM_OC2_SetConfig+0xd8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d113      	bne.n	8005ce8 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40012c00 	.word	0x40012c00

08005d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1d      	ldr	r2, [pc, #116]	@ (8005de8 <TIM_OC3_SetConfig+0xd4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10d      	bne.n	8005d92 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a14      	ldr	r2, [pc, #80]	@ (8005de8 <TIM_OC3_SetConfig+0xd4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d113      	bne.n	8005dc2 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	40012c00 	.word	0x40012c00

08005dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	031b      	lsls	r3, r3, #12
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ec4 <TIM_OC4_SetConfig+0xd8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10d      	bne.n	8005e6c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	031b      	lsls	r3, r3, #12
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a15      	ldr	r2, [pc, #84]	@ (8005ec4 <TIM_OC4_SetConfig+0xd8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d113      	bne.n	8005e9c <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	019b      	lsls	r3, r3, #6
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	019b      	lsls	r3, r3, #6
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40012c00 	.word	0x40012c00

08005ec8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	041b      	lsls	r3, r3, #16
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8005f5c <TIM_OC5_SetConfig+0x94>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d109      	bne.n	8005f36 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	621a      	str	r2, [r3, #32]
}
 8005f50:	bf00      	nop
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40012c00 	.word	0x40012c00

08005f60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	021b      	lsls	r3, r3, #8
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	051b      	lsls	r3, r3, #20
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a10      	ldr	r2, [pc, #64]	@ (8005ff8 <TIM_OC6_SetConfig+0x98>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d109      	bne.n	8005fd0 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	029b      	lsls	r3, r3, #10
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40012c00 	.word	0x40012c00

08005ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006010:	2302      	movs	r3, #2
 8006012:	e051      	b.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a22      	ldr	r2, [pc, #136]	@ (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d108      	bne.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006044:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a14      	ldr	r2, [pc, #80]	@ (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006080:	d004      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a10      	ldr	r2, [pc, #64]	@ (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d10c      	bne.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	4313      	orrs	r3, r2
 800609c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40000400 	.word	0x40000400

080060cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e03c      	b.n	80061e4 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fa ffb0 	bl	80010e4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f85b 	bl	8006258 <USART_SetConfig>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e01b      	b.n	80061e4 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80061ba:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061ca:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0201 	orr.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fbaf 	bl	8006940 <USART_CheckIdleState>
 80061e2:	4603      	mov	r3, r0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80061fc:	e018      	b.n	8006230 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d014      	beq.n	8006230 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006206:	f7fb f9b3 	bl	8001570 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <USART_WaitOnFlagUntilTimeout+0x30>
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d109      	bne.n	8006230 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e00f      	b.n	8006250 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4013      	ands	r3, r2
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	429a      	cmp	r2, r3
 800623e:	bf0c      	ite	eq
 8006240:	2301      	moveq	r3, #1
 8006242:	2300      	movne	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	429a      	cmp	r2, r3
 800624c:	d0d7      	beq.n	80061fe <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	@ 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8006266:	2300      	movs	r3, #0
 8006268:	623b      	str	r3, [r7, #32]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800627e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4ba5      	ldr	r3, [pc, #660]	@ (800651c <USART_SetConfig+0x2c4>)
 8006288:	4013      	ands	r3, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	69f9      	ldr	r1, [r7, #28]
 8006290:	430b      	orrs	r3, r1
 8006292:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8006294:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006298:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	61fb      	str	r3, [r7, #28]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062c8:	f023 0309 	bic.w	r3, r3, #9
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	69f9      	ldr	r1, [r7, #28]
 80062d2:	430b      	orrs	r3, r1
 80062d4:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062dc:	f023 010f 	bic.w	r1, r3, #15
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a8b      	ldr	r2, [pc, #556]	@ (8006520 <USART_SetConfig+0x2c8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d12e      	bne.n	8006354 <USART_SetConfig+0xfc>
 80062f6:	4b8b      	ldr	r3, [pc, #556]	@ (8006524 <USART_SetConfig+0x2cc>)
 80062f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	2b05      	cmp	r3, #5
 8006302:	d823      	bhi.n	800634c <USART_SetConfig+0xf4>
 8006304:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <USART_SetConfig+0xb4>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006325 	.word	0x08006325
 8006310:	08006345 	.word	0x08006345
 8006314:	0800634d 	.word	0x0800634d
 8006318:	08006335 	.word	0x08006335
 800631c:	0800632d 	.word	0x0800632d
 8006320:	0800633d 	.word	0x0800633d
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800632a:	e080      	b.n	800642e <USART_SetConfig+0x1d6>
 800632c:	2304      	movs	r3, #4
 800632e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006332:	e07c      	b.n	800642e <USART_SetConfig+0x1d6>
 8006334:	2302      	movs	r3, #2
 8006336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800633a:	e078      	b.n	800642e <USART_SetConfig+0x1d6>
 800633c:	2308      	movs	r3, #8
 800633e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006342:	e074      	b.n	800642e <USART_SetConfig+0x1d6>
 8006344:	2310      	movs	r3, #16
 8006346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800634a:	e070      	b.n	800642e <USART_SetConfig+0x1d6>
 800634c:	2340      	movs	r3, #64	@ 0x40
 800634e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006352:	e06c      	b.n	800642e <USART_SetConfig+0x1d6>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a73      	ldr	r2, [pc, #460]	@ (8006528 <USART_SetConfig+0x2d0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d12d      	bne.n	80063ba <USART_SetConfig+0x162>
 800635e:	4b71      	ldr	r3, [pc, #452]	@ (8006524 <USART_SetConfig+0x2cc>)
 8006360:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006364:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006368:	2b28      	cmp	r3, #40	@ 0x28
 800636a:	d01a      	beq.n	80063a2 <USART_SetConfig+0x14a>
 800636c:	2b28      	cmp	r3, #40	@ 0x28
 800636e:	d820      	bhi.n	80063b2 <USART_SetConfig+0x15a>
 8006370:	2b20      	cmp	r3, #32
 8006372:	d00e      	beq.n	8006392 <USART_SetConfig+0x13a>
 8006374:	2b20      	cmp	r3, #32
 8006376:	d81c      	bhi.n	80063b2 <USART_SetConfig+0x15a>
 8006378:	2b18      	cmp	r3, #24
 800637a:	d00e      	beq.n	800639a <USART_SetConfig+0x142>
 800637c:	2b18      	cmp	r3, #24
 800637e:	d818      	bhi.n	80063b2 <USART_SetConfig+0x15a>
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <USART_SetConfig+0x132>
 8006384:	2b08      	cmp	r3, #8
 8006386:	d010      	beq.n	80063aa <USART_SetConfig+0x152>
 8006388:	e013      	b.n	80063b2 <USART_SetConfig+0x15a>
 800638a:	2300      	movs	r3, #0
 800638c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006390:	e04d      	b.n	800642e <USART_SetConfig+0x1d6>
 8006392:	2304      	movs	r3, #4
 8006394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006398:	e049      	b.n	800642e <USART_SetConfig+0x1d6>
 800639a:	2302      	movs	r3, #2
 800639c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063a0:	e045      	b.n	800642e <USART_SetConfig+0x1d6>
 80063a2:	2308      	movs	r3, #8
 80063a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063a8:	e041      	b.n	800642e <USART_SetConfig+0x1d6>
 80063aa:	2310      	movs	r3, #16
 80063ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063b0:	e03d      	b.n	800642e <USART_SetConfig+0x1d6>
 80063b2:	2340      	movs	r3, #64	@ 0x40
 80063b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063b8:	e039      	b.n	800642e <USART_SetConfig+0x1d6>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a5b      	ldr	r2, [pc, #364]	@ (800652c <USART_SetConfig+0x2d4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d131      	bne.n	8006428 <USART_SetConfig+0x1d0>
 80063c4:	4b57      	ldr	r3, [pc, #348]	@ (8006524 <USART_SetConfig+0x2cc>)
 80063c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063ca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80063ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063d2:	d01d      	beq.n	8006410 <USART_SetConfig+0x1b8>
 80063d4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063d8:	d822      	bhi.n	8006420 <USART_SetConfig+0x1c8>
 80063da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063de:	d00f      	beq.n	8006400 <USART_SetConfig+0x1a8>
 80063e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e4:	d81c      	bhi.n	8006420 <USART_SetConfig+0x1c8>
 80063e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80063e8:	d00e      	beq.n	8006408 <USART_SetConfig+0x1b0>
 80063ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80063ec:	d818      	bhi.n	8006420 <USART_SetConfig+0x1c8>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <USART_SetConfig+0x1a0>
 80063f2:	2b40      	cmp	r3, #64	@ 0x40
 80063f4:	d010      	beq.n	8006418 <USART_SetConfig+0x1c0>
 80063f6:	e013      	b.n	8006420 <USART_SetConfig+0x1c8>
 80063f8:	2300      	movs	r3, #0
 80063fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063fe:	e016      	b.n	800642e <USART_SetConfig+0x1d6>
 8006400:	2304      	movs	r3, #4
 8006402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006406:	e012      	b.n	800642e <USART_SetConfig+0x1d6>
 8006408:	2302      	movs	r3, #2
 800640a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800640e:	e00e      	b.n	800642e <USART_SetConfig+0x1d6>
 8006410:	2308      	movs	r3, #8
 8006412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006416:	e00a      	b.n	800642e <USART_SetConfig+0x1d6>
 8006418:	2310      	movs	r3, #16
 800641a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800641e:	e006      	b.n	800642e <USART_SetConfig+0x1d6>
 8006420:	2340      	movs	r3, #64	@ 0x40
 8006422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006426:	e002      	b.n	800642e <USART_SetConfig+0x1d6>
 8006428:	2340      	movs	r3, #64	@ 0x40
 800642a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  switch (clocksource)
 800642e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006432:	2b10      	cmp	r3, #16
 8006434:	f200 824c 	bhi.w	80068d0 <USART_SetConfig+0x678>
 8006438:	a201      	add	r2, pc, #4	@ (adr r2, 8006440 <USART_SetConfig+0x1e8>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006485 	.word	0x08006485
 8006444:	0800654f 	.word	0x0800654f
 8006448:	080066bf 	.word	0x080066bf
 800644c:	080068d1 	.word	0x080068d1
 8006450:	0800676f 	.word	0x0800676f
 8006454:	080068d1 	.word	0x080068d1
 8006458:	080068d1 	.word	0x080068d1
 800645c:	080068d1 	.word	0x080068d1
 8006460:	0800681f 	.word	0x0800681f
 8006464:	080068d1 	.word	0x080068d1
 8006468:	080068d1 	.word	0x080068d1
 800646c:	080068d1 	.word	0x080068d1
 8006470:	080068d1 	.word	0x080068d1
 8006474:	080068d1 	.word	0x080068d1
 8006478:	080068d1 	.word	0x080068d1
 800647c:	080068d1 	.word	0x080068d1
 8006480:	08006605 	.word	0x08006605
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8006484:	f7fd fdd2 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8006488:	61b8      	str	r0, [r7, #24]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d04e      	beq.n	8006530 <USART_SetConfig+0x2d8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006496:	2b01      	cmp	r3, #1
 8006498:	d03e      	beq.n	8006518 <USART_SetConfig+0x2c0>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d038      	beq.n	8006514 <USART_SetConfig+0x2bc>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d032      	beq.n	8006510 <USART_SetConfig+0x2b8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d02c      	beq.n	800650c <USART_SetConfig+0x2b4>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b6:	2b05      	cmp	r3, #5
 80064b8:	d026      	beq.n	8006508 <USART_SetConfig+0x2b0>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064be:	2b06      	cmp	r3, #6
 80064c0:	d020      	beq.n	8006504 <USART_SetConfig+0x2ac>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	2b07      	cmp	r3, #7
 80064c8:	d01a      	beq.n	8006500 <USART_SetConfig+0x2a8>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d014      	beq.n	80064fc <USART_SetConfig+0x2a4>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d6:	2b09      	cmp	r3, #9
 80064d8:	d00e      	beq.n	80064f8 <USART_SetConfig+0x2a0>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	2b0a      	cmp	r3, #10
 80064e0:	d008      	beq.n	80064f4 <USART_SetConfig+0x29c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	2b0b      	cmp	r3, #11
 80064e8:	d102      	bne.n	80064f0 <USART_SetConfig+0x298>
 80064ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80064ee:	e020      	b.n	8006532 <USART_SetConfig+0x2da>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e01e      	b.n	8006532 <USART_SetConfig+0x2da>
 80064f4:	2380      	movs	r3, #128	@ 0x80
 80064f6:	e01c      	b.n	8006532 <USART_SetConfig+0x2da>
 80064f8:	2340      	movs	r3, #64	@ 0x40
 80064fa:	e01a      	b.n	8006532 <USART_SetConfig+0x2da>
 80064fc:	2320      	movs	r3, #32
 80064fe:	e018      	b.n	8006532 <USART_SetConfig+0x2da>
 8006500:	2310      	movs	r3, #16
 8006502:	e016      	b.n	8006532 <USART_SetConfig+0x2da>
 8006504:	230c      	movs	r3, #12
 8006506:	e014      	b.n	8006532 <USART_SetConfig+0x2da>
 8006508:	230a      	movs	r3, #10
 800650a:	e012      	b.n	8006532 <USART_SetConfig+0x2da>
 800650c:	2308      	movs	r3, #8
 800650e:	e010      	b.n	8006532 <USART_SetConfig+0x2da>
 8006510:	2306      	movs	r3, #6
 8006512:	e00e      	b.n	8006532 <USART_SetConfig+0x2da>
 8006514:	2304      	movs	r3, #4
 8006516:	e00c      	b.n	8006532 <USART_SetConfig+0x2da>
 8006518:	2302      	movs	r3, #2
 800651a:	e00a      	b.n	8006532 <USART_SetConfig+0x2da>
 800651c:	cfff69f3 	.word	0xcfff69f3
 8006520:	40013800 	.word	0x40013800
 8006524:	44020c00 	.word	0x44020c00
 8006528:	40004400 	.word	0x40004400
 800652c:	40004800 	.word	0x40004800
 8006530:	2301      	movs	r3, #1
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	fbb2 f3f3 	udiv	r3, r2, r3
 8006538:	005a      	lsls	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	085b      	lsrs	r3, r3, #1
 8006540:	441a      	add	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	fbb2 f3f3 	udiv	r3, r2, r3
 800654a:	623b      	str	r3, [r7, #32]
      break;
 800654c:	e1c4      	b.n	80068d8 <USART_SetConfig+0x680>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800654e:	f7fd fd83 	bl	8004058 <HAL_RCC_GetPCLK2Freq>
 8006552:	61b8      	str	r0, [r7, #24]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	2b00      	cmp	r3, #0
 800655a:	d044      	beq.n	80065e6 <USART_SetConfig+0x38e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006560:	2b01      	cmp	r3, #1
 8006562:	d03e      	beq.n	80065e2 <USART_SetConfig+0x38a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	2b02      	cmp	r3, #2
 800656a:	d038      	beq.n	80065de <USART_SetConfig+0x386>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006570:	2b03      	cmp	r3, #3
 8006572:	d032      	beq.n	80065da <USART_SetConfig+0x382>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	2b04      	cmp	r3, #4
 800657a:	d02c      	beq.n	80065d6 <USART_SetConfig+0x37e>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	2b05      	cmp	r3, #5
 8006582:	d026      	beq.n	80065d2 <USART_SetConfig+0x37a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006588:	2b06      	cmp	r3, #6
 800658a:	d020      	beq.n	80065ce <USART_SetConfig+0x376>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006590:	2b07      	cmp	r3, #7
 8006592:	d01a      	beq.n	80065ca <USART_SetConfig+0x372>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006598:	2b08      	cmp	r3, #8
 800659a:	d014      	beq.n	80065c6 <USART_SetConfig+0x36e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a0:	2b09      	cmp	r3, #9
 80065a2:	d00e      	beq.n	80065c2 <USART_SetConfig+0x36a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a8:	2b0a      	cmp	r3, #10
 80065aa:	d008      	beq.n	80065be <USART_SetConfig+0x366>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b0:	2b0b      	cmp	r3, #11
 80065b2:	d102      	bne.n	80065ba <USART_SetConfig+0x362>
 80065b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065b8:	e016      	b.n	80065e8 <USART_SetConfig+0x390>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e014      	b.n	80065e8 <USART_SetConfig+0x390>
 80065be:	2380      	movs	r3, #128	@ 0x80
 80065c0:	e012      	b.n	80065e8 <USART_SetConfig+0x390>
 80065c2:	2340      	movs	r3, #64	@ 0x40
 80065c4:	e010      	b.n	80065e8 <USART_SetConfig+0x390>
 80065c6:	2320      	movs	r3, #32
 80065c8:	e00e      	b.n	80065e8 <USART_SetConfig+0x390>
 80065ca:	2310      	movs	r3, #16
 80065cc:	e00c      	b.n	80065e8 <USART_SetConfig+0x390>
 80065ce:	230c      	movs	r3, #12
 80065d0:	e00a      	b.n	80065e8 <USART_SetConfig+0x390>
 80065d2:	230a      	movs	r3, #10
 80065d4:	e008      	b.n	80065e8 <USART_SetConfig+0x390>
 80065d6:	2308      	movs	r3, #8
 80065d8:	e006      	b.n	80065e8 <USART_SetConfig+0x390>
 80065da:	2306      	movs	r3, #6
 80065dc:	e004      	b.n	80065e8 <USART_SetConfig+0x390>
 80065de:	2304      	movs	r3, #4
 80065e0:	e002      	b.n	80065e8 <USART_SetConfig+0x390>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e000      	b.n	80065e8 <USART_SetConfig+0x390>
 80065e6:	2301      	movs	r3, #1
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ee:	005a      	lsls	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	441a      	add	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006600:	623b      	str	r3, [r7, #32]
      break;
 8006602:	e169      	b.n	80068d8 <USART_SetConfig+0x680>
    case USART_CLOCKSOURCE_PLL2Q:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006604:	f107 0308 	add.w	r3, r7, #8
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe fb97 	bl	8004d3c <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	d044      	beq.n	80066a2 <USART_SetConfig+0x44a>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661c:	2b01      	cmp	r3, #1
 800661e:	d03e      	beq.n	800669e <USART_SetConfig+0x446>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	2b02      	cmp	r3, #2
 8006626:	d038      	beq.n	800669a <USART_SetConfig+0x442>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662c:	2b03      	cmp	r3, #3
 800662e:	d032      	beq.n	8006696 <USART_SetConfig+0x43e>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	2b04      	cmp	r3, #4
 8006636:	d02c      	beq.n	8006692 <USART_SetConfig+0x43a>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663c:	2b05      	cmp	r3, #5
 800663e:	d026      	beq.n	800668e <USART_SetConfig+0x436>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006644:	2b06      	cmp	r3, #6
 8006646:	d020      	beq.n	800668a <USART_SetConfig+0x432>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664c:	2b07      	cmp	r3, #7
 800664e:	d01a      	beq.n	8006686 <USART_SetConfig+0x42e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	2b08      	cmp	r3, #8
 8006656:	d014      	beq.n	8006682 <USART_SetConfig+0x42a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665c:	2b09      	cmp	r3, #9
 800665e:	d00e      	beq.n	800667e <USART_SetConfig+0x426>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	2b0a      	cmp	r3, #10
 8006666:	d008      	beq.n	800667a <USART_SetConfig+0x422>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666c:	2b0b      	cmp	r3, #11
 800666e:	d102      	bne.n	8006676 <USART_SetConfig+0x41e>
 8006670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006674:	e016      	b.n	80066a4 <USART_SetConfig+0x44c>
 8006676:	2301      	movs	r3, #1
 8006678:	e014      	b.n	80066a4 <USART_SetConfig+0x44c>
 800667a:	2380      	movs	r3, #128	@ 0x80
 800667c:	e012      	b.n	80066a4 <USART_SetConfig+0x44c>
 800667e:	2340      	movs	r3, #64	@ 0x40
 8006680:	e010      	b.n	80066a4 <USART_SetConfig+0x44c>
 8006682:	2320      	movs	r3, #32
 8006684:	e00e      	b.n	80066a4 <USART_SetConfig+0x44c>
 8006686:	2310      	movs	r3, #16
 8006688:	e00c      	b.n	80066a4 <USART_SetConfig+0x44c>
 800668a:	230c      	movs	r3, #12
 800668c:	e00a      	b.n	80066a4 <USART_SetConfig+0x44c>
 800668e:	230a      	movs	r3, #10
 8006690:	e008      	b.n	80066a4 <USART_SetConfig+0x44c>
 8006692:	2308      	movs	r3, #8
 8006694:	e006      	b.n	80066a4 <USART_SetConfig+0x44c>
 8006696:	2306      	movs	r3, #6
 8006698:	e004      	b.n	80066a4 <USART_SetConfig+0x44c>
 800669a:	2304      	movs	r3, #4
 800669c:	e002      	b.n	80066a4 <USART_SetConfig+0x44c>
 800669e:	2302      	movs	r3, #2
 80066a0:	e000      	b.n	80066a4 <USART_SetConfig+0x44c>
 80066a2:	2301      	movs	r3, #1
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	005a      	lsls	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	441a      	add	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	623b      	str	r3, [r7, #32]
                                                husart->Init.ClockPrescaler));
      break;
 80066bc:	e10c      	b.n	80068d8 <USART_SetConfig+0x680>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
                                                husart->Init.ClockPrescaler));
      break;
#endif /* RCC_CR_PLL3ON */
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d044      	beq.n	8006750 <USART_SetConfig+0x4f8>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d03e      	beq.n	800674c <USART_SetConfig+0x4f4>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d038      	beq.n	8006748 <USART_SetConfig+0x4f0>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d032      	beq.n	8006744 <USART_SetConfig+0x4ec>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d02c      	beq.n	8006740 <USART_SetConfig+0x4e8>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ea:	2b05      	cmp	r3, #5
 80066ec:	d026      	beq.n	800673c <USART_SetConfig+0x4e4>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f2:	2b06      	cmp	r3, #6
 80066f4:	d020      	beq.n	8006738 <USART_SetConfig+0x4e0>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fa:	2b07      	cmp	r3, #7
 80066fc:	d01a      	beq.n	8006734 <USART_SetConfig+0x4dc>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006702:	2b08      	cmp	r3, #8
 8006704:	d014      	beq.n	8006730 <USART_SetConfig+0x4d8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670a:	2b09      	cmp	r3, #9
 800670c:	d00e      	beq.n	800672c <USART_SetConfig+0x4d4>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	2b0a      	cmp	r3, #10
 8006714:	d008      	beq.n	8006728 <USART_SetConfig+0x4d0>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671a:	2b0b      	cmp	r3, #11
 800671c:	d102      	bne.n	8006724 <USART_SetConfig+0x4cc>
 800671e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006722:	e016      	b.n	8006752 <USART_SetConfig+0x4fa>
 8006724:	2301      	movs	r3, #1
 8006726:	e014      	b.n	8006752 <USART_SetConfig+0x4fa>
 8006728:	2380      	movs	r3, #128	@ 0x80
 800672a:	e012      	b.n	8006752 <USART_SetConfig+0x4fa>
 800672c:	2340      	movs	r3, #64	@ 0x40
 800672e:	e010      	b.n	8006752 <USART_SetConfig+0x4fa>
 8006730:	2320      	movs	r3, #32
 8006732:	e00e      	b.n	8006752 <USART_SetConfig+0x4fa>
 8006734:	2310      	movs	r3, #16
 8006736:	e00c      	b.n	8006752 <USART_SetConfig+0x4fa>
 8006738:	230c      	movs	r3, #12
 800673a:	e00a      	b.n	8006752 <USART_SetConfig+0x4fa>
 800673c:	230a      	movs	r3, #10
 800673e:	e008      	b.n	8006752 <USART_SetConfig+0x4fa>
 8006740:	2308      	movs	r3, #8
 8006742:	e006      	b.n	8006752 <USART_SetConfig+0x4fa>
 8006744:	2306      	movs	r3, #6
 8006746:	e004      	b.n	8006752 <USART_SetConfig+0x4fa>
 8006748:	2304      	movs	r3, #4
 800674a:	e002      	b.n	8006752 <USART_SetConfig+0x4fa>
 800674c:	2302      	movs	r3, #2
 800674e:	e000      	b.n	8006752 <USART_SetConfig+0x4fa>
 8006750:	2301      	movs	r3, #1
 8006752:	4a79      	ldr	r2, [pc, #484]	@ (8006938 <USART_SetConfig+0x6e0>)
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	005a      	lsls	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	441a      	add	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	fbb2 f3f3 	udiv	r3, r2, r3
 800676a:	623b      	str	r3, [r7, #32]
      break;
 800676c:	e0b4      	b.n	80068d8 <USART_SetConfig+0x680>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d044      	beq.n	8006800 <USART_SetConfig+0x5a8>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	2b01      	cmp	r3, #1
 800677c:	d03e      	beq.n	80067fc <USART_SetConfig+0x5a4>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	2b02      	cmp	r3, #2
 8006784:	d038      	beq.n	80067f8 <USART_SetConfig+0x5a0>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	2b03      	cmp	r3, #3
 800678c:	d032      	beq.n	80067f4 <USART_SetConfig+0x59c>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006792:	2b04      	cmp	r3, #4
 8006794:	d02c      	beq.n	80067f0 <USART_SetConfig+0x598>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	2b05      	cmp	r3, #5
 800679c:	d026      	beq.n	80067ec <USART_SetConfig+0x594>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a2:	2b06      	cmp	r3, #6
 80067a4:	d020      	beq.n	80067e8 <USART_SetConfig+0x590>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067aa:	2b07      	cmp	r3, #7
 80067ac:	d01a      	beq.n	80067e4 <USART_SetConfig+0x58c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d014      	beq.n	80067e0 <USART_SetConfig+0x588>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	2b09      	cmp	r3, #9
 80067bc:	d00e      	beq.n	80067dc <USART_SetConfig+0x584>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c2:	2b0a      	cmp	r3, #10
 80067c4:	d008      	beq.n	80067d8 <USART_SetConfig+0x580>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ca:	2b0b      	cmp	r3, #11
 80067cc:	d102      	bne.n	80067d4 <USART_SetConfig+0x57c>
 80067ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067d2:	e016      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e014      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067d8:	2380      	movs	r3, #128	@ 0x80
 80067da:	e012      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067dc:	2340      	movs	r3, #64	@ 0x40
 80067de:	e010      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067e0:	2320      	movs	r3, #32
 80067e2:	e00e      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067e4:	2310      	movs	r3, #16
 80067e6:	e00c      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067e8:	230c      	movs	r3, #12
 80067ea:	e00a      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067ec:	230a      	movs	r3, #10
 80067ee:	e008      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067f0:	2308      	movs	r3, #8
 80067f2:	e006      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067f4:	2306      	movs	r3, #6
 80067f6:	e004      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067f8:	2304      	movs	r3, #4
 80067fa:	e002      	b.n	8006802 <USART_SetConfig+0x5aa>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e000      	b.n	8006802 <USART_SetConfig+0x5aa>
 8006800:	2301      	movs	r3, #1
 8006802:	4a4e      	ldr	r2, [pc, #312]	@ (800693c <USART_SetConfig+0x6e4>)
 8006804:	fbb2 f3f3 	udiv	r3, r2, r3
 8006808:	005a      	lsls	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	441a      	add	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	fbb2 f3f3 	udiv	r3, r2, r3
 800681a:	623b      	str	r3, [r7, #32]
      break;
 800681c:	e05c      	b.n	80068d8 <USART_SetConfig+0x680>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	2b00      	cmp	r3, #0
 8006824:	d044      	beq.n	80068b0 <USART_SetConfig+0x658>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682a:	2b01      	cmp	r3, #1
 800682c:	d03e      	beq.n	80068ac <USART_SetConfig+0x654>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	2b02      	cmp	r3, #2
 8006834:	d038      	beq.n	80068a8 <USART_SetConfig+0x650>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	2b03      	cmp	r3, #3
 800683c:	d032      	beq.n	80068a4 <USART_SetConfig+0x64c>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	2b04      	cmp	r3, #4
 8006844:	d02c      	beq.n	80068a0 <USART_SetConfig+0x648>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	2b05      	cmp	r3, #5
 800684c:	d026      	beq.n	800689c <USART_SetConfig+0x644>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006852:	2b06      	cmp	r3, #6
 8006854:	d020      	beq.n	8006898 <USART_SetConfig+0x640>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	2b07      	cmp	r3, #7
 800685c:	d01a      	beq.n	8006894 <USART_SetConfig+0x63c>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	2b08      	cmp	r3, #8
 8006864:	d014      	beq.n	8006890 <USART_SetConfig+0x638>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	2b09      	cmp	r3, #9
 800686c:	d00e      	beq.n	800688c <USART_SetConfig+0x634>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	2b0a      	cmp	r3, #10
 8006874:	d008      	beq.n	8006888 <USART_SetConfig+0x630>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	2b0b      	cmp	r3, #11
 800687c:	d102      	bne.n	8006884 <USART_SetConfig+0x62c>
 800687e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006882:	e016      	b.n	80068b2 <USART_SetConfig+0x65a>
 8006884:	2301      	movs	r3, #1
 8006886:	e014      	b.n	80068b2 <USART_SetConfig+0x65a>
 8006888:	2380      	movs	r3, #128	@ 0x80
 800688a:	e012      	b.n	80068b2 <USART_SetConfig+0x65a>
 800688c:	2340      	movs	r3, #64	@ 0x40
 800688e:	e010      	b.n	80068b2 <USART_SetConfig+0x65a>
 8006890:	2320      	movs	r3, #32
 8006892:	e00e      	b.n	80068b2 <USART_SetConfig+0x65a>
 8006894:	2310      	movs	r3, #16
 8006896:	e00c      	b.n	80068b2 <USART_SetConfig+0x65a>
 8006898:	230c      	movs	r3, #12
 800689a:	e00a      	b.n	80068b2 <USART_SetConfig+0x65a>
 800689c:	230a      	movs	r3, #10
 800689e:	e008      	b.n	80068b2 <USART_SetConfig+0x65a>
 80068a0:	2308      	movs	r3, #8
 80068a2:	e006      	b.n	80068b2 <USART_SetConfig+0x65a>
 80068a4:	2306      	movs	r3, #6
 80068a6:	e004      	b.n	80068b2 <USART_SetConfig+0x65a>
 80068a8:	2304      	movs	r3, #4
 80068aa:	e002      	b.n	80068b2 <USART_SetConfig+0x65a>
 80068ac:	2302      	movs	r3, #2
 80068ae:	e000      	b.n	80068b2 <USART_SetConfig+0x65a>
 80068b0:	2301      	movs	r3, #1
 80068b2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80068b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ba:	005a      	lsls	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	441a      	add	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	623b      	str	r3, [r7, #32]
      break;
 80068ce:	e003      	b.n	80068d8 <USART_SetConfig+0x680>
    default:
      ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      break;
 80068d6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d916      	bls.n	800690c <USART_SetConfig+0x6b4>
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e4:	d212      	bcs.n	800690c <USART_SetConfig+0x6b4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f023 030f 	bic.w	r3, r3, #15
 80068ee:	82fb      	strh	r3, [r7, #22]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	8afb      	ldrh	r3, [r7, #22]
 80068fe:	4313      	orrs	r3, r2
 8006900:	82fb      	strh	r3, [r7, #22]
    husart->Instance->BRR = brrtemp;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	8afa      	ldrh	r2, [r7, #22]
 8006908:	60da      	str	r2, [r3, #12]
 800690a:	e002      	b.n	8006912 <USART_SetConfig+0x6ba>
  }
  else
  {
    ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800692a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 800692e:	4618      	mov	r0, r3
 8006930:	3728      	adds	r7, #40	@ 0x28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	03d09000 	.word	0x03d09000
 800693c:	003d0900 	.word	0x003d0900

08006940 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af02      	add	r7, sp, #8
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800694e:	f7fa fe0f 	bl	8001570 <HAL_GetTick>
 8006952:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b08      	cmp	r3, #8
 8006960:	d10e      	bne.n	8006980 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff fc3b 	bl	80061ec <USART_WaitOnFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e01e      	b.n	80069be <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b04      	cmp	r3, #4
 800698c:	d10e      	bne.n	80069ac <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800698e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff fc25 	bl	80061ec <USART_WaitOnFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e008      	b.n	80069be <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_USARTEx_DisableFifoMode+0x16>
 80069d8:	2302      	movs	r3, #2
 80069da:	e027      	b.n	8006a2c <HAL_USARTEx_DisableFifoMode+0x66>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a0a:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e02d      	b.n	8006aac <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f84f 	bl	8006b30 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e02d      	b.n	8006b28 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0201 	bic.w	r2, r2, #1
 8006af2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f811 	bl	8006b30 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b4c:	e02f      	b.n	8006bae <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b4e:	2308      	movs	r3, #8
 8006b50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b52:	2308      	movs	r3, #8
 8006b54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8006b5c:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8006b6c:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f003 0307 	and.w	r3, r3, #7
 8006b74:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	7b3a      	ldrb	r2, [r7, #12]
 8006b7a:	4910      	ldr	r1, [pc, #64]	@ (8006bbc <USARTEx_SetNbDataToProcess+0x8c>)
 8006b7c:	5c8a      	ldrb	r2, [r1, r2]
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8006b82:	7b3a      	ldrb	r2, [r7, #12]
 8006b84:	490e      	ldr	r1, [pc, #56]	@ (8006bc0 <USARTEx_SetNbDataToProcess+0x90>)
 8006b86:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b88:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	7b7a      	ldrb	r2, [r7, #13]
 8006b96:	4909      	ldr	r1, [pc, #36]	@ (8006bbc <USARTEx_SetNbDataToProcess+0x8c>)
 8006b98:	5c8a      	ldrb	r2, [r1, r2]
 8006b9a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8006b9e:	7b7a      	ldrb	r2, [r7, #13]
 8006ba0:	4907      	ldr	r1, [pc, #28]	@ (8006bc0 <USARTEx_SetNbDataToProcess+0x90>)
 8006ba2:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	08006d04 	.word	0x08006d04
 8006bc0:	08006d0c 	.word	0x08006d0c

08006bc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bcc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006bd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	401a      	ands	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d106      	bne.n	8006c0e <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8006c0c:	e00b      	b.n	8006c26 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d106      	bne.n	8006c22 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006c20:	e001      	b.n	8006c26 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8006c34:	b084      	sub	sp, #16
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	f107 001c 	add.w	r0, r7, #28
 8006c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c50:	f023 0201 	bic.w	r2, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8006c58:	2100      	movs	r1, #0
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff ffc7 	bl	8006bee <USB_SetCurrentMode>
 8006c60:	4603      	mov	r3, r0
 8006c62:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c76:	b004      	add	sp, #16
 8006c78:	4770      	bx	lr

08006c7a <memset>:
 8006c7a:	4402      	add	r2, r0
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d100      	bne.n	8006c84 <memset+0xa>
 8006c82:	4770      	bx	lr
 8006c84:	f803 1b01 	strb.w	r1, [r3], #1
 8006c88:	e7f9      	b.n	8006c7e <memset+0x4>
	...

08006c8c <__libc_init_array>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006cc4 <__libc_init_array+0x38>)
 8006c90:	2600      	movs	r6, #0
 8006c92:	4c0d      	ldr	r4, [pc, #52]	@ (8006cc8 <__libc_init_array+0x3c>)
 8006c94:	1b64      	subs	r4, r4, r5
 8006c96:	10a4      	asrs	r4, r4, #2
 8006c98:	42a6      	cmp	r6, r4
 8006c9a:	d109      	bne.n	8006cb0 <__libc_init_array+0x24>
 8006c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006ccc <__libc_init_array+0x40>)
 8006c9e:	2600      	movs	r6, #0
 8006ca0:	4c0b      	ldr	r4, [pc, #44]	@ (8006cd0 <__libc_init_array+0x44>)
 8006ca2:	f000 f817 	bl	8006cd4 <_init>
 8006ca6:	1b64      	subs	r4, r4, r5
 8006ca8:	10a4      	asrs	r4, r4, #2
 8006caa:	42a6      	cmp	r6, r4
 8006cac:	d105      	bne.n	8006cba <__libc_init_array+0x2e>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb4:	3601      	adds	r6, #1
 8006cb6:	4798      	blx	r3
 8006cb8:	e7ee      	b.n	8006c98 <__libc_init_array+0xc>
 8006cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cbe:	3601      	adds	r6, #1
 8006cc0:	4798      	blx	r3
 8006cc2:	e7f2      	b.n	8006caa <__libc_init_array+0x1e>
 8006cc4:	08006d14 	.word	0x08006d14
 8006cc8:	08006d14 	.word	0x08006d14
 8006ccc:	08006d14 	.word	0x08006d14
 8006cd0:	08006d18 	.word	0x08006d18

08006cd4 <_init>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr

08006ce0 <_fini>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	bf00      	nop
 8006ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce6:	bc08      	pop	{r3}
 8006ce8:	469e      	mov	lr, r3
 8006cea:	4770      	bx	lr
