
Occu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a0  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080076f8  080076f8  000086f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007734  08007734  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  08007734  08007734  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007734  08007734  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007734  08007734  00008734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007738  08007738  00008738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800773c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  2000000c  08007748  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08007748  00009608  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f596  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e8  00000000  00000000  000285d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a9  00000000  00000000  0002da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f10  00000000  00000000  0002ef19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022219  00000000  00000000  00053e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea7b5  00000000  00000000  00076042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001607f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000742c  00000000  00000000  0016083c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00167c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	080076e0 	.word	0x080076e0

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	080076e0 	.word	0x080076e0

08000298 <IS31FL3236_Init>:

/*
 * Initialises the given handle.
 */
void IS31FL3236_Init(IS31FL3236_HandleTypeDef* handle)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	IS31FL3236_Reset(handle);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f000 f83b 	bl	800031c <IS31FL3236_Reset>
	IS31FL3236_SetSoftwareShutdown(handle, IS31FL3236_SOFTWARE_SHUTDOWN_DISABLED);
 80002a6:	2101      	movs	r1, #1
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f000 f92c 	bl	8000506 <IS31FL3236_SetSoftwareShutdown>
	IS31FL3236_SetChipEnable(handle, IS31FL3236_CHIP_ENABLED);
 80002ae:	2101      	movs	r1, #1
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 f804 	bl	80002be <IS31FL3236_SetChipEnable>
}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}

080002be <IS31FL3236_SetChipEnable>:

/*
 * Changes the chip enable state of the specified chip.
 */
void IS31FL3236_SetChipEnable(IS31FL3236_HandleTypeDef* handle, uint8_t enable_state)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b082      	sub	sp, #8
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
 80002c6:	460b      	mov	r3, r1
 80002c8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(handle->Init.Chip_Enable_Signal_Port, handle->Init.Chip_Enable_Signal_Pin, enable_state);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	68d8      	ldr	r0, [r3, #12]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	8a1b      	ldrh	r3, [r3, #16]
 80002d2:	78fa      	ldrb	r2, [r7, #3]
 80002d4:	4619      	mov	r1, r3
 80002d6:	f002 fef9 	bl	80030cc <HAL_GPIO_WritePin>
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <IS31FL3236_WriteRegister>:

/*
 * Writes a given value to a given register.
 */
void IS31FL3236_WriteRegister(IS31FL3236_HandleTypeDef* handle, uint8_t register_address, uint8_t value)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b086      	sub	sp, #24
 80002e6:	af02      	add	r7, sp, #8
 80002e8:	6078      	str	r0, [r7, #4]
 80002ea:	460b      	mov	r3, r1
 80002ec:	70fb      	strb	r3, [r7, #3]
 80002ee:	4613      	mov	r3, r2
 80002f0:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = register_address;
 80002f2:	78fb      	ldrb	r3, [r7, #3]
 80002f4:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80002f6:	78bb      	ldrb	r3, [r7, #2]
 80002f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(handle->Init.I2C_Bus, handle->Init.I2C_Device_Address, buf, 2, handle->Init.I2C_Transmit_Timeout_Milliseconds);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	6818      	ldr	r0, [r3, #0]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	791b      	ldrb	r3, [r3, #4]
 8000302:	4619      	mov	r1, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	f107 020c 	add.w	r2, r7, #12
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2302      	movs	r3, #2
 8000310:	f002 ff90 	bl	8003234 <HAL_I2C_Master_Transmit>
}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <IS31FL3236_Reset>:

/*
 * Resets the specified chip. (Through I2C)
 */
void IS31FL3236_Reset(IS31FL3236_HandleTypeDef* handle)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_RESET, 0x00);
 8000324:	2200      	movs	r2, #0
 8000326:	214f      	movs	r1, #79	@ 0x4f
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f7ff ffda 	bl	80002e2 <IS31FL3236_WriteRegister>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <IS31FL3236_Update>:

/*
 * Latches the written PWM and led control values in the chip to the led control circuit.
 */
void IS31FL3236_Update(IS31FL3236_HandleTypeDef* handle)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b082      	sub	sp, #8
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
	IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_UPDATE, 0x00);
 800033e:	2200      	movs	r2, #0
 8000340:	2125      	movs	r1, #37	@ 0x25
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ffcd 	bl	80002e2 <IS31FL3236_WriteRegister>
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <IS31FL3236_WriteLEDControl>:

/*
 * Sets the LED control for the specified chip / channel.
 */
void IS31FL3236_WriteLEDControl(IS31FL3236_HandleTypeDef* handle, uint8_t channel, uint8_t led_current_setting, uint8_t led_state)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	4608      	mov	r0, r1
 800035a:	4611      	mov	r1, r2
 800035c:	461a      	mov	r2, r3
 800035e:	4603      	mov	r3, r0
 8000360:	70fb      	strb	r3, [r7, #3]
 8000362:	460b      	mov	r3, r1
 8000364:	70bb      	strb	r3, [r7, #2]
 8000366:	4613      	mov	r3, r2
 8000368:	707b      	strb	r3, [r7, #1]
	if (channel < IS31FL3236_MAX_CHANNELS)
 800036a:	78fb      	ldrb	r3, [r7, #3]
 800036c:	2b23      	cmp	r3, #35	@ 0x23
 800036e:	d80a      	bhi.n	8000386 <IS31FL3236_WriteLEDControl+0x36>
		IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_LED_CTRL + channel, (led_current_setting | led_state));
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	3326      	adds	r3, #38	@ 0x26
 8000374:	b2d9      	uxtb	r1, r3
 8000376:	78ba      	ldrb	r2, [r7, #2]
 8000378:	787b      	ldrb	r3, [r7, #1]
 800037a:	4313      	orrs	r3, r2
 800037c:	b2db      	uxtb	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff ffae 	bl	80002e2 <IS31FL3236_WriteRegister>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <IS31FL3236_WriteSelectedLEDControl>:

void IS31FL3236_WriteSelectedLEDControl(IS31FL3236_HandleTypeDef* handle, uint8_t* channels, uint8_t num_channels, uint8_t led_current_setting, uint8_t led_state)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b086      	sub	sp, #24
 8000392:	af00      	add	r7, sp, #0
 8000394:	60f8      	str	r0, [r7, #12]
 8000396:	60b9      	str	r1, [r7, #8]
 8000398:	4611      	mov	r1, r2
 800039a:	461a      	mov	r2, r3
 800039c:	460b      	mov	r3, r1
 800039e:	71fb      	strb	r3, [r7, #7]
 80003a0:	4613      	mov	r3, r2
 80003a2:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < num_channels; i++)
 80003a4:	2300      	movs	r3, #0
 80003a6:	75fb      	strb	r3, [r7, #23]
 80003a8:	e016      	b.n	80003d8 <IS31FL3236_WriteSelectedLEDControl+0x4a>
    {
        uint8_t channel = channels[i];
 80003aa:	7dfb      	ldrb	r3, [r7, #23]
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	4413      	add	r3, r2
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	75bb      	strb	r3, [r7, #22]
        if (channel < IS31FL3236_MAX_CHANNELS)
 80003b4:	7dbb      	ldrb	r3, [r7, #22]
 80003b6:	2b23      	cmp	r3, #35	@ 0x23
 80003b8:	d80b      	bhi.n	80003d2 <IS31FL3236_WriteSelectedLEDControl+0x44>
        {
            IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_LED_CTRL + channel, (led_current_setting | led_state));
 80003ba:	7dbb      	ldrb	r3, [r7, #22]
 80003bc:	3326      	adds	r3, #38	@ 0x26
 80003be:	b2d9      	uxtb	r1, r3
 80003c0:	79ba      	ldrb	r2, [r7, #6]
 80003c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003c6:	4313      	orrs	r3, r2
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	461a      	mov	r2, r3
 80003cc:	68f8      	ldr	r0, [r7, #12]
 80003ce:	f7ff ff88 	bl	80002e2 <IS31FL3236_WriteRegister>
    for (uint8_t i = 0; i < num_channels; i++)
 80003d2:	7dfb      	ldrb	r3, [r7, #23]
 80003d4:	3301      	adds	r3, #1
 80003d6:	75fb      	strb	r3, [r7, #23]
 80003d8:	7dfa      	ldrb	r2, [r7, #23]
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d3e4      	bcc.n	80003aa <IS31FL3236_WriteSelectedLEDControl+0x1c>
        }
    }
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <IS31FL3236_RotateSelectedChannels>:


////////////////////////////////////////////////////
void IS31FL3236_RotateSelectedChannels(IS31FL3236_HandleTypeDef* handle, uint8_t on_pwm_value, uint8_t off_pwm_value, uint16_t delay_ms, uint32_t cycles)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	4608      	mov	r0, r1
 80003f6:	4611      	mov	r1, r2
 80003f8:	461a      	mov	r2, r3
 80003fa:	4603      	mov	r3, r0
 80003fc:	70fb      	strb	r3, [r7, #3]
 80003fe:	460b      	mov	r3, r1
 8000400:	70bb      	strb	r3, [r7, #2]
 8000402:	4613      	mov	r3, r2
 8000404:	803b      	strh	r3, [r7, #0]
    uint8_t selected_channels[] = {2,5,8,11,14,23,20,17};//4,7,10,13,16,19,22,25  2,5,8,11,14,23,20,17
 8000406:	4a25      	ldr	r2, [pc, #148]	@ (800049c <IS31FL3236_RotateSelectedChannels+0xb0>)
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000410:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t num_of_channels = sizeof(selected_channels) / sizeof(selected_channels[0]);
 8000414:	2308      	movs	r3, #8
 8000416:	747b      	strb	r3, [r7, #17]
    uint32_t current_cycle = 1; //0
 8000418:	2301      	movs	r3, #1
 800041a:	617b      	str	r3, [r7, #20]

    while (current_cycle)//current_cycle
 800041c:	e036      	b.n	800048c <IS31FL3236_RotateSelectedChannels+0xa0>
    {
        for (uint8_t i = 0; i < num_of_channels; i++)
 800041e:	2300      	movs	r3, #0
 8000420:	74fb      	strb	r3, [r7, #19]
 8000422:	e02c      	b.n	800047e <IS31FL3236_RotateSelectedChannels+0x92>
        {
            uint8_t channel = selected_channels[i];
 8000424:	7cfb      	ldrb	r3, [r7, #19]
 8000426:	3318      	adds	r3, #24
 8000428:	443b      	add	r3, r7
 800042a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800042e:	743b      	strb	r3, [r7, #16]

            // Turn all selected channels off
            for (uint8_t j = 0; j < num_of_channels; j++)
 8000430:	2300      	movs	r3, #0
 8000432:	74bb      	strb	r3, [r7, #18]
 8000434:	e00c      	b.n	8000450 <IS31FL3236_RotateSelectedChannels+0x64>
            {
                IS31FL3236_WritePWM(handle, selected_channels[j], off_pwm_value);
 8000436:	7cbb      	ldrb	r3, [r7, #18]
 8000438:	3318      	adds	r3, #24
 800043a:	443b      	add	r3, r7
 800043c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000440:	78ba      	ldrb	r2, [r7, #2]
 8000442:	4619      	mov	r1, r3
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f000 f847 	bl	80004d8 <IS31FL3236_WritePWM>
            for (uint8_t j = 0; j < num_of_channels; j++)
 800044a:	7cbb      	ldrb	r3, [r7, #18]
 800044c:	3301      	adds	r3, #1
 800044e:	74bb      	strb	r3, [r7, #18]
 8000450:	7cba      	ldrb	r2, [r7, #18]
 8000452:	7c7b      	ldrb	r3, [r7, #17]
 8000454:	429a      	cmp	r2, r3
 8000456:	d3ee      	bcc.n	8000436 <IS31FL3236_RotateSelectedChannels+0x4a>
            }
            // Update the register to push changes
            IS31FL3236_Update(handle);
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f7ff ff6c 	bl	8000336 <IS31FL3236_Update>

            // Turn the current channel on
            IS31FL3236_WritePWM(handle, channel, on_pwm_value);
 800045e:	78fa      	ldrb	r2, [r7, #3]
 8000460:	7c3b      	ldrb	r3, [r7, #16]
 8000462:	4619      	mov	r1, r3
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f000 f837 	bl	80004d8 <IS31FL3236_WritePWM>

            // Update the register to push changes
            IS31FL3236_Update(handle);
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f7ff ff63 	bl	8000336 <IS31FL3236_Update>

            // Wait for some time before moving to the next channel
            HAL_Delay(delay_ms);
 8000470:	883b      	ldrh	r3, [r7, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fa5a 	bl	800192c <HAL_Delay>
        for (uint8_t i = 0; i < num_of_channels; i++)
 8000478:	7cfb      	ldrb	r3, [r7, #19]
 800047a:	3301      	adds	r3, #1
 800047c:	74fb      	strb	r3, [r7, #19]
 800047e:	7cfa      	ldrb	r2, [r7, #19]
 8000480:	7c7b      	ldrb	r3, [r7, #17]
 8000482:	429a      	cmp	r2, r3
 8000484:	d3ce      	bcc.n	8000424 <IS31FL3236_RotateSelectedChannels+0x38>
        }
        current_cycle++;
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	3301      	adds	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
    while (current_cycle)//current_cycle
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d1c5      	bne.n	800041e <IS31FL3236_RotateSelectedChannels+0x32>
    }
}
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	080076f8 	.word	0x080076f8

080004a0 <IS31FL3236_WriteGlobalLEDControl>:
/*
 * Writes an led control word to all channels of a specified chip.
 */
void IS31FL3236_WriteGlobalLEDControl(IS31FL3236_HandleTypeDef* handle, uint8_t led_current_setting, uint8_t led_state)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	70fb      	strb	r3, [r7, #3]
 80004ac:	4613      	mov	r3, r2
 80004ae:	70bb      	strb	r3, [r7, #2]
	for (uint8_t i = 0; i < IS31FL3236_MAX_CHANNELS; i++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	e008      	b.n	80004c8 <IS31FL3236_WriteGlobalLEDControl+0x28>
	{
		IS31FL3236_WriteLEDControl(handle, i, led_current_setting, led_state);
 80004b6:	78bb      	ldrb	r3, [r7, #2]
 80004b8:	78fa      	ldrb	r2, [r7, #3]
 80004ba:	7bf9      	ldrb	r1, [r7, #15]
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f7ff ff47 	bl	8000350 <IS31FL3236_WriteLEDControl>
	for (uint8_t i = 0; i < IS31FL3236_MAX_CHANNELS; i++)
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	3301      	adds	r3, #1
 80004c6:	73fb      	strb	r3, [r7, #15]
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	2b23      	cmp	r3, #35	@ 0x23
 80004cc:	d9f3      	bls.n	80004b6 <IS31FL3236_WriteGlobalLEDControl+0x16>
	}
}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <IS31FL3236_WritePWM>:

/*
 * Writes the given PWM value (0 - 255) to the specified chip / channel.
 */
void IS31FL3236_WritePWM(IS31FL3236_HandleTypeDef* handle, uint8_t channel, uint8_t pwm_value)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]
 80004e4:	4613      	mov	r3, r2
 80004e6:	70bb      	strb	r3, [r7, #2]
	if (channel < IS31FL3236_MAX_CHANNELS)
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	2b23      	cmp	r3, #35	@ 0x23
 80004ec:	d807      	bhi.n	80004fe <IS31FL3236_WritePWM+0x26>
		IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_PWM + channel, pwm_value);
 80004ee:	78fb      	ldrb	r3, [r7, #3]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	78ba      	ldrb	r2, [r7, #2]
 80004f6:	4619      	mov	r1, r3
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff fef2 	bl	80002e2 <IS31FL3236_WriteRegister>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <IS31FL3236_SetSoftwareShutdown>:

/*
 * Sets the software shutdown mode of the specified chip.
 */
void IS31FL3236_SetSoftwareShutdown(IS31FL3236_HandleTypeDef* handle, uint8_t software_shutdown_mode)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	70fb      	strb	r3, [r7, #3]
	IS31FL3236_WriteRegister(handle, IS31FL3236_REGISTER_SHUTDOWN, software_shutdown_mode);
 8000512:	78fb      	ldrb	r3, [r7, #3]
 8000514:	461a      	mov	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f7ff fee2 	bl	80002e2 <IS31FL3236_WriteRegister>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	@ 0x30
 800052c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f001 f9b5 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f8a3 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 fbdd 	bl	8000cf4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800053a:	f000 f913 	bl	8000764 <MX_ADC1_Init>
  MX_DAC1_Init();
 800053e:	f000 f975 	bl	800082c <MX_DAC1_Init>
  MX_I2C1_Init();
 8000542:	f000 f9b5 	bl	80008b0 <MX_I2C1_Init>
  MX_SAU_Init();
 8000546:	f000 fa46 	bl	80009d6 <MX_SAU_Init>
  MX_SPI1_Init();
 800054a:	f000 fa4b 	bl	80009e4 <MX_SPI1_Init>
  MX_TIM2_Init();
 800054e:	f000 fa9f 	bl	8000a90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000552:	f000 faf7 	bl	8000b44 <MX_TIM3_Init>
  MX_USB_PCD_Init();
 8000556:	f000 fb9b 	bl	8000c90 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800055a:	f000 f9e9 	bl	8000930 <MX_I2C2_Init>
  MX_USART3_Init();
 800055e:	f000 fb4b 	bl	8000bf8 <MX_USART3_Init>
  MX_ICACHE_Init();
 8000562:	f000 fa25 	bl	80009b0 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB,ESP32_EN_Pin,GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800056c:	483d      	ldr	r0, [pc, #244]	@ (8000664 <main+0x13c>)
 800056e:	f002 fdad 	bl	80030cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,LED_DRV_EN_Pin,GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000578:	483a      	ldr	r0, [pc, #232]	@ (8000664 <main+0x13c>)
 800057a:	f002 fda7 	bl	80030cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,CHG_SOURCE_Pin,GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000584:	4838      	ldr	r0, [pc, #224]	@ (8000668 <main+0x140>)
 8000586:	f002 fda1 	bl	80030cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,nCHG_TIME_EN_Pin,GPIO_PIN_RESET); //nCHG_TIME_EN
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000590:	4835      	ldr	r0, [pc, #212]	@ (8000668 <main+0x140>)
 8000592:	f002 fd9b 	bl	80030cc <HAL_GPIO_WritePin>

  //IS31FL3236_HandleTypeDef* ptr_h_led_drvr_foo;
  //IS31FL3236_Init(ptr_h_led_drvr_foo);
  IS31FL3236_InitTypeDef h_led_drvr_foo;

  h_led_drvr_foo.I2C_Bus = &hi2c1;
 8000596:	4b35      	ldr	r3, [pc, #212]	@ (800066c <main+0x144>)
 8000598:	60fb      	str	r3, [r7, #12]
  h_led_drvr_foo.I2C_Device_Address = IS31FL3236_GET_I2C_ADDR(IS31FL3236_I2C_AD_TO_GND);
 800059a:	2378      	movs	r3, #120	@ 0x78
 800059c:	743b      	strb	r3, [r7, #16]
  h_led_drvr_foo.I2C_Transmit_Timeout_Milliseconds = 10; // 10ms is default.
 800059e:	230a      	movs	r3, #10
 80005a0:	617b      	str	r3, [r7, #20]
  h_led_drvr_foo.Chip_Enable_Signal_Port = GPIOB;
 80005a2:	4b30      	ldr	r3, [pc, #192]	@ (8000664 <main+0x13c>)
 80005a4:	61bb      	str	r3, [r7, #24]
  h_led_drvr_foo.Chip_Enable_Signal_Pin = GPIO_PIN_14;
 80005a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005aa:	83bb      	strh	r3, [r7, #28]

  // Optional [
  h_led_drvr_foo.RGB_Mode_Color_1 = IS31FL3236_RGB_CONFIG_RED;
 80005ac:	2300      	movs	r3, #0
 80005ae:	77bb      	strb	r3, [r7, #30]
  h_led_drvr_foo.RGB_Mode_Color_2 = IS31FL3236_RGB_CONFIG_GREEN;
 80005b0:	2301      	movs	r3, #1
 80005b2:	77fb      	strb	r3, [r7, #31]
  h_led_drvr_foo.RGB_Mode_Color_3 = IS31FL3236_RGB_CONFIG_BLUE;
 80005b4:	2302      	movs	r3, #2
 80005b6:	f887 3020 	strb.w	r3, [r7, #32]
  // ]

  // Store the pointer to the handle in a (global) variable for future access in other functions.
  ptr_h_led_drvr_foo = &h_led_drvr_foo;
 80005ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000670 <main+0x148>)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	6013      	str	r3, [r2, #0]

  // Init the handle.
  IS31FL3236_Init(ptr_h_led_drvr_foo);
 80005c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <main+0x148>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe66 	bl	8000298 <IS31FL3236_Init>

  IS31FL3236_WriteGlobalLEDControl(ptr_h_led_drvr_foo, IS31FL3236_LED_CURRENT_MAX, IS31FL3236_LED_STATE_ON);
 80005cc:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <main+0x148>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2201      	movs	r2, #1
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ff63 	bl	80004a0 <IS31FL3236_WriteGlobalLEDControl>
    // Send an update command to the chip.
  IS31FL3236_Update(ptr_h_led_drvr_foo);
 80005da:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <main+0x148>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fea9 	bl	8000336 <IS31FL3236_Update>

 /* // Set the color of RGB channel 0 to #FF00FF (Violet / Purple)
  IS31FL3236_WriteRGBPWM(ptr_h_led_drvr_foo, 10, 0xFF, 0x00, 0xFF);
  // Send the chip an update command.
  IS31FL3236_Update(ptr_h_led_drvr_foo);*/
  uint8_t selected_channels[] = {2,5,8,11,14,26,23,20,17};
 80005e4:	4a23      	ldr	r2, [pc, #140]	@ (8000674 <main+0x14c>)
 80005e6:	463b      	mov	r3, r7
 80005e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ea:	c303      	stmia	r3!, {r0, r1}
 80005ec:	701a      	strb	r2, [r3, #0]
  uint8_t num_of_channels = sizeof(selected_channels) / sizeof(selected_channels[0]);
 80005ee:	2309      	movs	r3, #9
 80005f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t pwm_value = 128; // Example PWM value
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    IS31FL3236_WriteSelectedLEDControl(ptr_h_led_drvr_foo,selected_channels,num_of_channels,IS31FL3236_LED_CURRENT_MAX_DIV_2, IS31FL3236_LED_STATE_ON);
 80005fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <main+0x148>)
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000602:	4639      	mov	r1, r7
 8000604:	2301      	movs	r3, #1
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2302      	movs	r3, #2
 800060a:	f7ff fec0 	bl	800038e <IS31FL3236_WriteSelectedLEDControl>
    //IS31FL3236_WriteSelectedPWM(ptr_h_led_drvr_foo,selected_channels,num_of_channels,pwm_value);
    IS31FL3236_RotateSelectedChannels(ptr_h_led_drvr_foo,200,0,100,50);
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <main+0x148>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	2332      	movs	r3, #50	@ 0x32
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2364      	movs	r3, #100	@ 0x64
 8000618:	2200      	movs	r2, #0
 800061a:	21c8      	movs	r1, #200	@ 0xc8
 800061c:	f7ff fee6 	bl	80003ec <IS31FL3236_RotateSelectedChannels>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_WritePin(GPIOC,LED1_Pin,GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000626:	4814      	ldr	r0, [pc, #80]	@ (8000678 <main+0x150>)
 8000628:	f002 fd50 	bl	80030cc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000630:	f001 f97c 	bl	800192c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC,LED1_Pin,GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800063a:	480f      	ldr	r0, [pc, #60]	@ (8000678 <main+0x150>)
 800063c:	f002 fd46 	bl	80030cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,LED2_Pin,GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000646:	480c      	ldr	r0, [pc, #48]	@ (8000678 <main+0x150>)
 8000648:	f002 fd40 	bl	80030cc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800064c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000650:	f001 f96c 	bl	800192c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC,LED2_Pin,GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800065a:	4807      	ldr	r0, [pc, #28]	@ (8000678 <main+0x150>)
 800065c:	f002 fd36 	bl	80030cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,LED1_Pin,GPIO_PIN_SET);
 8000660:	bf00      	nop
 8000662:	e7dd      	b.n	8000620 <main+0xf8>
 8000664:	42020400 	.word	0x42020400
 8000668:	42020000 	.word	0x42020000
 800066c:	200000a4 	.word	0x200000a4
 8000670:	200005b4 	.word	0x200005b4
 8000674:	08007700 	.word	0x08007700
 8000678:	42020800 	.word	0x42020800

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b09c      	sub	sp, #112	@ 0x70
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2250      	movs	r2, #80	@ 0x50
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 fffb 	bl	8007686 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000760 <SystemClock_Config+0xe4>)
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000760 <SystemClock_Config+0xe4>)
 80006a8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006ac:	6113      	str	r3, [r2, #16]
 80006ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000760 <SystemClock_Config+0xe4>)
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ba:	bf00      	nop
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xe4>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	d1f9      	bne.n	80006bc <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006c8:	233a      	movs	r3, #58	@ 0x3a
 80006ca:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_CSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80006d0:	2308      	movs	r3, #8
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2340      	movs	r3, #64	@ 0x40
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006d8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80006ea:	2320      	movs	r3, #32
 80006ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80006fa:	2320      	movs	r3, #32
 80006fc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000702:	2302      	movs	r3, #2
 8000704:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800070a:	2308      	movs	r3, #8
 800070c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800070e:	2300      	movs	r3, #0
 8000710:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fa54 	bl	8003bc8 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000726:	f000 fbdb 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	231f      	movs	r3, #31
 800072c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2101      	movs	r1, #1
 8000748:	4618      	mov	r0, r3
 800074a:	f003 fe75 	bl	8004438 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000754:	f000 fbc4 	bl	8000ee0 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3770      	adds	r7, #112	@ 0x70
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	44020800 	.word	0x44020800

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2220      	movs	r2, #32
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f006 ff88 	bl	8007686 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000776:	4b2a      	ldr	r3, [pc, #168]	@ (8000820 <MX_ADC1_Init+0xbc>)
 8000778:	4a2a      	ldr	r2, [pc, #168]	@ (8000824 <MX_ADC1_Init+0xc0>)
 800077a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800077c:	4b28      	ldr	r3, [pc, #160]	@ (8000820 <MX_ADC1_Init+0xbc>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000782:	4b27      	ldr	r3, [pc, #156]	@ (8000820 <MX_ADC1_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000788:	4b25      	ldr	r3, [pc, #148]	@ (8000820 <MX_ADC1_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800078e:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <MX_ADC1_Init+0xbc>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000794:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <MX_ADC1_Init+0xbc>)
 8000796:	2204      	movs	r2, #4
 8000798:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800079a:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <MX_ADC1_Init+0xbc>)
 800079c:	2200      	movs	r2, #0
 800079e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <MX_ADC1_Init+0xbc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <MX_ADC1_Init+0xbc>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_ADC1_Init+0xbc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_ADC1_Init+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_ADC1_Init+0xbc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c0:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_ADC1_Init+0xbc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_ADC1_Init+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_ADC1_Init+0xbc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_ADC1_Init+0xbc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007dc:	4810      	ldr	r0, [pc, #64]	@ (8000820 <MX_ADC1_Init+0xbc>)
 80007de:	f001 fac5 	bl	8001d6c <HAL_ADC_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80007e8:	f000 fb7a 	bl	8000ee0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_ADC1_Init+0xc4>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	237f      	movs	r3, #127	@ 0x7f
 80007fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fc:	2304      	movs	r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_ADC1_Init+0xbc>)
 800080a:	f001 fbfd 	bl	8002008 <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000814:	f000 fb64 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000028 	.word	0x20000028
 8000824:	42028000 	.word	0x42028000
 8000828:	04300002 	.word	0x04300002

0800082c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	@ 0x30
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	222c      	movs	r2, #44	@ 0x2c
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f006 ff24 	bl	8007686 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_DAC1_Init+0x7c>)
 8000840:	4a1a      	ldr	r2, [pc, #104]	@ (80008ac <MX_DAC1_Init+0x80>)
 8000842:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000844:	4818      	ldr	r0, [pc, #96]	@ (80008a8 <MX_DAC1_Init+0x7c>)
 8000846:	f002 f917 	bl	8002a78 <HAL_DAC_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000850:	f000 fb46 	bl	8000ee0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	723b      	strb	r3, [r7, #8]
  sConfig.DAC_SignedFormat = DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	727b      	strb	r3, [r7, #9]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <MX_DAC1_Init+0x7c>)
 800087c:	f002 f91e 	bl	8002abc <HAL_DAC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 8000886:	f000 fb2b 	bl	8000ee0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2210      	movs	r2, #16
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_DAC1_Init+0x7c>)
 8000892:	f002 f913 	bl	8002abc <HAL_DAC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_DAC1_Init+0x74>
  {
    Error_Handler();
 800089c:	f000 fb20 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3730      	adds	r7, #48	@ 0x30
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000090 	.word	0x20000090
 80008ac:	42028400 	.word	0x42028400

080008b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <MX_I2C1_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008bc:	4a1b      	ldr	r2, [pc, #108]	@ (800092c <MX_I2C1_Init+0x7c>)
 80008be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ea:	480e      	ldr	r0, [pc, #56]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008ec:	f002 fc06 	bl	80030fc <HAL_I2C_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008f6:	f000 faf3 	bl	8000ee0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008fe:	f002 ffa7 	bl	8003850 <HAL_I2CEx_ConfigAnalogFilter>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000908:	f000 faea 	bl	8000ee0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_I2C1_Init+0x74>)
 8000910:	f002 ffe9 	bl	80038e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800091a:	f000 fae1 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000a4 	.word	0x200000a4
 8000928:	40005400 	.word	0x40005400
 800092c:	00707cbb 	.word	0x00707cbb

08000930 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <MX_I2C2_Init+0x78>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800093a:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <MX_I2C2_Init+0x74>)
 800093c:	4a1b      	ldr	r2, [pc, #108]	@ (80009ac <MX_I2C2_Init+0x7c>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000940:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <MX_I2C2_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800096a:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <MX_I2C2_Init+0x74>)
 800096c:	f002 fbc6 	bl	80030fc <HAL_I2C_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000976:	f000 fab3 	bl	8000ee0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <MX_I2C2_Init+0x74>)
 800097e:	f002 ff67 	bl	8003850 <HAL_I2CEx_ConfigAnalogFilter>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 faaa 	bl	8000ee0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_I2C2_Init+0x74>)
 8000990:	f002 ffa9 	bl	80038e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 faa1 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000f8 	.word	0x200000f8
 80009a8:	40005800 	.word	0x40005800
 80009ac:	00707cbb 	.word	0x00707cbb

080009b0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80009b4:	2000      	movs	r0, #0
 80009b6:	f002 ffe3 	bl	8003980 <HAL_ICACHE_ConfigAssociativityMode>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80009c0:	f000 fa8e 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80009c4:	f002 fffc 	bl	80039c0 <HAL_ICACHE_Enable>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80009ce:	f000 fa87 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <MX_SAU_Init>:
  * @brief SAU Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAU_Init(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END SAU_Init 1 */
  /* USER CODE BEGIN SAU_Init 2 */

  /* USER CODE END SAU_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e8:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 80009ea:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <MX_SPI1_Init+0xa8>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 80009f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 80009fe:	2203      	movs	r2, #3
 8000a00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_SPI1_Init+0xa4>)
 8000a74:	f005 f86a 	bl	8005b4c <HAL_SPI_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000a7e:	f000 fa2f 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000014c 	.word	0x2000014c
 8000a8c:	40013000 	.word	0x40013000

08000a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
 8000ab0:	615a      	str	r2, [r3, #20]
 8000ab2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <MX_TIM2_Init+0xb0>)
 8000ab6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000abc:	4b20      	ldr	r3, [pc, #128]	@ (8000b40 <MX_TIM2_Init+0xb0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <MX_TIM2_Init+0xb0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <MX_TIM2_Init+0xb0>)
 8000aca:	f04f 32ff 	mov.w	r2, #4294967295
 8000ace:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <MX_TIM2_Init+0xb0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_TIM2_Init+0xb0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000adc:	4818      	ldr	r0, [pc, #96]	@ (8000b40 <MX_TIM2_Init+0xb0>)
 8000ade:	f005 fa01 	bl	8005ee4 <HAL_TIM_PWM_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ae8:	f000 f9fa 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4811      	ldr	r0, [pc, #68]	@ (8000b40 <MX_TIM2_Init+0xb0>)
 8000afc:	f005 ff84 	bl	8006a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b06:	f000 f9eb 	bl	8000ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0a:	2360      	movs	r3, #96	@ 0x60
 8000b0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <MX_TIM2_Init+0xb0>)
 8000b22:	f005 fb85 	bl	8006230 <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b2c:	f000 f9d8 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b30:	4803      	ldr	r0, [pc, #12]	@ (8000b40 <MX_TIM2_Init+0xb0>)
 8000b32:	f000 fc47 	bl	80013c4 <HAL_TIM_MspPostInit>

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	@ 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200001dc 	.word	0x200001dc

08000b44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_TIM3_Init+0xac>)
 8000b6a:	4a22      	ldr	r2, [pc, #136]	@ (8000bf4 <MX_TIM3_Init+0xb0>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <MX_TIM3_Init+0xac>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <MX_TIM3_Init+0xac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <MX_TIM3_Init+0xac>)
 8000b7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <MX_TIM3_Init+0xac>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <MX_TIM3_Init+0xac>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b8e:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <MX_TIM3_Init+0xac>)
 8000b90:	f005 f9a8 	bl	8005ee4 <HAL_TIM_PWM_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b9a:	f000 f9a1 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4810      	ldr	r0, [pc, #64]	@ (8000bf0 <MX_TIM3_Init+0xac>)
 8000bae:	f005 ff2b 	bl	8006a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000bb8:	f000 f992 	bl	8000ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbc:	2360      	movs	r3, #96	@ 0x60
 8000bbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <MX_TIM3_Init+0xac>)
 8000bd4:	f005 fb2c 	bl	8006230 <HAL_TIM_PWM_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000bde:	f000 f97f 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000be2:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <MX_TIM3_Init+0xac>)
 8000be4:	f000 fbee 	bl	80013c4 <HAL_TIM_MspPostInit>

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	@ 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000228 	.word	0x20000228
 8000bf4:	40000400 	.word	0x40000400

08000bf8 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000bfe:	4a23      	ldr	r2, [pc, #140]	@ (8000c8c <MX_USART3_Init+0x94>)
 8000c00:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8000c02:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c40:	4811      	ldr	r0, [pc, #68]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c42:	f005 ff8f 	bl	8006b64 <HAL_USART_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8000c4c:	f000 f948 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c54:	f006 fbf6 	bl	8007444 <HAL_USARTEx_SetTxFifoThreshold>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000c5e:	f000 f93f 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c66:	f006 fc2b 	bl	80074c0 <HAL_USARTEx_SetRxFifoThreshold>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8000c70:	f000 f936 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_USART3_Init+0x90>)
 8000c76:	f006 fbac 	bl	80073d2 <HAL_USARTEx_DisableFifoMode>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART3_Init+0x8c>
  {
    Error_Handler();
 8000c80:	f000 f92e 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000274 	.word	0x20000274
 8000c8c:	40004800 	.word	0x40004800

08000c90 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000c96:	4a16      	ldr	r2, [pc, #88]	@ (8000cf0 <MX_USB_PCD_Init+0x60>)
 8000c98:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_USB_PCD_Init+0x5c>)
 8000cd8:	f002 fe82 	bl	80039e0 <HAL_PCD_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8000ce2:	f000 f8fd 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200002d4 	.word	0x200002d4
 8000cf0:	40016000 	.word	0x40016000

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b66      	ldr	r3, [pc, #408]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d10:	4a64      	ldr	r2, [pc, #400]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d1a:	4b62      	ldr	r3, [pc, #392]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d28:	4b5e      	ldr	r3, [pc, #376]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2e:	4a5d      	ldr	r2, [pc, #372]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d38:	4b5a      	ldr	r3, [pc, #360]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b57      	ldr	r3, [pc, #348]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d4c:	4a55      	ldr	r2, [pc, #340]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d56:	4b53      	ldr	r3, [pc, #332]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b4f      	ldr	r3, [pc, #316]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d74:	4b4b      	ldr	r3, [pc, #300]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	4b48      	ldr	r3, [pc, #288]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d88:	4a46      	ldr	r2, [pc, #280]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d92:	4b44      	ldr	r3, [pc, #272]	@ (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP32_EN_Pin|LED_DRV_EN_Pin|Air_Sensor_Disable_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f245 0140 	movw	r1, #20544	@ 0x5040
 8000da6:	4840      	ldr	r0, [pc, #256]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000da8:	f002 f990 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nCHG_TIME_EN_Pin|CHG_SOURCE_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000db2:	483e      	ldr	r0, [pc, #248]	@ (8000eac <MX_GPIO_Init+0x1b8>)
 8000db4:	f002 f98a 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000dbe:	483c      	ldr	r0, [pc, #240]	@ (8000eb0 <MX_GPIO_Init+0x1bc>)
 8000dc0:	f002 f984 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4835      	ldr	r0, [pc, #212]	@ (8000eb0 <MX_GPIO_Init+0x1bc>)
 8000dda:	f002 f825 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Air_INT_Pin PIR1_IN_Pin PROX1_SIG_Pin PROTO_PIR_Pin
                           ACC_INT2_Pin */
  GPIO_InitStruct.Pin = Air_INT_Pin|PIR1_IN_Pin|PROX1_SIG_Pin|PROTO_PIR_Pin
 8000dde:	f24d 03a0 	movw	r3, #53408	@ 0xd0a0
 8000de2:	617b      	str	r3, [r7, #20]
                          |ACC_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de4:	4b33      	ldr	r3, [pc, #204]	@ (8000eb4 <MX_GPIO_Init+0x1c0>)
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	482f      	ldr	r0, [pc, #188]	@ (8000eb0 <MX_GPIO_Init+0x1bc>)
 8000df4:	f002 f818 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX2_SIG_Pin */
  GPIO_InitStruct.Pin = PROX2_SIG_Pin;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb4 <MX_GPIO_Init+0x1c0>)
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX2_SIG_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4827      	ldr	r0, [pc, #156]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000e0c:	f002 f80c 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP32_EN_Pin LED_DRV_EN_Pin Air_Sensor_Disable_Pin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|LED_DRV_EN_Pin|Air_Sensor_Disable_Pin;
 8000e10:	f245 0340 	movw	r3, #20544	@ 0x5040
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	481f      	ldr	r0, [pc, #124]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000e2a:	f001 fffd 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : nCHG_TIME_EN_Pin CHG_SOURCE_Pin */
  GPIO_InitStruct.Pin = nCHG_TIME_EN_Pin|CHG_SOURCE_Pin;
 8000e2e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4819      	ldr	r0, [pc, #100]	@ (8000eac <MX_GPIO_Init+0x1b8>)
 8000e48:	f001 ffee 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000e4c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4812      	ldr	r0, [pc, #72]	@ (8000eb0 <MX_GPIO_Init+0x1bc>)
 8000e66:	f001 ffdf 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_GPIO_Init+0x1c0>)
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT1_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <MX_GPIO_Init+0x1c4>)
 8000e7e:	f001 ffd3 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : COMP_OUT_Pin HALL_Pin */
  GPIO_InitStruct.Pin = COMP_OUT_Pin|HALL_Pin;
 8000e82:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <MX_GPIO_Init+0x1b4>)
 8000e98:	f001 ffc6 	bl	8002e28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	@ 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	44020c00 	.word	0x44020c00
 8000ea8:	42020400 	.word	0x42020400
 8000eac:	42020000 	.word	0x42020000
 8000eb0:	42020800 	.word	0x42020800
 8000eb4:	10110000 	.word	0x10110000
 8000eb8:	42020c00 	.word	0x42020c00

08000ebc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ece:	f000 fd0d 	bl	80018ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40012c00 	.word	0x40012c00

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <Error_Handler+0x8>

08000eec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0ae      	sub	sp, #184	@ 0xb8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f14:	f107 0318 	add.w	r3, r7, #24
 8000f18:	2288      	movs	r2, #136	@ 0x88
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f006 fbb2 	bl	8007686 <memset>
  if(hadc->Instance==ADC1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a32      	ldr	r2, [pc, #200]	@ (8000ff0 <HAL_ADC_MspInit+0xf4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d15c      	bne.n	8000fe6 <HAL_ADC_MspInit+0xea>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000f2c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 fddd 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8000f4c:	f7ff ffc8 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f50:	4b28      	ldr	r3, [pc, #160]	@ (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f56:	4a27      	ldr	r2, [pc, #156]	@ (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f74:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f92:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_ADC_MspInit+0xf8>)
 8000f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_INP0
    PA1     ------> ADC1_INP1
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|AA_LVL_Pin|LIPO_LVL_Pin;
 8000faa:	2343      	movs	r3, #67	@ 0x43
 8000fac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <HAL_ADC_MspInit+0xfc>)
 8000fc4:	f001 ff30 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Light_Level_Pin;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(Light_Level_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <HAL_ADC_MspInit+0x100>)
 8000fe2:	f001 ff21 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	37b8      	adds	r7, #184	@ 0xb8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	42028000 	.word	0x42028000
 8000ff4:	44020c00 	.word	0x44020c00
 8000ff8:	42020000 	.word	0x42020000
 8000ffc:	42020400 	.word	0x42020400

08001000 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ac      	sub	sp, #176	@ 0xb0
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	2288      	movs	r2, #136	@ 0x88
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f006 fb30 	bl	8007686 <memset>
  if(hdac->Instance==DAC1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a22      	ldr	r2, [pc, #136]	@ (80010b4 <HAL_DAC_MspInit+0xb4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d13c      	bne.n	80010aa <HAL_DAC_MspInit+0xaa>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DAC;
 8001030:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fd5d 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_DAC_MspInit+0x50>
    {
      Error_Handler();
 800104c:	f7ff ff48 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_DAC_MspInit+0xb8>)
 8001052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001056:	4a18      	ldr	r2, [pc, #96]	@ (80010b8 <HAL_DAC_MspInit+0xb8>)
 8001058:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800105c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_DAC_MspInit+0xb8>)
 8001062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_DAC_MspInit+0xb8>)
 8001070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001074:	4a10      	ldr	r2, [pc, #64]	@ (80010b8 <HAL_DAC_MspInit+0xb8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_DAC_MspInit+0xb8>)
 8001080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800108c:	2330      	movs	r3, #48	@ 0x30
 800108e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_DAC_MspInit+0xbc>)
 80010a6:	f001 febf 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	37b0      	adds	r7, #176	@ 0xb0
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	42028400 	.word	0x42028400
 80010b8:	44020c00 	.word	0x44020c00
 80010bc:	42020000 	.word	0x42020000

080010c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0ae      	sub	sp, #184	@ 0xb8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	2288      	movs	r2, #136	@ 0x88
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 fad0 	bl	8007686 <memset>
  if(hi2c->Instance==I2C1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a57      	ldr	r2, [pc, #348]	@ (8001248 <HAL_I2C_MspInit+0x188>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d146      	bne.n	800117e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fcfb 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001110:	f7ff fee6 	bl	8000ee0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	4b4d      	ldr	r3, [pc, #308]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 8001116:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800111a:	4a4c      	ldr	r2, [pc, #304]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001124:	4b49      	ldr	r3, [pc, #292]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 8001126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PC8     ------> I2C1_SCL
    PC9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001132:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113a:	2312      	movs	r3, #18
 800113c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800114c:	2304      	movs	r3, #4
 800114e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001156:	4619      	mov	r1, r3
 8001158:	483d      	ldr	r0, [pc, #244]	@ (8001250 <HAL_I2C_MspInit+0x190>)
 800115a:	f001 fe65 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800115e:	4b3b      	ldr	r3, [pc, #236]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 8001160:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001164:	4a39      	ldr	r2, [pc, #228]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 8001166:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800116a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800116e:	4b37      	ldr	r3, [pc, #220]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 8001170:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800117c:	e05f      	b.n	800123e <HAL_I2C_MspInit+0x17e>
  else if(hi2c->Instance==I2C2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a34      	ldr	r2, [pc, #208]	@ (8001254 <HAL_I2C_MspInit+0x194>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d15a      	bne.n	800123e <HAL_I2C_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001188:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001194:	2300      	movs	r3, #0
 8001196:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	4618      	mov	r0, r3
 800119e:	f003 fcaf 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_I2C_MspInit+0xec>
      Error_Handler();
 80011a8:	f7ff fe9a 	bl	8000ee0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	4b27      	ldr	r3, [pc, #156]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 80011ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b2:	4a26      	ldr	r2, [pc, #152]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011bc:	4b23      	ldr	r3, [pc, #140]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 80011be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d2:	2312      	movs	r3, #18
 80011d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e4:	2304      	movs	r3, #4
 80011e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4819      	ldr	r0, [pc, #100]	@ (8001258 <HAL_I2C_MspInit+0x198>)
 80011f2:	f001 fe19 	bl	8002e28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011f6:	2320      	movs	r3, #32
 80011f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fc:	2312      	movs	r3, #18
 80011fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 800120e:	2308      	movs	r3, #8
 8001210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001218:	4619      	mov	r1, r3
 800121a:	480f      	ldr	r0, [pc, #60]	@ (8001258 <HAL_I2C_MspInit+0x198>)
 800121c:	f001 fe04 	bl	8002e28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 8001222:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001226:	4a09      	ldr	r2, [pc, #36]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 8001228:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800122c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_I2C_MspInit+0x18c>)
 8001232:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
}
 800123e:	bf00      	nop
 8001240:	37b8      	adds	r7, #184	@ 0xb8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40005400 	.word	0x40005400
 800124c:	44020c00 	.word	0x44020c00
 8001250:	42020800 	.word	0x42020800
 8001254:	40005800 	.word	0x40005800
 8001258:	42020400 	.word	0x42020400

0800125c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0ac      	sub	sp, #176	@ 0xb0
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	2288      	movs	r2, #136	@ 0x88
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f006 fa02 	bl	8007686 <memset>
  if(hspi->Instance==SPI1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a30      	ldr	r2, [pc, #192]	@ (8001348 <HAL_SPI_MspInit+0xec>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d159      	bne.n	8001340 <HAL_SPI_MspInit+0xe4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800128c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001298:	2300      	movs	r3, #0
 800129a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fc2d 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80012ac:	f7ff fe18 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b0:	4b26      	ldr	r3, [pc, #152]	@ (800134c <HAL_SPI_MspInit+0xf0>)
 80012b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012b6:	4a25      	ldr	r2, [pc, #148]	@ (800134c <HAL_SPI_MspInit+0xf0>)
 80012b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012bc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80012c0:	4b22      	ldr	r3, [pc, #136]	@ (800134c <HAL_SPI_MspInit+0xf0>)
 80012c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <HAL_SPI_MspInit+0xf0>)
 80012d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d4:	4a1d      	ldr	r2, [pc, #116]	@ (800134c <HAL_SPI_MspInit+0xf0>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012de:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <HAL_SPI_MspInit+0xf0>)
 80012e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PC0     ------> SPI1_SCK
    PC2     ------> SPI1_MISO
    PC3     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ec:	2301      	movs	r3, #1
 80012ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001304:	2305      	movs	r3, #5
 8001306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800130e:	4619      	mov	r1, r3
 8001310:	480f      	ldr	r0, [pc, #60]	@ (8001350 <HAL_SPI_MspInit+0xf4>)
 8001312:	f001 fd89 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001316:	230c      	movs	r3, #12
 8001318:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 800132e:	2304      	movs	r3, #4
 8001330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001334:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001338:	4619      	mov	r1, r3
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <HAL_SPI_MspInit+0xf4>)
 800133c:	f001 fd74 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001340:	bf00      	nop
 8001342:	37b0      	adds	r7, #176	@ 0xb0
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40013000 	.word	0x40013000
 800134c:	44020c00 	.word	0x44020c00
 8001350:	42020800 	.word	0x42020800

08001354 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001364:	d10f      	bne.n	8001386 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_TIM_PWM_MspInit+0x68>)
 8001368:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800136c:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <HAL_TIM_PWM_MspInit+0x68>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_TIM_PWM_MspInit+0x68>)
 8001378:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001384:	e013      	b.n	80013ae <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <HAL_TIM_PWM_MspInit+0x6c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d10e      	bne.n	80013ae <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_TIM_PWM_MspInit+0x68>)
 8001392:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <HAL_TIM_PWM_MspInit+0x68>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_TIM_PWM_MspInit+0x68>)
 80013a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	44020c00 	.word	0x44020c00
 80013c0:	40000400 	.word	0x40000400

080013c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013e4:	d11f      	bne.n	8001426 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <HAL_TIM_MspPostInit+0xb4>)
 80013e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ec:	4a22      	ldr	r2, [pc, #136]	@ (8001478 <HAL_TIM_MspPostInit+0xb4>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_TIM_MspPostInit+0xb4>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = IR1_DRIVE_Pin;
 8001404:	2304      	movs	r3, #4
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8001414:	230e      	movs	r3, #14
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IR1_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4817      	ldr	r0, [pc, #92]	@ (800147c <HAL_TIM_MspPostInit+0xb8>)
 8001420:	f001 fd02 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001424:	e023      	b.n	800146e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a15      	ldr	r2, [pc, #84]	@ (8001480 <HAL_TIM_MspPostInit+0xbc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d11e      	bne.n	800146e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001430:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <HAL_TIM_MspPostInit+0xb4>)
 8001432:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001436:	4a10      	ldr	r2, [pc, #64]	@ (8001478 <HAL_TIM_MspPostInit+0xb4>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001440:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <HAL_TIM_MspPostInit+0xb4>)
 8001442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IR2_DRIVE_Pin;
 800144e:	2340      	movs	r3, #64	@ 0x40
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800145e:	2302      	movs	r3, #2
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IR2_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4806      	ldr	r0, [pc, #24]	@ (8001484 <HAL_TIM_MspPostInit+0xc0>)
 800146a:	f001 fcdd 	bl	8002e28 <HAL_GPIO_Init>
}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	@ 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	44020c00 	.word	0x44020c00
 800147c:	42020400 	.word	0x42020400
 8001480:	40000400 	.word	0x40000400
 8001484:	42020800 	.word	0x42020800

08001488 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0ae      	sub	sp, #184	@ 0xb8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	2288      	movs	r2, #136	@ 0x88
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f006 f8ec 	bl	8007686 <memset>
  if(husart->Instance==USART3)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a38      	ldr	r2, [pc, #224]	@ (8001594 <HAL_USART_MspInit+0x10c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d169      	bne.n	800158c <HAL_USART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014b8:	f04f 0204 	mov.w	r2, #4
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fb17 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_USART_MspInit+0x54>
    {
      Error_Handler();
 80014d8:	f7ff fd02 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <HAL_USART_MspInit+0x110>)
 80014de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001598 <HAL_USART_MspInit+0x110>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <HAL_USART_MspInit+0x110>)
 80014ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <HAL_USART_MspInit+0x110>)
 80014fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001500:	4a25      	ldr	r2, [pc, #148]	@ (8001598 <HAL_USART_MspInit+0x110>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800150a:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <HAL_USART_MspInit+0x110>)
 800150c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001518:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <HAL_USART_MspInit+0x110>)
 800151a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800151e:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <HAL_USART_MspInit+0x110>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001528:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <HAL_USART_MspInit+0x110>)
 800152a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PA7     ------> USART3_CK
    PC4     ------> USART3_RX
    PA8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|VCP1_T_RX_Pin;
 8001536:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800153a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8001550:	230d      	movs	r3, #13
 8001552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800155a:	4619      	mov	r1, r3
 800155c:	480f      	ldr	r0, [pc, #60]	@ (800159c <HAL_USART_MspInit+0x114>)
 800155e:	f001 fc63 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP1_T_TX_Pin;
 8001562:	2310      	movs	r3, #16
 8001564:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800157a:	2307      	movs	r3, #7
 800157c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP1_T_TX_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	@ (80015a0 <HAL_USART_MspInit+0x118>)
 8001588:	f001 fc4e 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	37b8      	adds	r7, #184	@ 0xb8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40004800 	.word	0x40004800
 8001598:	44020c00 	.word	0x44020c00
 800159c:	42020000 	.word	0x42020000
 80015a0:	42020800 	.word	0x42020800

080015a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0a6      	sub	sp, #152	@ 0x98
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	2288      	movs	r2, #136	@ 0x88
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 f866 	bl	8007686 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a14      	ldr	r2, [pc, #80]	@ (8001610 <HAL_PCD_MspInit+0x6c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d121      	bne.n	8001608 <HAL_PCD_MspInit+0x64>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0310 	mov.w	r3, #16
 80015cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80015d0:	2330      	movs	r3, #48	@ 0x30
 80015d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fa90 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 80015e6:	f7ff fc7b 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_PCD_MspInit+0x70>)
 80015ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015f0:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <HAL_PCD_MspInit+0x70>)
 80015f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015f6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_PCD_MspInit+0x70>)
 80015fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001600:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3798      	adds	r7, #152	@ 0x98
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40016000 	.word	0x40016000
 8001614:	44020c00 	.word	0x44020c00

08001618 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	@ 0x38
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001620:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <HAL_InitTick+0xc4>)
 8001622:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001626:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <HAL_InitTick+0xc4>)
 8001628:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800162c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <HAL_InitTick+0xc4>)
 8001632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001636:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800163e:	f107 0210 	add.w	r2, r7, #16
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f003 fa21 	bl	8004a90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800164e:	f003 fa09 	bl	8004a64 <HAL_RCC_GetPCLK2Freq>
 8001652:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8001654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <HAL_InitTick+0xc8>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	09db      	lsrs	r3, r3, #7
 8001660:	3b01      	subs	r3, #1
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001664:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <HAL_InitTick+0xcc>)
 8001666:	4a20      	ldr	r2, [pc, #128]	@ (80016e8 <HAL_InitTick+0xd0>)
 8001668:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (100000U / 1000U) - 1U;
 800166a:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <HAL_InitTick+0xcc>)
 800166c:	2263      	movs	r2, #99	@ 0x63
 800166e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001670:	4a1c      	ldr	r2, [pc, #112]	@ (80016e4 <HAL_InitTick+0xcc>)
 8001672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001674:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001676:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <HAL_InitTick+0xcc>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <HAL_InitTick+0xcc>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001682:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <HAL_InitTick+0xcc>)
 8001684:	f004 fb79 	bl	8005d7a <HAL_TIM_Base_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800168e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001696:	4813      	ldr	r0, [pc, #76]	@ (80016e4 <HAL_InitTick+0xcc>)
 8001698:	f004 fbd0 	bl	8005e3c <HAL_TIM_Base_Start_IT>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80016a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10e      	bne.n	80016c8 <HAL_InitTick+0xb0>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d808      	bhi.n	80016c2 <HAL_InitTick+0xaa>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	202a      	movs	r0, #42	@ 0x2a
 80016b6:	f001 f95f 	bl	8002978 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ba:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <HAL_InitTick+0xd4>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e002      	b.n	80016c8 <HAL_InitTick+0xb0>
      }
      else
      {
        status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
}

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80016c8:	202a      	movs	r0, #42	@ 0x2a
 80016ca:	f001 f96f 	bl	80029ac <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 80016ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3738      	adds	r7, #56	@ 0x38
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	44020c00 	.word	0x44020c00
 80016e0:	0a7c5ac5 	.word	0x0a7c5ac5
 80016e4:	200005b8 	.word	0x200005b8
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	20000004 	.word	0x20000004

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <NMI_Handler+0x4>

080016f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <MemManage_Handler+0x4>

08001708 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <UsageFault_Handler+0x4>

08001718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <TIM1_UP_IRQHandler+0x10>)
 8001756:	f004 fc1c 	bl	8005f92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200005b8 	.word	0x200005b8

08001764 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800176a:	4b30      	ldr	r3, [pc, #192]	@ (800182c <SystemInit+0xc8>)
 800176c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001770:	4a2e      	ldr	r2, [pc, #184]	@ (800182c <SystemInit+0xc8>)
 8001772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001776:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800177a:	4b2d      	ldr	r3, [pc, #180]	@ (8001830 <SystemInit+0xcc>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <SystemInit+0xcc>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001786:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <SystemInit+0xcc>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800178c:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <SystemInit+0xcc>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4927      	ldr	r1, [pc, #156]	@ (8001830 <SystemInit+0xcc>)
 8001792:	4b28      	ldr	r3, [pc, #160]	@ (8001834 <SystemInit+0xd0>)
 8001794:	4013      	ands	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <SystemInit+0xcc>)
 800179a:	2200      	movs	r2, #0
 800179c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <SystemInit+0xcc>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <SystemInit+0xcc>)
 80017a6:	4a24      	ldr	r2, [pc, #144]	@ (8001838 <SystemInit+0xd4>)
 80017a8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <SystemInit+0xcc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <SystemInit+0xcc>)
 80017b2:	4a21      	ldr	r2, [pc, #132]	@ (8001838 <SystemInit+0xd4>)
 80017b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <SystemInit+0xcc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80017bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <SystemInit+0xcc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001830 <SystemInit+0xcc>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <SystemInit+0xcc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <SystemInit+0xc8>)
 80017d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017d4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <SystemInit+0xd8>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80017de:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80017e6:	d003      	beq.n	80017f0 <SystemInit+0x8c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80017ee:	d117      	bne.n	8001820 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <SystemInit+0xd8>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <SystemInit+0xd8>)
 80017fe:	4a10      	ldr	r2, [pc, #64]	@ (8001840 <SystemInit+0xdc>)
 8001800:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <SystemInit+0xd8>)
 8001804:	4a0f      	ldr	r2, [pc, #60]	@ (8001844 <SystemInit+0xe0>)
 8001806:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <SystemInit+0xd8>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	4a0b      	ldr	r2, [pc, #44]	@ (800183c <SystemInit+0xd8>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <SystemInit+0xd8>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	4a08      	ldr	r2, [pc, #32]	@ (800183c <SystemInit+0xd8>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	61d3      	str	r3, [r2, #28]
  }
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00
 8001830:	44020c00 	.word	0x44020c00
 8001834:	fae2eae3 	.word	0xfae2eae3
 8001838:	01010280 	.word	0x01010280
 800183c:	40022000 	.word	0x40022000
 8001840:	08192a3b 	.word	0x08192a3b
 8001844:	4c5d6e7f 	.word	0x4c5d6e7f

08001848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001880 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800184c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800184e:	e003      	b.n	8001858 <LoopCopyDataInit>

08001850 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001852:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001854:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001856:	3104      	adds	r1, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001858:	480b      	ldr	r0, [pc, #44]	@ (8001888 <LoopForever+0xa>)
	ldr	r3, =_edata
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <LoopForever+0xe>)
	adds	r2, r0, r1
 800185c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800185e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001860:	d3f6      	bcc.n	8001850 <CopyDataInit>
	ldr	r2, =_sbss
 8001862:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001864:	e002      	b.n	800186c <LoopFillZerobss>

08001866 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001866:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001868:	f842 3b04 	str.w	r3, [r2], #4

0800186c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <LoopForever+0x16>)
	cmp	r2, r3
 800186e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001870:	d3f9      	bcc.n	8001866 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001872:	f7ff ff77 	bl	8001764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001876:	f005 ff0f 	bl	8007698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800187a:	f7fe fe55 	bl	8000528 <main>

0800187e <LoopForever>:

LoopForever:
    b LoopForever
 800187e:	e7fe      	b.n	800187e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001880:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001884:	0800773c 	.word	0x0800773c
	ldr	r0, =_sdata
 8001888:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800188c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001890:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001894:	20000608 	.word	0x20000608

08001898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC1_IRQHandler>
	...

0800189c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f001 f85e 	bl	8002962 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80018a6:	f002 ff7f 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <HAL_Init+0x44>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	490b      	ldr	r1, [pc, #44]	@ (80018e4 <HAL_Init+0x48>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_Init+0x4c>)
 80018be:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80018c0:	2004      	movs	r0, #4
 80018c2:	f001 f881 	bl	80029c8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c6:	200f      	movs	r0, #15
 80018c8:	f7ff fea6 	bl	8001618 <HAL_InitTick>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e002      	b.n	80018dc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018d6:	f7ff fb09 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	44020c00 	.word	0x44020c00
 80018e4:	0800770c 	.word	0x0800770c
 80018e8:	20000000 	.word	0x20000000

080018ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_IncTick+0x20>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_IncTick+0x24>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <HAL_IncTick+0x24>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008
 8001910:	20000604 	.word	0x20000604

08001914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_GetTick+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000604 	.word	0x20000604

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff ffee 	bl	8001914 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffde 	bl	8001914 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008

08001974 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80019ea:	f043 0202 	orr.w	r2, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001a0a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	42028000 	.word	0x42028000

08001a28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3360      	adds	r3, #96	@ 0x60
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <LL_ADC_SetOffset+0x44>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	4313      	orrs	r3, r2
 8001a58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a60:	bf00      	nop
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	03fff000 	.word	0x03fff000

08001a70 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3360      	adds	r3, #96	@ 0x60
 8001a7e:	461a      	mov	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3360      	adds	r3, #96	@ 0x60
 8001aac:	461a      	mov	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ac6:	bf00      	nop
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b087      	sub	sp, #28
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3360      	adds	r3, #96	@ 0x60
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001afc:	bf00      	nop
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3360      	adds	r3, #96	@ 0x60
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	615a      	str	r2, [r3, #20]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3330      	adds	r3, #48	@ 0x30
 8001b74:	461a      	mov	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	4413      	add	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	211f      	movs	r1, #31
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	0e9b      	lsrs	r3, r3, #26
 8001b9c:	f003 011f 	and.w	r1, r3, #31
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	431a      	orrs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3314      	adds	r3, #20
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	0e5b      	lsrs	r3, r3, #25
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	4413      	add	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	0d1b      	lsrs	r3, r3, #20
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2107      	movs	r1, #7
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	0d1b      	lsrs	r3, r3, #20
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	431a      	orrs	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0318 	and.w	r3, r3, #24
 8001c36:	4908      	ldr	r1, [pc, #32]	@ (8001c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c38:	40d9      	lsrs	r1, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c42:	431a      	orrs	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	000fffff 	.word	0x000fffff

08001c5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6093      	str	r3, [r2, #8]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c94:	d101      	bne.n	8001c9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ce4:	d101      	bne.n	8001cea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <LL_ADC_IsEnabled+0x18>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <LL_ADC_IsEnabled+0x1a>
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d101      	bne.n	8001d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d101      	bne.n	8001d5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e131      	b.n	8001fea <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff f8b1 	bl	8000efc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff67 	bl	8001c80 <LL_ADC_IsDeepPowerDownEnabled>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d004      	beq.n	8001dc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff4d 	bl	8001c5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff82 	bl	8001cd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d115      	bne.n	8001dfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff66 	bl	8001ca8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ddc:	4b85      	ldr	r3, [pc, #532]	@ (8001ff4 <HAL_ADC_Init+0x288>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	099b      	lsrs	r3, r3, #6
 8001de2:	4a85      	ldr	r2, [pc, #532]	@ (8001ff8 <HAL_ADC_Init+0x28c>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001df0:	e002      	b.n	8001df8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f9      	bne.n	8001df2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff64 	bl	8001cd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10d      	bne.n	8001e2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e12:	f043 0210 	orr.w	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff75 	bl	8001d1e <LL_ADC_REG_IsConversionOngoing>
 8001e34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 80ca 	bne.w	8001fd8 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 80c6 	bne.w	8001fd8 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e54:	f043 0202 	orr.w	r2, r3, #2
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff49 	bl	8001cf8 <LL_ADC_IsEnabled>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e6c:	4863      	ldr	r0, [pc, #396]	@ (8001ffc <HAL_ADC_Init+0x290>)
 8001e6e:	f7ff ff43 	bl	8001cf8 <LL_ADC_IsEnabled>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4860      	ldr	r0, [pc, #384]	@ (8002000 <HAL_ADC_Init+0x294>)
 8001e80:	f7ff fd78 	bl	8001974 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e5b      	ldrb	r3, [r3, #25]
 8001e88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d106      	bne.n	8001ec0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	045b      	lsls	r3, r3, #17
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b48      	ldr	r3, [pc, #288]	@ (8002004 <HAL_ADC_Init+0x298>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	69b9      	ldr	r1, [r7, #24]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff1a 	bl	8001d44 <LL_ADC_INJ_IsConversionOngoing>
 8001f10:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d13d      	bne.n	8001f94 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d13a      	bne.n	8001f94 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7e1b      	ldrb	r3, [r3, #24]
 8001f22:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f2a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f3a:	f023 0302 	bic.w	r3, r3, #2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	69b9      	ldr	r1, [r7, #24]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d118      	bne.n	8001f84 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f74:	430a      	orrs	r2, r1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	e007      	b.n	8001f94 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f023 010f 	bic.w	r1, r3, #15
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	1e5a      	subs	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fb4:	e007      	b.n	8001fc6 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 020f 	bic.w	r2, r2, #15
 8001fc4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	f023 0303 	bic.w	r3, r3, #3
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fd6:	e007      	b.n	8001fe8 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fdc:	f043 0210 	orr.w	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	053e2d63 	.word	0x053e2d63
 8001ffc:	42028000 	.word	0x42028000
 8002000:	42028300 	.word	0x42028300
 8002004:	fff04007 	.word	0xfff04007

08002008 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0b6      	sub	sp, #216	@ 0xd8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x22>
 8002026:	2302      	movs	r3, #2
 8002028:	e3d8      	b.n	80027dc <HAL_ADC_ConfigChannel+0x7d4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fe71 	bl	8001d1e <LL_ADC_REG_IsConversionOngoing>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 83bd 	bne.w	80027be <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d104      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fcd5 	bl	8001a00 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	f7ff fd7e 	bl	8001b64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fe56 	bl	8001d1e <LL_ADC_REG_IsConversionOngoing>
 8002072:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fe62 	bl	8001d44 <LL_ADC_INJ_IsConversionOngoing>
 8002080:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002084:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 81d9 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800208e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 81d4 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020a0:	d10f      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7ff fd85 	bl	8001bbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fd3f 	bl	8001b3e <LL_ADC_SetSamplingTimeCommonConfig>
 80020c0:	e00e      	b.n	80020e0 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	461a      	mov	r2, r3
 80020d0:	f7ff fd74 	bl	8001bbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fd2f 	bl	8001b3e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	08db      	lsrs	r3, r3, #3
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d022      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6919      	ldr	r1, [r3, #16]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002112:	f7ff fc89 	bl	8001a28 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6919      	ldr	r1, [r3, #16]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	461a      	mov	r2, r3
 8002124:	f7ff fcd5 	bl	8001ad2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002134:	2b01      	cmp	r3, #1
 8002136:	d102      	bne.n	800213e <HAL_ADC_ConfigChannel+0x136>
 8002138:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800213c:	e000      	b.n	8002140 <HAL_ADC_ConfigChannel+0x138>
 800213e:	2300      	movs	r3, #0
 8002140:	461a      	mov	r2, r3
 8002142:	f7ff fce1 	bl	8001b08 <LL_ADC_SetOffsetSaturation>
 8002146:	e17b      	b.n	8002440 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fc8e 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x16c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fc83 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	f003 021f 	and.w	r2, r3, #31
 8002172:	e01e      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1aa>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fc78 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8002192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002196:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 800219a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e004      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 80021a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x1c2>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	e018      	b.n	80021fc <HAL_ADC_ConfigChannel+0x1f4>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80021de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80021e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e004      	b.n	80021fc <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 80021f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d106      	bne.n	800220e <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fc47 	bl	8001a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fc2b 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <HAL_ADC_ConfigChannel+0x232>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fc20 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	e01e      	b.n	8002278 <HAL_ADC_ConfigChannel+0x270>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2101      	movs	r1, #1
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fc15 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800225c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e004      	b.n	8002276 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 800226c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x288>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	e018      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x2ba>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80022a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80022ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e004      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 80022b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d106      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	2101      	movs	r1, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fbe4 	bl	8001a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2102      	movs	r1, #2
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fbc8 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10a      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x2f8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2102      	movs	r1, #2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fbbd 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	f003 021f 	and.w	r2, r3, #31
 80022fe:	e01e      	b.n	800233e <HAL_ADC_ConfigChannel+0x336>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2102      	movs	r1, #2
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fbb2 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800231e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002326:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 800232e:	2320      	movs	r3, #32
 8002330:	e004      	b.n	800233c <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8002332:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x34e>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	e016      	b.n	8002384 <HAL_ADC_ConfigChannel+0x37c>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002368:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800236a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800236e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e004      	b.n	8002384 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 800237a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002384:	429a      	cmp	r2, r3
 8002386:	d106      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2200      	movs	r2, #0
 800238e:	2102      	movs	r1, #2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fb83 	bl	8001a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2103      	movs	r1, #3
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fb67 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x3ba>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2103      	movs	r1, #3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fb5c 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	e017      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x3ea>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2103      	movs	r1, #3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fb51 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80023da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80023de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e003      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 80023e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_ADC_ConfigChannel+0x402>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	e011      	b.n	800242e <HAL_ADC_ConfigChannel+0x426>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800241a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800241c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e003      	b.n	800242e <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8002426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800242e:	429a      	cmp	r2, r3
 8002430:	d106      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2200      	movs	r2, #0
 8002438:	2103      	movs	r1, #3
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fb2e 	bl	8001a9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fc57 	bl	8001cf8 <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 813f 	bne.w	80026d0 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	461a      	mov	r2, r3
 8002460:	f7ff fbd8 	bl	8001c14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a8e      	ldr	r2, [pc, #568]	@ (80026a4 <HAL_ADC_ConfigChannel+0x69c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	f040 8130 	bne.w	80026d0 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x490>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2b09      	cmp	r3, #9
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e019      	b.n	80024cc <HAL_ADC_ConfigChannel+0x4c4>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80024a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80024aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e003      	b.n	80024bc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80024b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2b09      	cmp	r3, #9
 80024c4:	bf94      	ite	ls
 80024c6:	2301      	movls	r3, #1
 80024c8:	2300      	movhi	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d079      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x4e4>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	3301      	adds	r3, #1
 80024e4:	069b      	lsls	r3, r3, #26
 80024e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ea:	e015      	b.n	8002518 <HAL_ADC_ConfigChannel+0x510>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80024fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e003      	b.n	8002510 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8002508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	3301      	adds	r3, #1
 8002512:	069b      	lsls	r3, r3, #26
 8002514:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x530>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	3301      	adds	r3, #1
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	e017      	b.n	8002568 <HAL_ADC_ConfigChannel+0x560>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002548:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800254a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e003      	b.n	800255c <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	ea42 0103 	orr.w	r1, r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_ADC_ConfigChannel+0x586>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	3301      	adds	r3, #1
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	051b      	lsls	r3, r3, #20
 800258c:	e018      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x5b8>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800259c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800259e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80025a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 80025a6:	2320      	movs	r3, #32
 80025a8:	e003      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 80025aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c0:	430b      	orrs	r3, r1
 80025c2:	e080      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x5d8>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	069b      	lsls	r3, r3, #26
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025de:	e015      	b.n	800260c <HAL_ADC_ConfigChannel+0x604>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80025ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e003      	b.n	8002604 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_ADC_ConfigChannel+0x624>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	e017      	b.n	800265c <HAL_ADC_ConfigChannel+0x654>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	61fb      	str	r3, [r7, #28]
  return result;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x680>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	3b1e      	subs	r3, #30
 8002680:	051b      	lsls	r3, r3, #20
 8002682:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002686:	e01d      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x6bc>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	613b      	str	r3, [r7, #16]
  return result;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e005      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x6a8>
 80026a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	f003 021f 	and.w	r2, r3, #31
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	3b1e      	subs	r3, #30
 80026be:	051b      	lsls	r3, r3, #20
 80026c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7ff fa76 	bl	8001bbc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b43      	ldr	r3, [pc, #268]	@ (80027e4 <HAL_ADC_ConfigChannel+0x7dc>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d079      	beq.n	80027d0 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026dc:	4842      	ldr	r0, [pc, #264]	@ (80027e8 <HAL_ADC_ConfigChannel+0x7e0>)
 80026de:	f7ff f96f 	bl	80019c0 <LL_ADC_GetCommonPathInternalCh>
 80026e2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a40      	ldr	r2, [pc, #256]	@ (80027ec <HAL_ADC_ConfigChannel+0x7e4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d124      	bne.n	800273a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d11e      	bne.n	800273a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3b      	ldr	r2, [pc, #236]	@ (80027f0 <HAL_ADC_ConfigChannel+0x7e8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d164      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800270a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800270e:	4619      	mov	r1, r3
 8002710:	4835      	ldr	r0, [pc, #212]	@ (80027e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002712:	f7ff f942 	bl	800199a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002716:	4b37      	ldr	r3, [pc, #220]	@ (80027f4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	4a36      	ldr	r2, [pc, #216]	@ (80027f8 <HAL_ADC_ConfigChannel+0x7f0>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	3301      	adds	r3, #1
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800272a:	e002      	b.n	8002732 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3b01      	subs	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f9      	bne.n	800272c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002738:	e04a      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2f      	ldr	r2, [pc, #188]	@ (80027fc <HAL_ADC_ConfigChannel+0x7f4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d113      	bne.n	800276c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10d      	bne.n	800276c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a26      	ldr	r2, [pc, #152]	@ (80027f0 <HAL_ADC_ConfigChannel+0x7e8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d13a      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800275a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800275e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002762:	4619      	mov	r1, r3
 8002764:	4820      	ldr	r0, [pc, #128]	@ (80027e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002766:	f7ff f918 	bl	800199a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800276a:	e031      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a23      	ldr	r2, [pc, #140]	@ (8002800 <HAL_ADC_ConfigChannel+0x7f8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d113      	bne.n	800279e <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800277a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1a      	ldr	r2, [pc, #104]	@ (80027f0 <HAL_ADC_ConfigChannel+0x7e8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d121      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800278c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002790:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002794:	4619      	mov	r1, r3
 8002796:	4814      	ldr	r0, [pc, #80]	@ (80027e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002798:	f7ff f8ff 	bl	800199a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 800279c:	e018      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a18      	ldr	r2, [pc, #96]	@ (8002804 <HAL_ADC_ConfigChannel+0x7fc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d113      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <HAL_ADC_ConfigChannel+0x7e8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00e      	beq.n	80027d0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f910 	bl	80019dc <LL_ADC_EnableChannelVDDcore>
 80027bc:	e008      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	f043 0220 	orr.w	r2, r3, #32
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80027d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80027dc:	4618      	mov	r0, r3
 80027de:	37d8      	adds	r7, #216	@ 0xd8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	80080000 	.word	0x80080000
 80027e8:	42028300 	.word	0x42028300
 80027ec:	c3210000 	.word	0xc3210000
 80027f0:	42028000 	.word	0x42028000
 80027f4:	20000000 	.word	0x20000000
 80027f8:	053e2d63 	.word	0x053e2d63
 80027fc:	88600004 	.word	0x88600004
 8002800:	c7520000 	.word	0xc7520000
 8002804:	99200040 	.word	0x99200040

08002808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283a:	4a04      	ldr	r2, [pc, #16]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db0b      	blt.n	8002896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4907      	ldr	r1, [pc, #28]	@ (80028a4 <__NVIC_EnableIRQ+0x38>)
 8002886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	@ 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ff4c 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002986:	f7ff ff63 	bl	8002850 <__NVIC_GetPriorityGrouping>
 800298a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	6978      	ldr	r0, [r7, #20]
 8002992:	f7ff ffb3 	bl	80028fc <NVIC_EncodePriority>
 8002996:	4602      	mov	r2, r0
 8002998:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff82 	bl	80028a8 <__NVIC_SetPriority>
}
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff56 	bl	800286c <__NVIC_EnableIRQ>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d844      	bhi.n	8002a60 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80029d6:	a201      	add	r2, pc, #4	@ (adr r2, 80029dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	080029ff 	.word	0x080029ff
 80029e0:	08002a1d 	.word	0x08002a1d
 80029e4:	08002a3f 	.word	0x08002a3f
 80029e8:	08002a61 	.word	0x08002a61
 80029ec:	080029f1 	.word	0x080029f1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	6013      	str	r3, [r2, #0]
      break;
 80029fc:	e031      	b.n	8002a62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1b      	ldr	r2, [pc, #108]	@ (8002a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a04:	f023 0304 	bic.w	r3, r3, #4
 8002a08:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a10:	4a18      	ldr	r2, [pc, #96]	@ (8002a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a12:	f023 030c 	bic.w	r3, r3, #12
 8002a16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002a1a:	e022      	b.n	8002a62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002a1c:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a22:	f023 0304 	bic.w	r3, r3, #4
 8002a26:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a2e:	f023 030c 	bic.w	r3, r3, #12
 8002a32:	4a10      	ldr	r2, [pc, #64]	@ (8002a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002a3c:	e011      	b.n	8002a62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a0b      	ldr	r2, [pc, #44]	@ (8002a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a50:	f023 030c 	bic.w	r3, r3, #12
 8002a54:	4a07      	ldr	r2, [pc, #28]	@ (8002a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a56:	f043 0308 	orr.w	r3, r3, #8
 8002a5a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002a5e:	e000      	b.n	8002a62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002a60:	bf00      	nop
  }
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010
 8002a74:	44020c00 	.word	0x44020c00

08002a78 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e014      	b.n	8002ab4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	791b      	ldrb	r3, [r3, #4]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fab0 	bl	8001000 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	@ 0x30
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_DAC_ConfigChannel+0x1e>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e19a      	b.n	8002e14 <HAL_DAC_ConfigChannel+0x358>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	795b      	ldrb	r3, [r3, #5]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_DAC_ConfigChannel+0x2e>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e194      	b.n	8002e14 <HAL_DAC_ConfigChannel+0x358>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2202      	movs	r2, #2
 8002af4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d17a      	bne.n	8002bf4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002afe:	f7fe ff09 	bl	8001914 <HAL_GetTick>
 8002b02:	6238      	str	r0, [r7, #32]

    if (Channel == DAC_CHANNEL_1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d13d      	bne.n	8002b86 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b0a:	e018      	b.n	8002b3e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b0c:	f7fe ff02 	bl	8001914 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d911      	bls.n	8002b3e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f043 0208 	orr.w	r2, r3, #8
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2203      	movs	r2, #3
 8002b38:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e16a      	b.n	8002e14 <HAL_DAC_ConfigChannel+0x358>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1df      	bne.n	8002b0c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	6a12      	ldr	r2, [r2, #32]
 8002b54:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b56:	e020      	b.n	8002b9a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b58:	f7fe fedc 	bl	8001914 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d90f      	bls.n	8002b86 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	da0a      	bge.n	8002b86 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f043 0208 	orr.w	r2, r3, #8
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2203      	movs	r2, #3
 8002b80:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e146      	b.n	8002e14 <HAL_DAC_ConfigChannel+0x358>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	dbe3      	blt.n	8002b58 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	6a12      	ldr	r2, [r2, #32]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	ea02 0103 	and.w	r1, r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	21ff      	movs	r1, #255	@ 0xff
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	ea02 0103 	and.w	r1, r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d11d      	bne.n	8002c38 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c02:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	221f      	movs	r2, #31
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c14:	4013      	ands	r3, r2
 8002c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	61fb      	str	r3, [r7, #28]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c36:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2207      	movs	r2, #7
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c50:	4013      	ands	r3, r2
 8002c52:	62bb      	str	r3, [r7, #40]	@ 0x28
#if !defined(TIM8)
  /* Devices STM32H503xx */
  /* On STM32H503EB (package WLCSP25) DAC channel 1 connection to GPIO is not available and should not be configured.
     Package information is stored at the address PACKAGE_BASE, WLCSP25 correspond to the value 0xF (For more
     information, please refer to the Reference Manual) */
  const __IO uint16_t *tmp_package = (uint16_t *)PACKAGE_BASE;
 8002c54:	4b71      	ldr	r3, [pc, #452]	@ (8002e1c <HAL_DAC_ConfigChannel+0x360>)
 8002c56:	61bb      	str	r3, [r7, #24]
  if ((*(tmp_package) & 0x1FUL) == 0x0FUL)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2b0f      	cmp	r3, #15
 8002c64:	d116      	bne.n	8002c94 <HAL_DAC_ConfigChannel+0x1d8>
  {
    if ((Channel == DAC_CHANNEL_1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d113      	bne.n	8002c94 <HAL_DAC_ConfigChannel+0x1d8>
        && ((sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d003      	beq.n	8002c7c <HAL_DAC_ConfigChannel+0x1c0>
            || (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH)))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d10b      	bne.n	8002c94 <HAL_DAC_ConfigChannel+0x1d8>
    {
      /* Update return status */
      status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

      /* Change the DAC state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2204      	movs	r2, #4
 8002c86:	711a      	strb	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_INVALID_CONFIG);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f043 0220 	orr.w	r2, r3, #32
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	611a      	str	r2, [r3, #16]
    }
  }
#endif /* Devices STM32H503xx */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HAL_DAC_ConfigChannel+0x1e6>
  {
    connectOnChip = 0x00000000UL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca0:	e00f      	b.n	8002cc2 <HAL_DAC_ConfigChannel+0x206>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d102      	bne.n	8002cb0 <HAL_DAC_ConfigChannel+0x1f4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002caa:	2301      	movs	r3, #1
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cae:	e008      	b.n	8002cc2 <HAL_DAC_ConfigChannel+0x206>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <HAL_DAC_ConfigChannel+0x202>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cbc:	e001      	b.n	8002cc2 <HAL_DAC_ConfigChannel+0x206>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	791b      	ldrb	r3, [r3, #4]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d102      	bne.n	8002cf6 <HAL_DAC_ConfigChannel+0x23a>
 8002cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cf4:	e000      	b.n	8002cf8 <HAL_DAC_ConfigChannel+0x23c>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d10:	4013      	ands	r3, r2
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	795b      	ldrb	r3, [r3, #5]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d102      	bne.n	8002d22 <HAL_DAC_ConfigChannel+0x266>
 8002d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d20:	e000      	b.n	8002d24 <HAL_DAC_ConfigChannel+0x268>
 8002d22:	2300      	movs	r3, #0
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d114      	bne.n	8002d64 <HAL_DAC_ConfigChannel+0x2a8>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002d3a:	f001 fe61 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8002d3e:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	4a37      	ldr	r2, [pc, #220]	@ (8002e20 <HAL_DAC_ConfigChannel+0x364>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d904      	bls.n	8002d52 <HAL_DAC_ConfigChannel+0x296>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d50:	e00f      	b.n	8002d72 <HAL_DAC_ConfigChannel+0x2b6>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4a33      	ldr	r2, [pc, #204]	@ (8002e24 <HAL_DAC_ConfigChannel+0x368>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d90a      	bls.n	8002d70 <HAL_DAC_ConfigChannel+0x2b4>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d62:	e006      	b.n	8002d72 <HAL_DAC_ConfigChannel+0x2b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d6e:	e000      	b.n	8002d72 <HAL_DAC_ConfigChannel+0x2b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002d70:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d80:	4313      	orrs	r3, r2
 8002d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43da      	mvns	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	400a      	ands	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61fb      	str	r3, [r7, #28]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002de6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	22c0      	movs	r2, #192	@ 0xc0
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	400a      	ands	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002e10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3730      	adds	r7, #48	@ 0x30
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	08fff80e 	.word	0x08fff80e
 8002e20:	09896800 	.word	0x09896800
 8002e24:	04c4b400 	.word	0x04c4b400

08002e28 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e36:	e136      	b.n	80030a6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	4013      	ands	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8128 	beq.w	80030a0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x38>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b12      	cmp	r3, #18
 8002e5e:	d125      	bne.n	8002eac <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e6c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	220f      	movs	r2, #15
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4013      	ands	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f003 020f 	and.w	r2, r3, #15
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d00b      	beq.n	8002f00 <HAL_GPIO_Init+0xd8>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d007      	beq.n	8002f00 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ef4:	2b11      	cmp	r3, #17
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b12      	cmp	r3, #18
 8002efe:	d130      	bne.n	8002f62 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4013      	ands	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f36:	2201      	movs	r2, #1
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4013      	ands	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	f003 0201 	and.w	r2, r3, #1
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d017      	beq.n	8002f9a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	2203      	movs	r2, #3
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d07c      	beq.n	80030a0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002fa6:	4a47      	ldr	r2, [pc, #284]	@ (80030c4 <HAL_GPIO_Init+0x29c>)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	089b      	lsrs	r3, r3, #2
 8002fac:	3318      	adds	r3, #24
 8002fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0a9a      	lsrs	r2, r3, #10
 8002fce:	4b3e      	ldr	r3, [pc, #248]	@ (80030c8 <HAL_GPIO_Init+0x2a0>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	f002 0203 	and.w	r2, r2, #3
 8002fd8:	00d2      	lsls	r2, r2, #3
 8002fda:	4093      	lsls	r3, r2
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002fe2:	4938      	ldr	r1, [pc, #224]	@ (80030c4 <HAL_GPIO_Init+0x29c>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	3318      	adds	r3, #24
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002ff0:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <HAL_GPIO_Init+0x29c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003014:	4a2b      	ldr	r2, [pc, #172]	@ (80030c4 <HAL_GPIO_Init+0x29c>)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800301a:	4b2a      	ldr	r3, [pc, #168]	@ (80030c4 <HAL_GPIO_Init+0x29c>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	43db      	mvns	r3, r3
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4013      	ands	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800303e:	4a21      	ldr	r2, [pc, #132]	@ (80030c4 <HAL_GPIO_Init+0x29c>)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003044:	4b1f      	ldr	r3, [pc, #124]	@ (80030c4 <HAL_GPIO_Init+0x29c>)
 8003046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800304a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43db      	mvns	r3, r3
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4013      	ands	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800306a:	4a16      	ldr	r2, [pc, #88]	@ (80030c4 <HAL_GPIO_Init+0x29c>)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003072:	4b14      	ldr	r3, [pc, #80]	@ (80030c4 <HAL_GPIO_Init+0x29c>)
 8003074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003078:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	43db      	mvns	r3, r3
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4013      	ands	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003098:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <HAL_GPIO_Init+0x29c>)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	3301      	adds	r3, #1
 80030a4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f47f aec1 	bne.w	8002e38 <HAL_GPIO_Init+0x10>
  }
}
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	44022000 	.word	0x44022000
 80030c8:	002f7f7f 	.word	0x002f7f7f

080030cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
 80030d8:	4613      	mov	r3, r2
 80030da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030dc:	787b      	ldrb	r3, [r7, #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030e8:	e002      	b.n	80030f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e08d      	b.n	800322a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fd ffcc 	bl	80010c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	@ 0x24
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800314c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800315c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	e006      	b.n	8003184 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003182:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d108      	bne.n	800319e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	e007      	b.n	80031ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69d9      	ldr	r1, [r3, #28]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1a      	ldr	r2, [r3, #32]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	461a      	mov	r2, r3
 8003240:	460b      	mov	r3, r1
 8003242:	817b      	strh	r3, [r7, #10]
 8003244:	4613      	mov	r3, r2
 8003246:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b20      	cmp	r3, #32
 8003252:	f040 80da 	bne.w	800340a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_I2C_Master_Transmit+0x30>
 8003260:	2302      	movs	r3, #2
 8003262:	e0d3      	b.n	800340c <HAL_I2C_Master_Transmit+0x1d8>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800326c:	f7fe fb52 	bl	8001914 <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2319      	movs	r3, #25
 8003278:	2201      	movs	r2, #1
 800327a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f8f0 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0be      	b.n	800340c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2221      	movs	r2, #33	@ 0x21
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2210      	movs	r2, #16
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	893a      	ldrh	r2, [r7, #8]
 80032ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2bff      	cmp	r3, #255	@ 0xff
 80032be:	d90e      	bls.n	80032de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	22ff      	movs	r2, #255	@ 0xff
 80032c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	8979      	ldrh	r1, [r7, #10]
 80032ce:	4b51      	ldr	r3, [pc, #324]	@ (8003414 <HAL_I2C_Master_Transmit+0x1e0>)
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fa88 	bl	80037ec <I2C_TransferConfig>
 80032dc:	e06c      	b.n	80033b8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	8979      	ldrh	r1, [r7, #10]
 80032f0:	4b48      	ldr	r3, [pc, #288]	@ (8003414 <HAL_I2C_Master_Transmit+0x1e0>)
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fa77 	bl	80037ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032fe:	e05b      	b.n	80033b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	6a39      	ldr	r1, [r7, #32]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f906 	bl	8003516 <I2C_WaitOnTXISFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e07b      	b.n	800340c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d034      	beq.n	80033b8 <HAL_I2C_Master_Transmit+0x184>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	d130      	bne.n	80033b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	2200      	movs	r2, #0
 800335e:	2180      	movs	r1, #128	@ 0x80
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f87f 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e04d      	b.n	800340c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	2bff      	cmp	r3, #255	@ 0xff
 8003378:	d90e      	bls.n	8003398 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	22ff      	movs	r2, #255	@ 0xff
 800337e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003384:	b2da      	uxtb	r2, r3
 8003386:	8979      	ldrh	r1, [r7, #10]
 8003388:	2300      	movs	r3, #0
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fa2b 	bl	80037ec <I2C_TransferConfig>
 8003396:	e00f      	b.n	80033b8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	8979      	ldrh	r1, [r7, #10]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fa1a 	bl	80037ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d19e      	bne.n	8003300 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	6a39      	ldr	r1, [r7, #32]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f8ec 	bl	80035a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e01a      	b.n	800340c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2220      	movs	r2, #32
 80033dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003418 <HAL_I2C_Master_Transmit+0x1e4>)
 80033ea:	400b      	ands	r3, r1
 80033ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	80002000 	.word	0x80002000
 8003418:	fe00e800 	.word	0xfe00e800

0800341c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d103      	bne.n	800343a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d007      	beq.n	8003458 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	619a      	str	r2, [r3, #24]
  }
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003474:	e03b      	b.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f8d6 	bl	800362c <I2C_IsErrorOccurred>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e041      	b.n	800350e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d02d      	beq.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003492:	f7fe fa3f 	bl	8001914 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d122      	bne.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4013      	ands	r3, r2
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d113      	bne.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e00f      	b.n	800350e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699a      	ldr	r2, [r3, #24]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	429a      	cmp	r2, r3
 800350a:	d0b4      	beq.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003522:	e033      	b.n	800358c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f87f 	bl	800362c <I2C_IsErrorOccurred>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e031      	b.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d025      	beq.n	800358c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003540:	f7fe f9e8 	bl	8001914 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	d302      	bcc.n	8003556 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d11a      	bne.n	800358c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b02      	cmp	r3, #2
 8003562:	d013      	beq.n	800358c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003568:	f043 0220 	orr.w	r2, r3, #32
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e007      	b.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d1c4      	bne.n	8003524 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035b0:	e02f      	b.n	8003612 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f838 	bl	800362c <I2C_IsErrorOccurred>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e02d      	b.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fe f9a5 	bl	8001914 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d11a      	bne.n	8003612 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d013      	beq.n	8003612 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e007      	b.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b20      	cmp	r3, #32
 800361e:	d1c8      	bne.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	@ 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	d068      	beq.n	800372a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2210      	movs	r2, #16
 800365e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003660:	e049      	b.n	80036f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d045      	beq.n	80036f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7fe f953 	bl	8001914 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_IsErrorOccurred+0x54>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d13a      	bne.n	80036f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800368a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003692:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800369e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a2:	d121      	bne.n	80036e8 <I2C_IsErrorOccurred+0xbc>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036aa:	d01d      	beq.n	80036e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d01a      	beq.n	80036e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036c2:	f7fe f927 	bl	8001914 <HAL_GetTick>
 80036c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c8:	e00e      	b.n	80036e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036ca:	f7fe f923 	bl	8001914 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b19      	cmp	r3, #25
 80036d6:	d907      	bls.n	80036e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	f043 0320 	orr.w	r3, r3, #32
 80036de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80036e6:	e006      	b.n	80036f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d1e9      	bne.n	80036ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b20      	cmp	r3, #32
 8003702:	d003      	beq.n	800370c <I2C_IsErrorOccurred+0xe0>
 8003704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0aa      	beq.n	8003662 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800370c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2220      	movs	r2, #32
 800371a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00b      	beq.n	8003754 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800374c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f043 0308 	orr.w	r3, r3, #8
 8003764:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800376e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	f043 0302 	orr.w	r3, r3, #2
 8003786:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003790:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01c      	beq.n	80037da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7ff fe3b 	bl	800341c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <I2C_IsErrorOccurred+0x1bc>)
 80037b2:	400b      	ands	r3, r1
 80037b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80037da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3728      	adds	r7, #40	@ 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	fe00e800 	.word	0xfe00e800

080037ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	817b      	strh	r3, [r7, #10]
 80037fa:	4613      	mov	r3, r2
 80037fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003804:	7a7b      	ldrb	r3, [r7, #9]
 8003806:	041b      	lsls	r3, r3, #16
 8003808:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800380c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	4313      	orrs	r3, r2
 8003816:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800381a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	0d5b      	lsrs	r3, r3, #21
 8003826:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800382a:	4b08      	ldr	r3, [pc, #32]	@ (800384c <I2C_TransferConfig+0x60>)
 800382c:	430b      	orrs	r3, r1
 800382e:	43db      	mvns	r3, r3
 8003830:	ea02 0103 	and.w	r1, r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	03ff63ff 	.word	0x03ff63ff

08003850 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	d138      	bne.n	80038d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003870:	2302      	movs	r3, #2
 8003872:	e032      	b.n	80038da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	@ 0x24
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d139      	bne.n	8003970 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003906:	2302      	movs	r3, #2
 8003908:	e033      	b.n	8003972 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2224      	movs	r2, #36	@ 0x24
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003938:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e000      	b.n	8003972 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
  }
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
 800399c:	e007      	b.n	80039ae <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 0204 	bic.w	r2, r3, #4
 80039a6:	4905      	ldr	r1, [pc, #20]	@ (80039bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
  }

  return status;
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40030400 	.word	0x40030400

080039c0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80039c4:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <HAL_ICACHE_Enable+0x1c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a04      	ldr	r2, [pc, #16]	@ (80039dc <HAL_ICACHE_Enable+0x1c>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40030400 	.word	0x40030400

080039e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0c3      	b.n	8003b7a <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd fdcc 	bl	80015a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2203      	movs	r2, #3
 8003a10:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f003 fdd9 	bl	80075d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e03f      	b.n	8003aa4 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	3315      	adds	r3, #21
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	3314      	adds	r3, #20
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	440b      	add	r3, r1
 8003a5a:	3317      	adds	r3, #23
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3324      	adds	r3, #36	@ 0x24
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	440b      	add	r3, r1
 8003a82:	3328      	adds	r3, #40	@ 0x28
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	440b      	add	r3, r1
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	791b      	ldrb	r3, [r3, #4]
 8003aa8:	7bfa      	ldrb	r2, [r7, #15]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d3ba      	bcc.n	8003a24 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
 8003ab2:	e044      	b.n	8003b3e <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	440b      	add	r3, r1
 8003ac2:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	440b      	add	r3, r1
 8003aee:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003af6:	7bfa      	ldrb	r2, [r7, #15]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	440b      	add	r3, r1
 8003b30:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	791b      	ldrb	r3, [r3, #4]
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d3b5      	bcc.n	8003ab4 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7c1a      	ldrb	r2, [r3, #16]
 8003b50:	f88d 2000 	strb.w	r2, [sp]
 8003b54:	3304      	adds	r3, #4
 8003b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b58:	f003 fd72 	bl	8007640 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	7b1b      	ldrb	r3, [r3, #12]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f805 	bl	8003b82 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba4:	f043 0201 	orr.w	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb0:	f043 0202 	orr.w	r2, r3, #2
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f000 bc28 	b.w	800442c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bdc:	4b94      	ldr	r3, [pc, #592]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f003 0318 	and.w	r3, r3, #24
 8003be4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003be6:	4b92      	ldr	r3, [pc, #584]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d05b      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d005      	beq.n	8003c0e <HAL_RCC_OscConfig+0x46>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b18      	cmp	r3, #24
 8003c06:	d114      	bne.n	8003c32 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d111      	bne.n	8003c32 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f000 bc08 	b.w	800442c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003c1c:	4b84      	ldr	r3, [pc, #528]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	4981      	ldr	r1, [pc, #516]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003c30:	e040      	b.n	8003cb4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d023      	beq.n	8003c82 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c3a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd fe65 	bl	8001914 <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fe61 	bl	8001914 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e3e5      	b.n	800442c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003c60:	4b73      	ldr	r3, [pc, #460]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003c6c:	4b70      	ldr	r3, [pc, #448]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	496d      	ldr	r1, [pc, #436]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	618b      	str	r3, [r1, #24]
 8003c80:	e018      	b.n	8003cb4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c82:	4b6b      	ldr	r3, [pc, #428]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6a      	ldr	r2, [pc, #424]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd fe41 	bl	8001914 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003c96:	f7fd fe3d 	bl	8001914 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e3c1      	b.n	800442c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003ca8:	4b61      	ldr	r3, [pc, #388]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80a0 	beq.w	8003e02 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x10c>
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b18      	cmp	r3, #24
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 8092 	bne.w	8003e02 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e3a4      	b.n	800442c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_OscConfig+0x132>
 8003cec:	4b50      	ldr	r3, [pc, #320]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	e058      	b.n	8003dac <HAL_RCC_OscConfig+0x1e4>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d112      	bne.n	8003d28 <HAL_RCC_OscConfig+0x160>
 8003d02:	4b4b      	ldr	r3, [pc, #300]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a4a      	ldr	r2, [pc, #296]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b48      	ldr	r3, [pc, #288]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a47      	ldr	r2, [pc, #284]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b45      	ldr	r3, [pc, #276]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a44      	ldr	r2, [pc, #272]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e041      	b.n	8003dac <HAL_RCC_OscConfig+0x1e4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d30:	d112      	bne.n	8003d58 <HAL_RCC_OscConfig+0x190>
 8003d32:	4b3f      	ldr	r3, [pc, #252]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a3e      	ldr	r2, [pc, #248]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a3b      	ldr	r2, [pc, #236]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b39      	ldr	r3, [pc, #228]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a38      	ldr	r2, [pc, #224]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e029      	b.n	8003dac <HAL_RCC_OscConfig+0x1e4>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003d60:	d112      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1c0>
 8003d62:	4b33      	ldr	r3, [pc, #204]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a32      	ldr	r2, [pc, #200]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b30      	ldr	r3, [pc, #192]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2f      	ldr	r2, [pc, #188]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e011      	b.n	8003dac <HAL_RCC_OscConfig+0x1e4>
 8003d88:	4b29      	ldr	r3, [pc, #164]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a28      	ldr	r2, [pc, #160]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b26      	ldr	r3, [pc, #152]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a25      	ldr	r2, [pc, #148]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b23      	ldr	r3, [pc, #140]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a22      	ldr	r2, [pc, #136]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003da6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fdae 	bl	8001914 <HAL_GetTick>
 8003db8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003dbc:	f7fd fdaa 	bl	8001914 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	@ 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e32e      	b.n	800442c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dce:	4b18      	ldr	r3, [pc, #96]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x1f4>
 8003dda:	e012      	b.n	8003e02 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fd9a 	bl	8001914 <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fd96 	bl	8001914 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e31a      	b.n	800442c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e30 <HAL_RCC_OscConfig+0x268>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 809a 	beq.w	8003f44 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_RCC_OscConfig+0x25a>
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	2b18      	cmp	r3, #24
 8003e1a:	d149      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d146      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e2fe      	b.n	800442c <HAL_RCC_OscConfig+0x864>
 8003e2e:	bf00      	nop
 8003e30:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003e3a:	4b9a      	ldr	r3, [pc, #616]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0218 	and.w	r2, r3, #24
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d014      	beq.n	8003e74 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003e4a:	4b96      	ldr	r3, [pc, #600]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 0218 	bic.w	r2, r3, #24
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	4993      	ldr	r1, [pc, #588]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003e5c:	f000 fdd0 	bl	8004a00 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e60:	4b91      	ldr	r3, [pc, #580]	@ (80040a8 <HAL_RCC_OscConfig+0x4e0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd fbd7 	bl	8001618 <HAL_InitTick>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e2db      	b.n	800442c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd fd4e 	bl	8001914 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003e7c:	f7fd fd4a 	bl	8001914 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e2ce      	b.n	800442c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e8e:	4b85      	ldr	r3, [pc, #532]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003e9a:	4b82      	ldr	r3, [pc, #520]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	497e      	ldr	r1, [pc, #504]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003eae:	e049      	b.n	8003f44 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d02c      	beq.n	8003f12 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003eb8:	4b7a      	ldr	r3, [pc, #488]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 0218 	bic.w	r2, r3, #24
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	4977      	ldr	r1, [pc, #476]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003eca:	4b76      	ldr	r3, [pc, #472]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a75      	ldr	r2, [pc, #468]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fd fd1d 	bl	8001914 <HAL_GetTick>
 8003eda:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003ede:	f7fd fd19 	bl	8001914 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e29d      	b.n	800442c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003efc:	4b69      	ldr	r3, [pc, #420]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	4966      	ldr	r1, [pc, #408]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	610b      	str	r3, [r1, #16]
 8003f10:	e018      	b.n	8003f44 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f12:	4b64      	ldr	r3, [pc, #400]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a63      	ldr	r2, [pc, #396]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1e:	f7fd fcf9 	bl	8001914 <HAL_GetTick>
 8003f22:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f26:	f7fd fcf5 	bl	8001914 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e279      	b.n	800442c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f38:	4b5a      	ldr	r3, [pc, #360]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d03c      	beq.n	8003fca <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01c      	beq.n	8003f92 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f58:	4b52      	ldr	r3, [pc, #328]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f5e:	4a51      	ldr	r2, [pc, #324]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f68:	f7fd fcd4 	bl	8001914 <HAL_GetTick>
 8003f6c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003f70:	f7fd fcd0 	bl	8001914 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e254      	b.n	800442c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f82:	4b48      	ldr	r3, [pc, #288]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ef      	beq.n	8003f70 <HAL_RCC_OscConfig+0x3a8>
 8003f90:	e01b      	b.n	8003fca <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f92:	4b44      	ldr	r3, [pc, #272]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f98:	4a42      	ldr	r2, [pc, #264]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa2:	f7fd fcb7 	bl	8001914 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003faa:	f7fd fcb3 	bl	8001914 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e237      	b.n	800442c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003fbc:	4b39      	ldr	r3, [pc, #228]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1ef      	bne.n	8003faa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80d2 	beq.w	800417c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003fd8:	4b34      	ldr	r3, [pc, #208]	@ (80040ac <HAL_RCC_OscConfig+0x4e4>)
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d118      	bne.n	8004016 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003fe4:	4b31      	ldr	r3, [pc, #196]	@ (80040ac <HAL_RCC_OscConfig+0x4e4>)
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	4a30      	ldr	r2, [pc, #192]	@ (80040ac <HAL_RCC_OscConfig+0x4e4>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff0:	f7fd fc90 	bl	8001914 <HAL_GetTick>
 8003ff4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff8:	f7fd fc8c 	bl	8001914 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e210      	b.n	800442c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800400a:	4b28      	ldr	r3, [pc, #160]	@ (80040ac <HAL_RCC_OscConfig+0x4e4>)
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d108      	bne.n	8004030 <HAL_RCC_OscConfig+0x468>
 800401e:	4b21      	ldr	r3, [pc, #132]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004024:	4a1f      	ldr	r2, [pc, #124]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800402e:	e074      	b.n	800411a <HAL_RCC_OscConfig+0x552>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d118      	bne.n	800406a <HAL_RCC_OscConfig+0x4a2>
 8004038:	4b1a      	ldr	r3, [pc, #104]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 800403a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800403e:	4a19      	ldr	r2, [pc, #100]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004048:	4b16      	ldr	r3, [pc, #88]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 800404a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800404e:	4a15      	ldr	r2, [pc, #84]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004054:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004058:	4b12      	ldr	r3, [pc, #72]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 800405a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800405e:	4a11      	ldr	r2, [pc, #68]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004068:	e057      	b.n	800411a <HAL_RCC_OscConfig+0x552>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b05      	cmp	r3, #5
 8004070:	d11e      	bne.n	80040b0 <HAL_RCC_OscConfig+0x4e8>
 8004072:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004078:	4a0a      	ldr	r2, [pc, #40]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004082:	4b08      	ldr	r3, [pc, #32]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004088:	4a06      	ldr	r2, [pc, #24]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 800408a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800408e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004092:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004098:	4a02      	ldr	r2, [pc, #8]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040a2:	e03a      	b.n	800411a <HAL_RCC_OscConfig+0x552>
 80040a4:	44020c00 	.word	0x44020c00
 80040a8:	20000004 	.word	0x20000004
 80040ac:	44020800 	.word	0x44020800
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b85      	cmp	r3, #133	@ 0x85
 80040b6:	d118      	bne.n	80040ea <HAL_RCC_OscConfig+0x522>
 80040b8:	4ba2      	ldr	r3, [pc, #648]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80040ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040be:	4aa1      	ldr	r2, [pc, #644]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80040c0:	f043 0304 	orr.w	r3, r3, #4
 80040c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040c8:	4b9e      	ldr	r3, [pc, #632]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80040ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040ce:	4a9d      	ldr	r2, [pc, #628]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80040d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040d8:	4b9a      	ldr	r3, [pc, #616]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80040da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040de:	4a99      	ldr	r2, [pc, #612]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040e8:	e017      	b.n	800411a <HAL_RCC_OscConfig+0x552>
 80040ea:	4b96      	ldr	r3, [pc, #600]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80040ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040f0:	4a94      	ldr	r2, [pc, #592]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040fa:	4b92      	ldr	r3, [pc, #584]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80040fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004100:	4a90      	ldr	r2, [pc, #576]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004102:	f023 0304 	bic.w	r3, r3, #4
 8004106:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800410a:	4b8e      	ldr	r3, [pc, #568]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 800410c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004110:	4a8c      	ldr	r2, [pc, #560]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004116:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004122:	f7fd fbf7 	bl	8001914 <HAL_GetTick>
 8004126:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004128:	e00a      	b.n	8004140 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412a:	f7fd fbf3 	bl	8001914 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004138:	4293      	cmp	r3, r2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e175      	b.n	800442c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004140:	4b80      	ldr	r3, [pc, #512]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0ed      	beq.n	800412a <HAL_RCC_OscConfig+0x562>
 800414e:	e015      	b.n	800417c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fd fbe0 	bl	8001914 <HAL_GetTick>
 8004154:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004156:	e00a      	b.n	800416e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004158:	f7fd fbdc 	bl	8001914 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e15e      	b.n	800442c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800416e:	4b75      	ldr	r3, [pc, #468]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ed      	bne.n	8004158 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d036      	beq.n	80041f6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	2b00      	cmp	r3, #0
 800418e:	d019      	beq.n	80041c4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004190:	4b6c      	ldr	r3, [pc, #432]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a6b      	ldr	r2, [pc, #428]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004196:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800419a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fd fbba 	bl	8001914 <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80041a4:	f7fd fbb6 	bl	8001914 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e13a      	b.n	800442c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041b6:	4b63      	ldr	r3, [pc, #396]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x5dc>
 80041c2:	e018      	b.n	80041f6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041c4:	4b5f      	ldr	r3, [pc, #380]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80041ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fd fba0 	bl	8001914 <HAL_GetTick>
 80041d4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80041d8:	f7fd fb9c 	bl	8001914 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e120      	b.n	800442c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041ea:	4b56      	ldr	r3, [pc, #344]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8115 	beq.w	800442a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b18      	cmp	r3, #24
 8004204:	f000 80af 	beq.w	8004366 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	2b02      	cmp	r3, #2
 800420e:	f040 8086 	bne.w	800431e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004212:	4b4c      	ldr	r3, [pc, #304]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a4b      	ldr	r2, [pc, #300]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004218:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800421c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421e:	f7fd fb79 	bl	8001914 <HAL_GetTick>
 8004222:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004226:	f7fd fb75 	bl	8001914 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0f9      	b.n	800442c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004238:	4b42      	ldr	r3, [pc, #264]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f0      	bne.n	8004226 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004244:	4b3f      	ldr	r3, [pc, #252]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800424c:	f023 0303 	bic.w	r3, r3, #3
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004258:	0212      	lsls	r2, r2, #8
 800425a:	430a      	orrs	r2, r1
 800425c:	4939      	ldr	r1, [pc, #228]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	628b      	str	r3, [r1, #40]	@ 0x28
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004266:	3b01      	subs	r3, #1
 8004268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	3b01      	subs	r3, #1
 8004272:	025b      	lsls	r3, r3, #9
 8004274:	b29b      	uxth	r3, r3
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427c:	3b01      	subs	r3, #1
 800427e:	041b      	lsls	r3, r3, #16
 8004280:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	3b01      	subs	r3, #1
 800428c:	061b      	lsls	r3, r3, #24
 800428e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004292:	492c      	ldr	r1, [pc, #176]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004294:	4313      	orrs	r3, r2
 8004296:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004298:	4b2a      	ldr	r3, [pc, #168]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	4a29      	ldr	r2, [pc, #164]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 800429e:	f023 0310 	bic.w	r3, r3, #16
 80042a2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a8:	4a26      	ldr	r2, [pc, #152]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80042ae:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b2:	4a24      	ldr	r2, [pc, #144]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042b4:	f043 0310 	orr.w	r3, r3, #16
 80042b8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80042ba:	4b22      	ldr	r3, [pc, #136]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042be:	f023 020c 	bic.w	r2, r3, #12
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	491f      	ldr	r1, [pc, #124]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80042cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	f023 0220 	bic.w	r2, r3, #32
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d8:	491a      	ldr	r1, [pc, #104]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042de:	4b19      	ldr	r3, [pc, #100]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e2:	4a18      	ldr	r2, [pc, #96]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80042ea:	4b16      	ldr	r3, [pc, #88]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a15      	ldr	r2, [pc, #84]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 80042f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7fd fb0d 	bl	8001914 <HAL_GetTick>
 80042fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80042fe:	f7fd fb09 	bl	8001914 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e08d      	b.n	800442c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004310:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x736>
 800431c:	e085      	b.n	800442a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800431e:	4b09      	ldr	r3, [pc, #36]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a08      	ldr	r2, [pc, #32]	@ (8004344 <HAL_RCC_OscConfig+0x77c>)
 8004324:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432a:	f7fd faf3 	bl	8001914 <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004332:	f7fd faef 	bl	8001914 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d903      	bls.n	8004348 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e073      	b.n	800442c <HAL_RCC_OscConfig+0x864>
 8004344:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004348:	4b3a      	ldr	r3, [pc, #232]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ee      	bne.n	8004332 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004354:	4b37      	ldr	r3, [pc, #220]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	4a36      	ldr	r2, [pc, #216]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 800435a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	6293      	str	r3, [r2, #40]	@ 0x28
 8004364:	e061      	b.n	800442a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004366:	4b33      	ldr	r3, [pc, #204]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800436c:	4b31      	ldr	r3, [pc, #196]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 800436e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004370:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	2b01      	cmp	r3, #1
 8004378:	d031      	beq.n	80043de <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f003 0203 	and.w	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d12a      	bne.n	80043de <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004394:	429a      	cmp	r2, r3
 8004396:	d122      	bne.n	80043de <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d11a      	bne.n	80043de <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	0a5b      	lsrs	r3, r3, #9
 80043ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d111      	bne.n	80043de <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d108      	bne.n	80043de <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	0e1b      	lsrs	r3, r3, #24
 80043d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e024      	b.n	800442c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80043e2:	4b14      	ldr	r3, [pc, #80]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 80043e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e6:	08db      	lsrs	r3, r3, #3
 80043e8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d01a      	beq.n	800442a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80043f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 80043fa:	f023 0310 	bic.w	r3, r3, #16
 80043fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd fa88 	bl	8001914 <HAL_GetTick>
 8004404:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004406:	bf00      	nop
 8004408:	f7fd fa84 	bl	8001914 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4293      	cmp	r3, r2
 8004412:	d0f9      	beq.n	8004408 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004418:	4a06      	ldr	r2, [pc, #24]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800441e:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 8004420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004422:	4a04      	ldr	r2, [pc, #16]	@ (8004434 <HAL_RCC_OscConfig+0x86c>)
 8004424:	f043 0310 	orr.w	r3, r3, #16
 8004428:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	44020c00 	.word	0x44020c00

08004438 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e19e      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800444c:	4b83      	ldr	r3, [pc, #524]	@ (800465c <HAL_RCC_ClockConfig+0x224>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d910      	bls.n	800447c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445a:	4b80      	ldr	r3, [pc, #512]	@ (800465c <HAL_RCC_ClockConfig+0x224>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 020f 	bic.w	r2, r3, #15
 8004462:	497e      	ldr	r1, [pc, #504]	@ (800465c <HAL_RCC_ClockConfig+0x224>)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	4313      	orrs	r3, r2
 8004468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b7c      	ldr	r3, [pc, #496]	@ (800465c <HAL_RCC_ClockConfig+0x224>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e186      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d012      	beq.n	80044ae <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	4b74      	ldr	r3, [pc, #464]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004496:	429a      	cmp	r2, r3
 8004498:	d909      	bls.n	80044ae <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800449a:	4b71      	ldr	r3, [pc, #452]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	496d      	ldr	r1, [pc, #436]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d012      	beq.n	80044e0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	4b68      	ldr	r3, [pc, #416]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d909      	bls.n	80044e0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80044cc:	4b64      	ldr	r3, [pc, #400]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	4961      	ldr	r1, [pc, #388]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d010      	beq.n	800450e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	4b5b      	ldr	r3, [pc, #364]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d908      	bls.n	800450e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80044fc:	4b58      	ldr	r3, [pc, #352]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4955      	ldr	r1, [pc, #340]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 800450a:	4313      	orrs	r3, r2
 800450c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d010      	beq.n	800453c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	4b50      	ldr	r3, [pc, #320]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	429a      	cmp	r2, r3
 8004528:	d908      	bls.n	800453c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800452a:	4b4d      	ldr	r3, [pc, #308]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f023 020f 	bic.w	r2, r3, #15
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	494a      	ldr	r1, [pc, #296]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 8004538:	4313      	orrs	r3, r2
 800453a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8093 	beq.w	8004670 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004552:	4b43      	ldr	r3, [pc, #268]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d121      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e113      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800456a:	4b3d      	ldr	r3, [pc, #244]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d115      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e107      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004582:	4b37      	ldr	r3, [pc, #220]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0fb      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004592:	4b33      	ldr	r3, [pc, #204]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e0f3      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80045a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f023 0203 	bic.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	492c      	ldr	r1, [pc, #176]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b4:	f7fd f9ae 	bl	8001914 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d112      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c2:	e00a      	b.n	80045da <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80045c4:	f7fd f9a6 	bl	8001914 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0d7      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045da:	4b21      	ldr	r3, [pc, #132]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 0318 	and.w	r3, r3, #24
 80045e2:	2b18      	cmp	r3, #24
 80045e4:	d1ee      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x18c>
 80045e6:	e043      	b.n	8004670 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d112      	bne.n	8004616 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045f0:	e00a      	b.n	8004608 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80045f2:	f7fd f98f 	bl	8001914 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004600:	4293      	cmp	r3, r2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e0c0      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004608:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f003 0318 	and.w	r3, r3, #24
 8004610:	2b10      	cmp	r3, #16
 8004612:	d1ee      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x1ba>
 8004614:	e02c      	b.n	8004670 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d122      	bne.n	8004664 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004620:	f7fd f978 	bl	8001914 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0a9      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <HAL_RCC_ClockConfig+0x228>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 0318 	and.w	r3, r3, #24
 800463e:	2b08      	cmp	r3, #8
 8004640:	d1ee      	bne.n	8004620 <HAL_RCC_ClockConfig+0x1e8>
 8004642:	e015      	b.n	8004670 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004644:	f7fd f966 	bl	8001914 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d906      	bls.n	8004664 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e097      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
 800465a:	bf00      	nop
 800465c:	40022000 	.word	0x40022000
 8004660:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004664:	4b4b      	ldr	r3, [pc, #300]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f003 0318 	and.w	r3, r3, #24
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e9      	bne.n	8004644 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d010      	beq.n	800469e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	4b44      	ldr	r3, [pc, #272]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	429a      	cmp	r2, r3
 800468a:	d208      	bcs.n	800469e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800468c:	4b41      	ldr	r3, [pc, #260]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f023 020f 	bic.w	r2, r3, #15
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	493e      	ldr	r1, [pc, #248]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 800469a:	4313      	orrs	r3, r2
 800469c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800469e:	4b3e      	ldr	r3, [pc, #248]	@ (8004798 <HAL_RCC_ClockConfig+0x360>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d210      	bcs.n	80046ce <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004798 <HAL_RCC_ClockConfig+0x360>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f023 020f 	bic.w	r2, r3, #15
 80046b4:	4938      	ldr	r1, [pc, #224]	@ (8004798 <HAL_RCC_ClockConfig+0x360>)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046bc:	4b36      	ldr	r3, [pc, #216]	@ (8004798 <HAL_RCC_ClockConfig+0x360>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d001      	beq.n	80046ce <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e05d      	b.n	800478a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	4b2d      	ldr	r3, [pc, #180]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d208      	bcs.n	80046fc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80046ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	4927      	ldr	r1, [pc, #156]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d012      	beq.n	800472e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	4b21      	ldr	r3, [pc, #132]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004716:	429a      	cmp	r2, r3
 8004718:	d209      	bcs.n	800472e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800471a:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	491a      	ldr	r1, [pc, #104]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	d012      	beq.n	8004760 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004748:	429a      	cmp	r2, r3
 800474a:	d209      	bcs.n	8004760 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800474c:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	490e      	ldr	r1, [pc, #56]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004760:	f000 f822 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8004764:	4602      	mov	r2, r0
 8004766:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <HAL_RCC_ClockConfig+0x35c>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	490b      	ldr	r1, [pc, #44]	@ (800479c <HAL_RCC_ClockConfig+0x364>)
 8004770:	5ccb      	ldrb	r3, [r1, r3]
 8004772:	fa22 f303 	lsr.w	r3, r2, r3
 8004776:	4a0a      	ldr	r2, [pc, #40]	@ (80047a0 <HAL_RCC_ClockConfig+0x368>)
 8004778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800477a:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <HAL_RCC_ClockConfig+0x36c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7fc ff4a 	bl	8001618 <HAL_InitTick>
 8004784:	4603      	mov	r3, r0
 8004786:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004788:	7afb      	ldrb	r3, [r7, #11]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	44020c00 	.word	0x44020c00
 8004798:	40022000 	.word	0x40022000
 800479c:	0800770c 	.word	0x0800770c
 80047a0:	20000000 	.word	0x20000000
 80047a4:	20000004 	.word	0x20000004

080047a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b089      	sub	sp, #36	@ 0x24
 80047ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80047ae:	4b8c      	ldr	r3, [pc, #560]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f003 0318 	and.w	r3, r3, #24
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d102      	bne.n	80047c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80047ba:	4b8a      	ldr	r3, [pc, #552]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x23c>)
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	e107      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047c0:	4b87      	ldr	r3, [pc, #540]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f003 0318 	and.w	r3, r3, #24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d112      	bne.n	80047f2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80047cc:	4b84      	ldr	r3, [pc, #528]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047d8:	4b81      	ldr	r3, [pc, #516]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	08db      	lsrs	r3, r3, #3
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	4a81      	ldr	r2, [pc, #516]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	e0f1      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80047ec:	4b7e      	ldr	r3, [pc, #504]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	e0ee      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047f2:	4b7b      	ldr	r3, [pc, #492]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f003 0318 	and.w	r3, r3, #24
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d102      	bne.n	8004804 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047fe:	4b7b      	ldr	r3, [pc, #492]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x244>)
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	e0e5      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004804:	4b76      	ldr	r3, [pc, #472]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f003 0318 	and.w	r3, r3, #24
 800480c:	2b18      	cmp	r3, #24
 800480e:	f040 80dd 	bne.w	80049cc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004812:	4b73      	ldr	r3, [pc, #460]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800481c:	4b70      	ldr	r3, [pc, #448]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	0a1b      	lsrs	r3, r3, #8
 8004822:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004826:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004828:	4b6d      	ldr	r3, [pc, #436]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800482a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004834:	4b6a      	ldr	r3, [pc, #424]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004838:	08db      	lsrs	r3, r3, #3
 800483a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	fb02 f303 	mul.w	r3, r2, r3
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80b7 	beq.w	80049c6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d003      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0xbe>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d056      	beq.n	8004912 <HAL_RCC_GetSysClockFreq+0x16a>
 8004864:	e077      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004866:	4b5e      	ldr	r3, [pc, #376]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d02d      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004872:	4b5b      	ldr	r3, [pc, #364]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	08db      	lsrs	r3, r3, #3
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	4a5a      	ldr	r2, [pc, #360]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x240>)
 800487e:	fa22 f303 	lsr.w	r3, r2, r3
 8004882:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489c:	4b50      	ldr	r3, [pc, #320]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800489e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a4:	ee07 3a90 	vmov	s15, r3
 80048a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80048ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80048b0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80049f0 <HAL_RCC_GetSysClockFreq+0x248>
 80048b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80048bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80048cc:	e065      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80049f4 <HAL_RCC_GetSysClockFreq+0x24c>
 80048dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e0:	4b3f      	ldr	r3, [pc, #252]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80048e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80048f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80048f4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80049f0 <HAL_RCC_GetSysClockFreq+0x248>
 80048f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004900:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004904:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004910:	e043      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80049f8 <HAL_RCC_GetSysClockFreq+0x250>
 8004920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004924:	4b2e      	ldr	r3, [pc, #184]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004934:	ed97 6a02 	vldr	s12, [r7, #8]
 8004938:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80049f0 <HAL_RCC_GetSysClockFreq+0x248>
 800493c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004940:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004944:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004948:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800494c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004950:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004954:	e021      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	ee07 3a90 	vmov	s15, r3
 800495c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004960:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80049fc <HAL_RCC_GetSysClockFreq+0x254>
 8004964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004968:	4b1d      	ldr	r3, [pc, #116]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800496a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004978:	ed97 6a02 	vldr	s12, [r7, #8]
 800497c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80049f0 <HAL_RCC_GetSysClockFreq+0x248>
 8004980:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004984:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004988:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800498c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004994:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004998:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800499a:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800499c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499e:	0a5b      	lsrs	r3, r3, #9
 80049a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049a4:	3301      	adds	r3, #1
 80049a6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80049b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049be:	ee17 3a90 	vmov	r3, s15
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	e004      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	e001      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80049cc:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80049ce:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80049d0:	69fb      	ldr	r3, [r7, #28]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3724      	adds	r7, #36	@ 0x24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	44020c00 	.word	0x44020c00
 80049e4:	003d0900 	.word	0x003d0900
 80049e8:	03d09000 	.word	0x03d09000
 80049ec:	017d7840 	.word	0x017d7840
 80049f0:	46000000 	.word	0x46000000
 80049f4:	4c742400 	.word	0x4c742400
 80049f8:	4bbebc20 	.word	0x4bbebc20
 80049fc:	4a742400 	.word	0x4a742400

08004a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a04:	f7ff fed0 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b08      	ldr	r3, [pc, #32]	@ (8004a2c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004a0e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a12:	4907      	ldr	r1, [pc, #28]	@ (8004a30 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a14:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004a16:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	4a05      	ldr	r2, [pc, #20]	@ (8004a34 <HAL_RCC_GetHCLKFreq+0x34>)
 8004a20:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004a22:	4b04      	ldr	r3, [pc, #16]	@ (8004a34 <HAL_RCC_GetHCLKFreq+0x34>)
 8004a24:	681b      	ldr	r3, [r3, #0]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	44020c00 	.word	0x44020c00
 8004a30:	0800770c 	.word	0x0800770c
 8004a34:	20000000 	.word	0x20000000

08004a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004a3c:	f7ff ffe0 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b06      	ldr	r3, [pc, #24]	@ (8004a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4904      	ldr	r1, [pc, #16]	@ (8004a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	44020c00 	.word	0x44020c00
 8004a60:	0800771c 	.word	0x0800771c

08004a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004a68:	f7ff ffca 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4904      	ldr	r1, [pc, #16]	@ (8004a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	44020c00 	.word	0x44020c00
 8004a8c:	0800771c 	.word	0x0800771c

08004a90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	221f      	movs	r2, #31
 8004a9e:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004aa0:	4b15      	ldr	r3, [pc, #84]	@ (8004af8 <HAL_RCC_GetClockConfig+0x68>)
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f003 0203 	and.w	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8004aac:	4b12      	ldr	r3, [pc, #72]	@ (8004af8 <HAL_RCC_GetClockConfig+0x68>)
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 020f 	and.w	r2, r3, #15
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ade:	4b07      	ldr	r3, [pc, #28]	@ (8004afc <HAL_RCC_GetClockConfig+0x6c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 020f 	and.w	r2, r3, #15
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	601a      	str	r2, [r3, #0]
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	44020c00 	.word	0x44020c00
 8004afc:	40022000 	.word	0x40022000

08004b00 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b04:	b0aa      	sub	sp, #168	@ 0xa8
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004b24:	2500      	movs	r5, #0
 8004b26:	ea54 0305 	orrs.w	r3, r4, r5
 8004b2a:	d00b      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004b2c:	4bb8      	ldr	r3, [pc, #736]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b32:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004b36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3c:	4ab4      	ldr	r2, [pc, #720]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f002 0801 	and.w	r8, r2, #1
 8004b50:	f04f 0900 	mov.w	r9, #0
 8004b54:	ea58 0309 	orrs.w	r3, r8, r9
 8004b58:	d038      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004b5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b60:	2b05      	cmp	r3, #5
 8004b62:	d819      	bhi.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004b64:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004b85 	.word	0x08004b85
 8004b74:	08004b99 	.word	0x08004b99
 8004b78:	08004ba1 	.word	0x08004ba1
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba1 	.word	0x08004ba1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b88:	3308      	adds	r3, #8
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 ff46 	bl	8005a1c <RCCEx_PLL2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004b96:	e004      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8004ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004baa:	4b99      	ldr	r3, [pc, #612]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004bb0:	f023 0107 	bic.w	r1, r3, #7
 8004bb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bba:	4a95      	ldr	r2, [pc, #596]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004bc2:	e003      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004bc8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f002 0a02 	and.w	sl, r2, #2
 8004bd8:	f04f 0b00 	mov.w	fp, #0
 8004bdc:	ea5a 030b 	orrs.w	r3, sl, fp
 8004be0:	d03c      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	2b28      	cmp	r3, #40	@ 0x28
 8004bea:	d01b      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8004bec:	2b28      	cmp	r3, #40	@ 0x28
 8004bee:	d815      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d019      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d811      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004bf8:	2b18      	cmp	r3, #24
 8004bfa:	d017      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004bfc:	2b18      	cmp	r3, #24
 8004bfe:	d80d      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d015      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d109      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 ff04 	bl	8005a1c <RCCEx_PLL2_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004c22:	e006      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004c24:	bf00      	nop
 8004c26:	e004      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004c28:	bf00      	nop
 8004c2a:	e002      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004c2c:	bf00      	nop
 8004c2e:	e000      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c32:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004c3a:	4b75      	ldr	r3, [pc, #468]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c40:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4a:	4a71      	ldr	r2, [pc, #452]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c52:	e003      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004c58:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f002 0304 	and.w	r3, r2, #4
 8004c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c72:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004c76:	460b      	mov	r3, r1
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	d040      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c82:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004c86:	d01e      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004c88:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004c8c:	d817      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c92:	d01a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8004c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c98:	d811      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c9c:	d017      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004c9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ca0:	d80d      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d015      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8004ca6:	2b40      	cmp	r3, #64	@ 0x40
 8004ca8:	d109      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cae:	3308      	adds	r3, #8
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 feb3 	bl	8005a1c <RCCEx_PLL2_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004cc6:	bf00      	nop
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004cca:	bf00      	nop
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10c      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004cdc:	4b4c      	ldr	r3, [pc, #304]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ce2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004ce6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cec:	4a48      	ldr	r2, [pc, #288]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004cf4:	e003      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004cfa:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d14:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	d043      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d28:	d021      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004d2a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d2e:	d81a      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d34:	d01d      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004d36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d3a:	d814      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004d3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d40:	d019      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d46:	d80e      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d016      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d50:	d109      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d56:	3308      	adds	r3, #8
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fe5f 	bl	8005a1c <RCCEx_PLL2_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004d64:	e00a      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004d6c:	e006      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004d6e:	bf00      	nop
 8004d70:	e004      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004d72:	bf00      	nop
 8004d74:	e002      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004d76:	bf00      	nop
 8004d78:	e000      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10c      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004d84:	4b22      	ldr	r3, [pc, #136]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d8a:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004d8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d94:	4a1e      	ldr	r2, [pc, #120]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d96:	430b      	orrs	r3, r1
 8004d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d9c:	e003      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004da2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004da6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004db2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004db4:	2300      	movs	r3, #0
 8004db6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004db8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	d03e      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004dc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dcc:	d01b      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8004dce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dd2:	d814      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004dd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dd8:	d017      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004dda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dde:	d80e      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d017      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de8:	d109      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dee:	3308      	adds	r3, #8
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fe13 	bl	8005a1c <RCCEx_PLL2_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004dfc:	e00b      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004e04:	e007      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004e06:	bf00      	nop
 8004e08:	e005      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004e0a:	bf00      	nop
 8004e0c:	e003      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004e0e:	bf00      	nop
 8004e10:	44020c00 	.word	0x44020c00
        break;
 8004e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e16:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004e1e:	4ba5      	ldr	r3, [pc, #660]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004e20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e24:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2e:	4aa1      	ldr	r2, [pc, #644]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004e30:	430b      	orrs	r3, r1
 8004e32:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e3c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e4e:	2300      	movs	r3, #0
 8004e50:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e52:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e56:	460b      	mov	r3, r1
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	d03b      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004e5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e66:	d01b      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8004e68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e6c:	d814      	bhi.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004e6e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e72:	d017      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004e74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e78:	d80e      	bhi.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d014      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8004e7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e82:	d109      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e88:	3308      	adds	r3, #8
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fdc6 	bl	8005a1c <RCCEx_PLL2_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004e96:	e008      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004e9e:	e004      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004ea0:	bf00      	nop
 8004ea2:	e002      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004ea4:	bf00      	nop
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004eb2:	4b80      	ldr	r3, [pc, #512]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004eb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004eb8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004ebc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec2:	4a7c      	ldr	r2, [pc, #496]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004eca:	e003      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ecc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ed0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004ed4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ee0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ee6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d033      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004ef0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004efa:	d015      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004efc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f00:	d80e      	bhi.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d012      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f0a:	d109      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f10:	3308      	adds	r3, #8
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fd82 	bl	8005a1c <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004f1e:	e006      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004f26:	e002      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004f28:	bf00      	nop
 8004f2a:	e000      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f2e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004f36:	4b5f      	ldr	r3, [pc, #380]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004f38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f3c:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004f40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f46:	4a5b      	ldr	r2, [pc, #364]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f4e:	e003      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f50:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f54:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	2100      	movs	r1, #0
 8004f62:	6639      	str	r1, [r7, #96]	@ 0x60
 8004f64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f68:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f6a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4313      	orrs	r3, r2
 8004f72:	d033      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004f74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f7e:	d015      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8004f80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f84:	d80e      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d012      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004f8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f8e:	d109      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f94:	3308      	adds	r3, #8
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fd40 	bl	8005a1c <RCCEx_PLL2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004fa2:	e006      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004faa:	e002      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004fac:	bf00      	nop
 8004fae:	e000      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004fba:	4b3e      	ldr	r3, [pc, #248]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004fbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fc0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fca:	4a3a      	ldr	r2, [pc, #232]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004fd2:	e003      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004fd8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004fdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004ffe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005002:	61d3      	str	r3, [r2, #28]
 8005004:	4b2b      	ldr	r3, [pc, #172]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005006:	69d9      	ldr	r1, [r3, #28]
 8005008:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800500c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005010:	4a28      	ldr	r2, [pc, #160]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005012:	430b      	orrs	r3, r1
 8005014:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005016:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005022:	653b      	str	r3, [r7, #80]	@ 0x50
 8005024:	2300      	movs	r3, #0
 8005026:	657b      	str	r3, [r7, #84]	@ 0x54
 8005028:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800502c:	460b      	mov	r3, r1
 800502e:	4313      	orrs	r3, r2
 8005030:	d046      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005032:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005038:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800503c:	d021      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800503e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005042:	d81a      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005048:	d01d      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504e:	d814      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005050:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005054:	d019      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8005056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800505a:	d80e      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d016      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8005060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005064:	d109      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005066:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800506a:	3308      	adds	r3, #8
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fcd5 	bl	8005a1c <RCCEx_PLL2_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005078:	e00a      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005080:	e006      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005082:	bf00      	nop
 8005084:	e004      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005086:	bf00      	nop
 8005088:	e002      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800508e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005090:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10f      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005098:	4b06      	ldr	r3, [pc, #24]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800509a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800509e:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80050a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a8:	4a02      	ldr	r2, [pc, #8]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80050aa:	430b      	orrs	r3, r1
 80050ac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80050b0:	e006      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80050b2:	bf00      	nop
 80050b4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80050bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80050cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050ce:	2300      	movs	r3, #0
 80050d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80050d6:	460b      	mov	r3, r1
 80050d8:	4313      	orrs	r3, r2
 80050da:	d043      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80050dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050e6:	d021      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80050e8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050ec:	d81a      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80050ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050f2:	d01d      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80050f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050f8:	d814      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80050fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050fe:	d019      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005100:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005104:	d80e      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d016      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800510a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800510e:	d109      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005110:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005114:	3308      	adds	r3, #8
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fc80 	bl	8005a1c <RCCEx_PLL2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005122:	e00a      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800512a:	e006      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800512c:	bf00      	nop
 800512e:	e004      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005130:	bf00      	nop
 8005132:	e002      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10c      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005142:	4bb6      	ldr	r3, [pc, #728]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005144:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005148:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800514c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005152:	4ab2      	ldr	r2, [pc, #712]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005154:	430b      	orrs	r3, r1
 8005156:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800515a:	e003      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005160:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005164:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005170:	643b      	str	r3, [r7, #64]	@ 0x40
 8005172:	2300      	movs	r3, #0
 8005174:	647b      	str	r3, [r7, #68]	@ 0x44
 8005176:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800517a:	460b      	mov	r3, r1
 800517c:	4313      	orrs	r3, r2
 800517e:	d030      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005180:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005186:	2b05      	cmp	r3, #5
 8005188:	d80f      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800518a:	2b03      	cmp	r3, #3
 800518c:	d211      	bcs.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800518e:	2b01      	cmp	r3, #1
 8005190:	d911      	bls.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8005192:	2b02      	cmp	r3, #2
 8005194:	d109      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005196:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800519a:	3308      	adds	r3, #8
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fc3d 	bl	8005a1c <RCCEx_PLL2_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80051a8:	e006      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80051b0:	e002      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80051b2:	bf00      	nop
 80051b4:	e000      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80051b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10c      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80051c0:	4b96      	ldr	r3, [pc, #600]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80051c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051c6:	f023 0107 	bic.w	r1, r3, #7
 80051ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051d0:	4a92      	ldr	r2, [pc, #584]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80051d2:	430b      	orrs	r3, r1
 80051d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80051d8:	e003      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051de:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80051e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	2100      	movs	r1, #0
 80051ec:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80051f8:	460b      	mov	r3, r1
 80051fa:	4313      	orrs	r3, r2
 80051fc:	d022      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80051fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005202:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8005208:	2b08      	cmp	r3, #8
 800520a:	d005      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005212:	e002      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8005218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10c      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005222:	4b7e      	ldr	r3, [pc, #504]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005228:	f023 0108 	bic.w	r1, r3, #8
 800522c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005232:	4a7a      	ldr	r2, [pc, #488]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005234:	430b      	orrs	r3, r1
 8005236:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800523a:	e003      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005240:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005244:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005250:	633b      	str	r3, [r7, #48]	@ 0x30
 8005252:	2300      	movs	r3, #0
 8005254:	637b      	str	r3, [r7, #52]	@ 0x34
 8005256:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	f000 80b0 	beq.w	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005262:	4b6f      	ldr	r3, [pc, #444]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	4a6e      	ldr	r2, [pc, #440]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800526e:	f7fc fb51 	bl	8001914 <HAL_GetTick>
 8005272:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005276:	e00b      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005278:	f7fc fb4c 	bl	8001914 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d903      	bls.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800528e:	e005      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005290:	4b63      	ldr	r3, [pc, #396]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0ed      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 800529c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 808a 	bne.w	80053ba <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052a6:	4b5d      	ldr	r3, [pc, #372]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80052b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d022      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80052bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d01b      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052ca:	4b54      	ldr	r3, [pc, #336]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052d8:	4b50      	ldr	r3, [pc, #320]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052de:	4a4f      	ldr	r2, [pc, #316]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052e8:	4b4c      	ldr	r3, [pc, #304]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052ee:	4a4b      	ldr	r2, [pc, #300]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052f8:	4a48      	ldr	r2, [pc, #288]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005302:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d019      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530e:	f7fc fb01 	bl	8001914 <HAL_GetTick>
 8005312:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005316:	e00d      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f7fc fafc 	bl	8001914 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005328:	4293      	cmp	r3, r2
 800532a:	d903      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8005332:	e006      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005334:	4b39      	ldr	r3, [pc, #228]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0ea      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8005342:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d132      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800534a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800534e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005350:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005354:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005358:	d10f      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800535a:	4b30      	ldr	r3, [pc, #192]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005362:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005366:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800536e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005372:	4a2a      	ldr	r2, [pc, #168]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005374:	430b      	orrs	r3, r1
 8005376:	61d3      	str	r3, [r2, #28]
 8005378:	e005      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800537a:	4b28      	ldr	r3, [pc, #160]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	4a27      	ldr	r2, [pc, #156]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005380:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005384:	61d3      	str	r3, [r2, #28]
 8005386:	4b25      	ldr	r3, [pc, #148]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800538c:	4a23      	ldr	r2, [pc, #140]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800538e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005392:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005396:	4b21      	ldr	r3, [pc, #132]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005398:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800539c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a6:	4a1d      	ldr	r2, [pc, #116]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80053a8:	430b      	orrs	r3, r1
 80053aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80053ae:	e008      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053b4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 80053b8:	e003      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ba:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053be:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80053ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053d0:	2300      	movs	r3, #0
 80053d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80053d8:	460b      	mov	r3, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	d038      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80053de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e4:	2b30      	cmp	r3, #48	@ 0x30
 80053e6:	d014      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80053e8:	2b30      	cmp	r3, #48	@ 0x30
 80053ea:	d80e      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d012      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x916>
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d80a      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d015      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d106      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053fc:	4b07      	ldr	r3, [pc, #28]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80053fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005400:	4a06      	ldr	r2, [pc, #24]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005406:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005408:	e00d      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005410:	e009      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005412:	bf00      	nop
 8005414:	e007      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005416:	bf00      	nop
 8005418:	e005      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800541a:	bf00      	nop
 800541c:	44020c00 	.word	0x44020c00
 8005420:	44020800 	.word	0x44020800
        break;
 8005424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005426:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10c      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800542e:	4bb5      	ldr	r3, [pc, #724]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005434:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005438:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800543c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800543e:	49b1      	ldr	r1, [pc, #708]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005446:	e003      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800544c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005450:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800545c:	623b      	str	r3, [r7, #32]
 800545e:	2300      	movs	r3, #0
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
 8005462:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005466:	460b      	mov	r3, r1
 8005468:	4313      	orrs	r3, r2
 800546a:	d03c      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800546c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005472:	2b04      	cmp	r3, #4
 8005474:	d81d      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8005476:	a201      	add	r2, pc, #4	@ (adr r2, 800547c <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	08005491 	.word	0x08005491
 8005480:	0800549f 	.word	0x0800549f
 8005484:	080054b3 	.word	0x080054b3
 8005488:	080054bb 	.word	0x080054bb
 800548c:	080054bb 	.word	0x080054bb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005490:	4b9c      	ldr	r3, [pc, #624]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	4a9b      	ldr	r2, [pc, #620]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800549a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800549c:	e00e      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800549e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054a2:	3308      	adds	r3, #8
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fab9 	bl	8005a1c <RCCEx_PLL2_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80054b0:	e004      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80054b8:	e000      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 80054ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10c      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80054c4:	4b8f      	ldr	r3, [pc, #572]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80054c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054ca:	f023 0207 	bic.w	r2, r3, #7
 80054ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054d4:	498b      	ldr	r1, [pc, #556]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80054dc:	e003      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054de:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054e2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80054e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80054fc:	460b      	mov	r3, r1
 80054fe:	4313      	orrs	r3, r2
 8005500:	d03c      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005502:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005508:	2b20      	cmp	r3, #32
 800550a:	d01f      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800550c:	2b20      	cmp	r3, #32
 800550e:	d819      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005510:	2b18      	cmp	r3, #24
 8005512:	d01d      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005514:	2b18      	cmp	r3, #24
 8005516:	d815      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800551c:	2b08      	cmp	r3, #8
 800551e:	d007      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005520:	e010      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005522:	4b78      	ldr	r3, [pc, #480]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	4a77      	ldr	r2, [pc, #476]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800552c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800552e:	e010      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005530:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005534:	3308      	adds	r3, #8
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fa70 	bl	8005a1c <RCCEx_PLL2_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005542:	e006      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800554a:	e002      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005552:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10c      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800555a:	4b6a      	ldr	r3, [pc, #424]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800555c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005560:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005564:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556a:	4966      	ldr	r1, [pc, #408]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005572:	e003      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005574:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005578:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800557c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005584:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005592:	460b      	mov	r3, r1
 8005594:	4313      	orrs	r3, r2
 8005596:	d03e      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005598:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800559c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800559e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a2:	d020      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80055a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a8:	d819      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xade>
 80055aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80055ac:	d01d      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80055ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80055b0:	d815      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xade>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xabc>
 80055b6:	2b40      	cmp	r3, #64	@ 0x40
 80055b8:	d007      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80055ba:	e010      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055bc:	4b51      	ldr	r3, [pc, #324]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80055be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c0:	4a50      	ldr	r2, [pc, #320]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80055c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80055c8:	e010      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055ce:	3308      	adds	r3, #8
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fa23 	bl	8005a1c <RCCEx_PLL2_Config>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80055dc:	e006      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80055e4:	e002      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80055e6:	bf00      	nop
 80055e8:	e000      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80055ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10c      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80055f4:	4b43      	ldr	r3, [pc, #268]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80055f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055fa:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80055fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005604:	493f      	ldr	r1, [pc, #252]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800560c:	e003      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005612:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005616:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	2100      	movs	r1, #0
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800562c:	460b      	mov	r3, r1
 800562e:	4313      	orrs	r3, r2
 8005630:	d038      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005632:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800563c:	d00e      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800563e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005642:	d815      	bhi.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d017      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8005648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800564c:	d110      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564e:	4b2d      	ldr	r3, [pc, #180]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005652:	4a2c      	ldr	r2, [pc, #176]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005658:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800565a:	e00e      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800565c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005660:	3308      	adds	r3, #8
 8005662:	4618      	mov	r0, r3
 8005664:	f000 f9da 	bl	8005a1c <RCCEx_PLL2_Config>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800566e:	e004      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005676:	e000      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8005678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10c      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005682:	4b20      	ldr	r3, [pc, #128]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800568c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005692:	491c      	ldr	r1, [pc, #112]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800569a:	e003      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	2100      	movs	r1, #0
 80056ae:	6039      	str	r1, [r7, #0]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	607b      	str	r3, [r7, #4]
 80056b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80056ba:	460b      	mov	r3, r1
 80056bc:	4313      	orrs	r3, r2
 80056be:	d039      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80056c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056c6:	2b30      	cmp	r3, #48	@ 0x30
 80056c8:	d01e      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80056ca:	2b30      	cmp	r3, #48	@ 0x30
 80056cc:	d815      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	d002      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d007      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80056d6:	e010      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056dc:	4a09      	ldr	r2, [pc, #36]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80056de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056e2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80056e4:	e011      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056ea:	3308      	adds	r3, #8
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 f995 	bl	8005a1c <RCCEx_PLL2_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80056f8:	e007      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005700:	e003      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8005702:	bf00      	nop
 8005704:	44020c00 	.word	0x44020c00
        break;
 8005708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10c      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005712:	4b0c      	ldr	r3, [pc, #48]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005714:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005718:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800571c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005722:	4908      	ldr	r1, [pc, #32]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800572a:	e003      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005730:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005734:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8005738:	4618      	mov	r0, r3
 800573a:	37a8      	adds	r7, #168	@ 0xa8
 800573c:	46bd      	mov	sp, r7
 800573e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005742:	bf00      	nop
 8005744:	44020c00 	.word	0x44020c00

08005748 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005748:	b480      	push	{r7}
 800574a:	b08b      	sub	sp, #44	@ 0x2c
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005750:	4bad      	ldr	r3, [pc, #692]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005758:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800575a:	4bab      	ldr	r3, [pc, #684]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005764:	4ba8      	ldr	r3, [pc, #672]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	0a1b      	lsrs	r3, r3, #8
 800576a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800576e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005770:	4ba5      	ldr	r3, [pc, #660]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800577a:	4ba3      	ldr	r3, [pc, #652]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	08db      	lsrs	r3, r3, #3
 8005780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005792:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8126 	beq.w	80059ea <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d053      	beq.n	800584c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d86f      	bhi.n	800588a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d003      	beq.n	80057b8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d02b      	beq.n	800580e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80057b6:	e068      	b.n	800588a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057b8:	4b93      	ldr	r3, [pc, #588]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	08db      	lsrs	r3, r3, #3
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	4a92      	ldr	r2, [pc, #584]	@ (8005a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
 80057c8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80057f0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80057f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005808:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800580c:	e068      	b.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	ee07 3a90 	vmov	s15, r3
 8005814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005818:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800581c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582a:	ed97 6a04 	vldr	s12, [r7, #16]
 800582e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800583e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005846:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800584a:	e049      	b.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005856:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800585a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005868:	ed97 6a04 	vldr	s12, [r7, #16]
 800586c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005878:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800587c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005884:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005888:	e02a      	b.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800588a:	4b5f      	ldr	r3, [pc, #380]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	08db      	lsrs	r3, r3, #3
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	4a5d      	ldr	r2, [pc, #372]	@ (8005a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058be:	ed97 6a04 	vldr	s12, [r7, #16]
 80058c2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80058c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80058de:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058e0:	4b49      	ldr	r3, [pc, #292]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058ec:	d121      	bne.n	8005932 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80058ee:	4b46      	ldr	r3, [pc, #280]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80058f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d017      	beq.n	800592a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058fa:	4b43      	ldr	r3, [pc, #268]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80058fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fe:	0a5b      	lsrs	r3, r3, #9
 8005900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800590c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005910:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005914:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800591c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005920:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e006      	b.n	8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005938:	4b33      	ldr	r3, [pc, #204]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005944:	d121      	bne.n	800598a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005946:	4b30      	ldr	r3, [pc, #192]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d017      	beq.n	8005982 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005952:	4b2d      	ldr	r3, [pc, #180]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005956:	0c1b      	lsrs	r3, r3, #16
 8005958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005964:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005968:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800596c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005978:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	605a      	str	r2, [r3, #4]
 8005980:	e006      	b.n	8005990 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	605a      	str	r2, [r3, #4]
 8005988:	e002      	b.n	8005990 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005990:	4b1d      	ldr	r3, [pc, #116]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800599c:	d121      	bne.n	80059e2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800599e:	4b1a      	ldr	r3, [pc, #104]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d017      	beq.n	80059da <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059aa:	4b17      	ldr	r3, [pc, #92]	@ (8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ae:	0e1b      	lsrs	r3, r3, #24
 80059b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059b4:	ee07 3a90 	vmov	s15, r3
 80059b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80059bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80059c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80059c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059d0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80059d8:	e010      	b.n	80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	609a      	str	r2, [r3, #8]
}
 80059e0:	e00c      	b.n	80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	e008      	b.n	80059fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	609a      	str	r2, [r3, #8]
}
 80059fc:	bf00      	nop
 80059fe:	372c      	adds	r7, #44	@ 0x2c
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	44020c00 	.word	0x44020c00
 8005a0c:	03d09000 	.word	0x03d09000
 8005a10:	46000000 	.word	0x46000000
 8005a14:	4a742400 	.word	0x4a742400
 8005a18:	4bbebc20 	.word	0x4bbebc20

08005a1c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005a24:	4b48      	ldr	r3, [pc, #288]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a47      	ldr	r2, [pc, #284]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005a2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a2e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a30:	f7fb ff70 	bl	8001914 <HAL_GetTick>
 8005a34:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a36:	e008      	b.n	8005a4a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a38:	f7fb ff6c 	bl	8001914 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e07a      	b.n	8005b40 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f0      	bne.n	8005a38 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005a56:	4b3c      	ldr	r3, [pc, #240]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6811      	ldr	r1, [r2, #0]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6852      	ldr	r2, [r2, #4]
 8005a6a:	0212      	lsls	r2, r2, #8
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	4936      	ldr	r1, [pc, #216]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	025b      	lsls	r3, r3, #9
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	041b      	lsls	r3, r3, #16
 8005a92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	061b      	lsls	r3, r3, #24
 8005aa0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005aa4:	4928      	ldr	r1, [pc, #160]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005aaa:	4b27      	ldr	r3, [pc, #156]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	f023 020c 	bic.w	r2, r3, #12
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	4924      	ldr	r1, [pc, #144]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005abc:	4b22      	ldr	r3, [pc, #136]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac0:	f023 0220 	bic.w	r2, r3, #32
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	491f      	ldr	r1, [pc, #124]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005ace:	4b1e      	ldr	r3, [pc, #120]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	491c      	ldr	r1, [pc, #112]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005adc:	4b1a      	ldr	r3, [pc, #104]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae0:	4a19      	ldr	r2, [pc, #100]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005ae2:	f023 0310 	bic.w	r3, r3, #16
 8005ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005ae8:	4b17      	ldr	r3, [pc, #92]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005af0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6a12      	ldr	r2, [r2, #32]
 8005af8:	00d2      	lsls	r2, r2, #3
 8005afa:	4913      	ldr	r1, [pc, #76]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005b00:	4b11      	ldr	r3, [pc, #68]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	4a10      	ldr	r2, [pc, #64]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005b06:	f043 0310 	orr.w	r3, r3, #16
 8005b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a0d      	ldr	r2, [pc, #52]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005b12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b18:	f7fb fefc 	bl	8001914 <HAL_GetTick>
 8005b1c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b1e:	e008      	b.n	8005b32 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b20:	f7fb fef8 	bl	8001914 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e006      	b.n	8005b40 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b32:	4b05      	ldr	r3, [pc, #20]	@ (8005b48 <RCCEx_PLL2_Config+0x12c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f0      	beq.n	8005b20 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0

}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	44020c00 	.word	0x44020c00

08005b4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e0e7      	b.n	8005d2e <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <HAL_SPI_Init+0x2c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b0f      	cmp	r3, #15
 8005b72:	d901      	bls.n	8005b78 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0da      	b.n	8005d2e <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f8e3 	bl	8005d44 <SPI_GetPacketSize>
 8005b7e:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <HAL_SPI_Init+0x42>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d811      	bhi.n	8005bb2 <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005b92:	4a69      	ldr	r2, [pc, #420]	@ (8005d38 <HAL_SPI_Init+0x1ec>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d009      	beq.n	8005bac <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a67      	ldr	r2, [pc, #412]	@ (8005d3c <HAL_SPI_Init+0x1f0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_SPI_Init+0x60>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a66      	ldr	r2, [pc, #408]	@ (8005d40 <HAL_SPI_Init+0x1f4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d104      	bne.n	8005bb6 <HAL_SPI_Init+0x6a>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	d901      	bls.n	8005bb6 <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e0bb      	b.n	8005d2e <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fb fb46 	bl	800125c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005bf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bfc:	d119      	bne.n	8005c32 <HAL_SPI_Init+0xe6>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c06:	d103      	bne.n	8005c10 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10c      	bne.n	8005c32 <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005c1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c20:	d107      	bne.n	8005c32 <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00f      	beq.n	8005c5e <HAL_SPI_Init+0x112>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b06      	cmp	r3, #6
 8005c44:	d90b      	bls.n	8005c5e <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	e007      	b.n	8005c6e <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69da      	ldr	r2, [r3, #28]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c76:	431a      	orrs	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c80:	ea42 0103 	orr.w	r1, r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cda:	ea42 0103 	orr.w	r1, r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40013000 	.word	0x40013000
 8005d3c:	40003800 	.word	0x40003800
 8005d40:	40003c00 	.word	0x40003c00

08005d44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	3307      	adds	r3, #7
 8005d62:	08db      	lsrs	r3, r3, #3
 8005d64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e049      	b.n	8005e20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f841 	bl	8005e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f000 fb75 	bl	80064a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d001      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e03b      	b.n	8005ecc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a19      	ldr	r2, [pc, #100]	@ (8005ed8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_TIM_Base_Start_IT+0x4e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e7e:	d004      	beq.n	8005e8a <HAL_TIM_Base_Start_IT+0x4e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a15      	ldr	r2, [pc, #84]	@ (8005edc <HAL_TIM_Base_Start_IT+0xa0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d115      	bne.n	8005eb6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	4b13      	ldr	r3, [pc, #76]	@ (8005ee0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b06      	cmp	r3, #6
 8005e9a:	d015      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x8c>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea2:	d011      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb4:	e008      	b.n	8005ec8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0201 	orr.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	e000      	b.n	8005eca <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	40012c00 	.word	0x40012c00
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	00010007 	.word	0x00010007

08005ee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e049      	b.n	8005f8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fb fa22 	bl	8001354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f000 fac0 	bl	80064a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d020      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01b      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f06f 0202 	mvn.w	r2, #2
 8005fc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fa45 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 8005fe2:	e005      	b.n	8005ff0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fa37 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fa48 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d020      	beq.n	8006042 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01b      	beq.n	8006042 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f06f 0204 	mvn.w	r2, #4
 8006012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa1f 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 800602e:	e005      	b.n	800603c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fa11 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa22 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d020      	beq.n	800608e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01b      	beq.n	800608e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f06f 0208 	mvn.w	r2, #8
 800605e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2204      	movs	r2, #4
 8006064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f9f9 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 800607a:	e005      	b.n	8006088 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f9eb 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9fc 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b00      	cmp	r3, #0
 8006096:	d020      	beq.n	80060da <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f003 0310 	and.w	r3, r3, #16
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01b      	beq.n	80060da <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f06f 0210 	mvn.w	r2, #16
 80060aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2208      	movs	r2, #8
 80060b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f9d3 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 80060c6:	e005      	b.n	80060d4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f9c5 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9d6 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00c      	beq.n	80060fe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f06f 0201 	mvn.w	r2, #1
 80060f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fa fedf 	bl	8000ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fce0 	bl	8006aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00c      	beq.n	8006150 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fcd8 	bl	8006b00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00c      	beq.n	8006174 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800616c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f990 	bl	8006494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00c      	beq.n	8006198 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0220 	mvn.w	r2, #32
 8006190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fca0 	bl	8006ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80061b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fcac 	bl	8006b14 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00c      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80061d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fca4 	bl	8006b28 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80061fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fc9c 	bl	8006b3c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fc94 	bl	8006b50 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800624a:	2302      	movs	r3, #2
 800624c:	e0ff      	b.n	800644e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b14      	cmp	r3, #20
 800625a:	f200 80f0 	bhi.w	800643e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800625e:	a201      	add	r2, pc, #4	@ (adr r2, 8006264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	080062b9 	.word	0x080062b9
 8006268:	0800643f 	.word	0x0800643f
 800626c:	0800643f 	.word	0x0800643f
 8006270:	0800643f 	.word	0x0800643f
 8006274:	080062f9 	.word	0x080062f9
 8006278:	0800643f 	.word	0x0800643f
 800627c:	0800643f 	.word	0x0800643f
 8006280:	0800643f 	.word	0x0800643f
 8006284:	0800633b 	.word	0x0800633b
 8006288:	0800643f 	.word	0x0800643f
 800628c:	0800643f 	.word	0x0800643f
 8006290:	0800643f 	.word	0x0800643f
 8006294:	0800637b 	.word	0x0800637b
 8006298:	0800643f 	.word	0x0800643f
 800629c:	0800643f 	.word	0x0800643f
 80062a0:	0800643f 	.word	0x0800643f
 80062a4:	080063bd 	.word	0x080063bd
 80062a8:	0800643f 	.word	0x0800643f
 80062ac:	0800643f 	.word	0x0800643f
 80062b0:	0800643f 	.word	0x0800643f
 80062b4:	080063fd 	.word	0x080063fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f958 	bl	8006574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0208 	orr.w	r2, r2, #8
 80062d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0204 	bic.w	r2, r2, #4
 80062e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6999      	ldr	r1, [r3, #24]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	619a      	str	r2, [r3, #24]
      break;
 80062f6:	e0a5      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f9a0 	bl	8006644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6999      	ldr	r1, [r3, #24]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	021a      	lsls	r2, r3, #8
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	619a      	str	r2, [r3, #24]
      break;
 8006338:	e084      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 f9ed 	bl	8006720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0208 	orr.w	r2, r2, #8
 8006354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0204 	bic.w	r2, r2, #4
 8006364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69d9      	ldr	r1, [r3, #28]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	61da      	str	r2, [r3, #28]
      break;
 8006378:	e064      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fa39 	bl	80067f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69d9      	ldr	r1, [r3, #28]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	021a      	lsls	r2, r3, #8
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	61da      	str	r2, [r3, #28]
      break;
 80063ba:	e043      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fa86 	bl	80068d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0208 	orr.w	r2, r2, #8
 80063d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0204 	bic.w	r2, r2, #4
 80063e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80063fa:	e023      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fab2 	bl	800696c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006416:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006426:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	021a      	lsls	r2, r3, #8
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800643c:	e002      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
      break;
 8006442:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800644c:	7dfb      	ldrb	r3, [r7, #23]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop

08006458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a2c      	ldr	r2, [pc, #176]	@ (800656c <TIM_Base_SetConfig+0xc4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_Base_SetConfig+0x28>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c6:	d003      	beq.n	80064d0 <TIM_Base_SetConfig+0x28>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a29      	ldr	r2, [pc, #164]	@ (8006570 <TIM_Base_SetConfig+0xc8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d108      	bne.n	80064e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a21      	ldr	r2, [pc, #132]	@ (800656c <TIM_Base_SetConfig+0xc4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_Base_SetConfig+0x52>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f0:	d003      	beq.n	80064fa <TIM_Base_SetConfig+0x52>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006570 <TIM_Base_SetConfig+0xc8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d108      	bne.n	800650c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a0e      	ldr	r2, [pc, #56]	@ (800656c <TIM_Base_SetConfig+0xc4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d103      	bne.n	8006540 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f023 0201 	bic.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	611a      	str	r2, [r3, #16]
  }
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40000400 	.word	0x40000400

08006574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f023 0201 	bic.w	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f023 0302 	bic.w	r3, r3, #2
 80065c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006640 <TIM_OC1_SetConfig+0xcc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d10c      	bne.n	80065ee <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f023 0308 	bic.w	r3, r3, #8
 80065da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 0304 	bic.w	r3, r3, #4
 80065ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a13      	ldr	r2, [pc, #76]	@ (8006640 <TIM_OC1_SetConfig+0xcc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d111      	bne.n	800661a <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	621a      	str	r2, [r3, #32]
}
 8006634:	bf00      	nop
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40012c00 	.word	0x40012c00

08006644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f023 0210 	bic.w	r2, r3, #16
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800667e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f023 0320 	bic.w	r3, r3, #32
 8006692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1e      	ldr	r2, [pc, #120]	@ (800671c <TIM_OC2_SetConfig+0xd8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d10d      	bne.n	80066c4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a15      	ldr	r2, [pc, #84]	@ (800671c <TIM_OC2_SetConfig+0xd8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d113      	bne.n	80066f4 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40012c00 	.word	0x40012c00

08006720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800674e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0303 	bic.w	r3, r3, #3
 800675a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800676c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1d      	ldr	r2, [pc, #116]	@ (80067f4 <TIM_OC3_SetConfig+0xd4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d10d      	bne.n	800679e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800679c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a14      	ldr	r2, [pc, #80]	@ (80067f4 <TIM_OC3_SetConfig+0xd4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d113      	bne.n	80067ce <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40012c00 	.word	0x40012c00

080067f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	031b      	lsls	r3, r3, #12
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a1e      	ldr	r2, [pc, #120]	@ (80068d0 <TIM_OC4_SetConfig+0xd8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d10d      	bne.n	8006878 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	031b      	lsls	r3, r3, #12
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a15      	ldr	r2, [pc, #84]	@ (80068d0 <TIM_OC4_SetConfig+0xd8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d113      	bne.n	80068a8 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006886:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800688e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	019b      	lsls	r3, r3, #6
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	019b      	lsls	r3, r3, #6
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40012c00 	.word	0x40012c00

080068d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006918:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	041b      	lsls	r3, r3, #16
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a0f      	ldr	r2, [pc, #60]	@ (8006968 <TIM_OC5_SetConfig+0x94>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d109      	bne.n	8006942 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006934:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	621a      	str	r2, [r3, #32]
}
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	40012c00 	.word	0x40012c00

0800696c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800699a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800699e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	051b      	lsls	r3, r3, #20
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a10      	ldr	r2, [pc, #64]	@ (8006a04 <TIM_OC6_SetConfig+0x98>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d109      	bne.n	80069dc <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	029b      	lsls	r3, r3, #10
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40012c00 	.word	0x40012c00

08006a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d101      	bne.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e051      	b.n	8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a22      	ldr	r2, [pc, #136]	@ (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d108      	bne.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a14      	ldr	r2, [pc, #80]	@ (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d009      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a8c:	d004      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a10      	ldr	r2, [pc, #64]	@ (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d10c      	bne.n	8006ab2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40000400 	.word	0x40000400

08006ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e03c      	b.n	8006bf0 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fa fc7c 	bl	8001488 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0201 	bic.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f85b 	bl	8006c64 <USART_SetConfig>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e01b      	b.n	8006bf0 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006bc6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bd6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fbaf 	bl	800734c <USART_CheckIdleState>
 8006bee:	4603      	mov	r3, r0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006c08:	e018      	b.n	8006c3c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c10:	d014      	beq.n	8006c3c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c12:	f7fa fe7f 	bl	8001914 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d302      	bcc.n	8006c28 <USART_WaitOnFlagUntilTimeout+0x30>
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e00f      	b.n	8006c5c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	69da      	ldr	r2, [r3, #28]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	4013      	ands	r3, r2
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	bf0c      	ite	eq
 8006c4c:	2301      	moveq	r3, #1
 8006c4e:	2300      	movne	r3, #0
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	461a      	mov	r2, r3
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d0d7      	beq.n	8006c0a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	@ 0x28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8006c72:	2300      	movs	r3, #0
 8006c74:	623b      	str	r3, [r7, #32]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c8a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4ba5      	ldr	r3, [pc, #660]	@ (8006f28 <USART_SetConfig+0x2c4>)
 8006c94:	4013      	ands	r3, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	69f9      	ldr	r1, [r7, #28]
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8006ca0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ca4:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	69fa      	ldr	r2, [r7, #28]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	61fb      	str	r3, [r7, #28]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006cd4:	f023 0309 	bic.w	r3, r3, #9
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	69f9      	ldr	r1, [r7, #28]
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce8:	f023 010f 	bic.w	r1, r3, #15
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a8b      	ldr	r2, [pc, #556]	@ (8006f2c <USART_SetConfig+0x2c8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d12e      	bne.n	8006d60 <USART_SetConfig+0xfc>
 8006d02:	4b8b      	ldr	r3, [pc, #556]	@ (8006f30 <USART_SetConfig+0x2cc>)
 8006d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	2b05      	cmp	r3, #5
 8006d0e:	d823      	bhi.n	8006d58 <USART_SetConfig+0xf4>
 8006d10:	a201      	add	r2, pc, #4	@ (adr r2, 8006d18 <USART_SetConfig+0xb4>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d31 	.word	0x08006d31
 8006d1c:	08006d51 	.word	0x08006d51
 8006d20:	08006d59 	.word	0x08006d59
 8006d24:	08006d41 	.word	0x08006d41
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d49 	.word	0x08006d49
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d36:	e080      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d3e:	e07c      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006d40:	2302      	movs	r3, #2
 8006d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d46:	e078      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d4e:	e074      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006d50:	2310      	movs	r3, #16
 8006d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d56:	e070      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006d58:	2340      	movs	r3, #64	@ 0x40
 8006d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d5e:	e06c      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a73      	ldr	r2, [pc, #460]	@ (8006f34 <USART_SetConfig+0x2d0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d12d      	bne.n	8006dc6 <USART_SetConfig+0x162>
 8006d6a:	4b71      	ldr	r3, [pc, #452]	@ (8006f30 <USART_SetConfig+0x2cc>)
 8006d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d74:	2b28      	cmp	r3, #40	@ 0x28
 8006d76:	d01a      	beq.n	8006dae <USART_SetConfig+0x14a>
 8006d78:	2b28      	cmp	r3, #40	@ 0x28
 8006d7a:	d820      	bhi.n	8006dbe <USART_SetConfig+0x15a>
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d00e      	beq.n	8006d9e <USART_SetConfig+0x13a>
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d81c      	bhi.n	8006dbe <USART_SetConfig+0x15a>
 8006d84:	2b18      	cmp	r3, #24
 8006d86:	d00e      	beq.n	8006da6 <USART_SetConfig+0x142>
 8006d88:	2b18      	cmp	r3, #24
 8006d8a:	d818      	bhi.n	8006dbe <USART_SetConfig+0x15a>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <USART_SetConfig+0x132>
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d010      	beq.n	8006db6 <USART_SetConfig+0x152>
 8006d94:	e013      	b.n	8006dbe <USART_SetConfig+0x15a>
 8006d96:	2300      	movs	r3, #0
 8006d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d9c:	e04d      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006d9e:	2304      	movs	r3, #4
 8006da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006da4:	e049      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006da6:	2302      	movs	r3, #2
 8006da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006dac:	e045      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006dae:	2308      	movs	r3, #8
 8006db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006db4:	e041      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006db6:	2310      	movs	r3, #16
 8006db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006dbc:	e03d      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006dbe:	2340      	movs	r3, #64	@ 0x40
 8006dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006dc4:	e039      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a5b      	ldr	r2, [pc, #364]	@ (8006f38 <USART_SetConfig+0x2d4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d131      	bne.n	8006e34 <USART_SetConfig+0x1d0>
 8006dd0:	4b57      	ldr	r3, [pc, #348]	@ (8006f30 <USART_SetConfig+0x2cc>)
 8006dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006dd6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006dda:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006dde:	d01d      	beq.n	8006e1c <USART_SetConfig+0x1b8>
 8006de0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006de4:	d822      	bhi.n	8006e2c <USART_SetConfig+0x1c8>
 8006de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dea:	d00f      	beq.n	8006e0c <USART_SetConfig+0x1a8>
 8006dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df0:	d81c      	bhi.n	8006e2c <USART_SetConfig+0x1c8>
 8006df2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006df4:	d00e      	beq.n	8006e14 <USART_SetConfig+0x1b0>
 8006df6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006df8:	d818      	bhi.n	8006e2c <USART_SetConfig+0x1c8>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <USART_SetConfig+0x1a0>
 8006dfe:	2b40      	cmp	r3, #64	@ 0x40
 8006e00:	d010      	beq.n	8006e24 <USART_SetConfig+0x1c0>
 8006e02:	e013      	b.n	8006e2c <USART_SetConfig+0x1c8>
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006e0a:	e016      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006e12:	e012      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006e14:	2302      	movs	r3, #2
 8006e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006e1a:	e00e      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006e22:	e00a      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006e2a:	e006      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006e2c:	2340      	movs	r3, #64	@ 0x40
 8006e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006e32:	e002      	b.n	8006e3a <USART_SetConfig+0x1d6>
 8006e34:	2340      	movs	r3, #64	@ 0x40
 8006e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  switch (clocksource)
 8006e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e3e:	2b10      	cmp	r3, #16
 8006e40:	f200 824c 	bhi.w	80072dc <USART_SetConfig+0x678>
 8006e44:	a201      	add	r2, pc, #4	@ (adr r2, 8006e4c <USART_SetConfig+0x1e8>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006e91 	.word	0x08006e91
 8006e50:	08006f5b 	.word	0x08006f5b
 8006e54:	080070cb 	.word	0x080070cb
 8006e58:	080072dd 	.word	0x080072dd
 8006e5c:	0800717b 	.word	0x0800717b
 8006e60:	080072dd 	.word	0x080072dd
 8006e64:	080072dd 	.word	0x080072dd
 8006e68:	080072dd 	.word	0x080072dd
 8006e6c:	0800722b 	.word	0x0800722b
 8006e70:	080072dd 	.word	0x080072dd
 8006e74:	080072dd 	.word	0x080072dd
 8006e78:	080072dd 	.word	0x080072dd
 8006e7c:	080072dd 	.word	0x080072dd
 8006e80:	080072dd 	.word	0x080072dd
 8006e84:	080072dd 	.word	0x080072dd
 8006e88:	080072dd 	.word	0x080072dd
 8006e8c:	08007011 	.word	0x08007011
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e90:	f7fd fdd2 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8006e94:	61b8      	str	r0, [r7, #24]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d04e      	beq.n	8006f3c <USART_SetConfig+0x2d8>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d03e      	beq.n	8006f24 <USART_SetConfig+0x2c0>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d038      	beq.n	8006f20 <USART_SetConfig+0x2bc>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d032      	beq.n	8006f1c <USART_SetConfig+0x2b8>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d02c      	beq.n	8006f18 <USART_SetConfig+0x2b4>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	d026      	beq.n	8006f14 <USART_SetConfig+0x2b0>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eca:	2b06      	cmp	r3, #6
 8006ecc:	d020      	beq.n	8006f10 <USART_SetConfig+0x2ac>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed2:	2b07      	cmp	r3, #7
 8006ed4:	d01a      	beq.n	8006f0c <USART_SetConfig+0x2a8>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	d014      	beq.n	8006f08 <USART_SetConfig+0x2a4>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee2:	2b09      	cmp	r3, #9
 8006ee4:	d00e      	beq.n	8006f04 <USART_SetConfig+0x2a0>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eea:	2b0a      	cmp	r3, #10
 8006eec:	d008      	beq.n	8006f00 <USART_SetConfig+0x29c>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	2b0b      	cmp	r3, #11
 8006ef4:	d102      	bne.n	8006efc <USART_SetConfig+0x298>
 8006ef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006efa:	e020      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006efc:	2301      	movs	r3, #1
 8006efe:	e01e      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f00:	2380      	movs	r3, #128	@ 0x80
 8006f02:	e01c      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f04:	2340      	movs	r3, #64	@ 0x40
 8006f06:	e01a      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f08:	2320      	movs	r3, #32
 8006f0a:	e018      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	e016      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f10:	230c      	movs	r3, #12
 8006f12:	e014      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f14:	230a      	movs	r3, #10
 8006f16:	e012      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	e010      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f1c:	2306      	movs	r3, #6
 8006f1e:	e00e      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f20:	2304      	movs	r3, #4
 8006f22:	e00c      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e00a      	b.n	8006f3e <USART_SetConfig+0x2da>
 8006f28:	cfff69f3 	.word	0xcfff69f3
 8006f2c:	40013800 	.word	0x40013800
 8006f30:	44020c00 	.word	0x44020c00
 8006f34:	40004400 	.word	0x40004400
 8006f38:	40004800 	.word	0x40004800
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f44:	005a      	lsls	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	441a      	add	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f56:	623b      	str	r3, [r7, #32]
      break;
 8006f58:	e1c4      	b.n	80072e4 <USART_SetConfig+0x680>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f5a:	f7fd fd83 	bl	8004a64 <HAL_RCC_GetPCLK2Freq>
 8006f5e:	61b8      	str	r0, [r7, #24]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d044      	beq.n	8006ff2 <USART_SetConfig+0x38e>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d03e      	beq.n	8006fee <USART_SetConfig+0x38a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d038      	beq.n	8006fea <USART_SetConfig+0x386>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d032      	beq.n	8006fe6 <USART_SetConfig+0x382>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d02c      	beq.n	8006fe2 <USART_SetConfig+0x37e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	2b05      	cmp	r3, #5
 8006f8e:	d026      	beq.n	8006fde <USART_SetConfig+0x37a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f94:	2b06      	cmp	r3, #6
 8006f96:	d020      	beq.n	8006fda <USART_SetConfig+0x376>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9c:	2b07      	cmp	r3, #7
 8006f9e:	d01a      	beq.n	8006fd6 <USART_SetConfig+0x372>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d014      	beq.n	8006fd2 <USART_SetConfig+0x36e>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	2b09      	cmp	r3, #9
 8006fae:	d00e      	beq.n	8006fce <USART_SetConfig+0x36a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	2b0a      	cmp	r3, #10
 8006fb6:	d008      	beq.n	8006fca <USART_SetConfig+0x366>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbc:	2b0b      	cmp	r3, #11
 8006fbe:	d102      	bne.n	8006fc6 <USART_SetConfig+0x362>
 8006fc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006fc4:	e016      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e014      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fca:	2380      	movs	r3, #128	@ 0x80
 8006fcc:	e012      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fce:	2340      	movs	r3, #64	@ 0x40
 8006fd0:	e010      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fd2:	2320      	movs	r3, #32
 8006fd4:	e00e      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fd6:	2310      	movs	r3, #16
 8006fd8:	e00c      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	e00a      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fde:	230a      	movs	r3, #10
 8006fe0:	e008      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fe2:	2308      	movs	r3, #8
 8006fe4:	e006      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fe6:	2306      	movs	r3, #6
 8006fe8:	e004      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fea:	2304      	movs	r3, #4
 8006fec:	e002      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e000      	b.n	8006ff4 <USART_SetConfig+0x390>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffa:	005a      	lsls	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	085b      	lsrs	r3, r3, #1
 8007002:	441a      	add	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	fbb2 f3f3 	udiv	r3, r2, r3
 800700c:	623b      	str	r3, [r7, #32]
      break;
 800700e:	e169      	b.n	80072e4 <USART_SetConfig+0x680>
    case USART_CLOCKSOURCE_PLL2Q:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007010:	f107 0308 	add.w	r3, r7, #8
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fb97 	bl	8005748 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007020:	2b00      	cmp	r3, #0
 8007022:	d044      	beq.n	80070ae <USART_SetConfig+0x44a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	2b01      	cmp	r3, #1
 800702a:	d03e      	beq.n	80070aa <USART_SetConfig+0x446>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007030:	2b02      	cmp	r3, #2
 8007032:	d038      	beq.n	80070a6 <USART_SetConfig+0x442>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	2b03      	cmp	r3, #3
 800703a:	d032      	beq.n	80070a2 <USART_SetConfig+0x43e>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	2b04      	cmp	r3, #4
 8007042:	d02c      	beq.n	800709e <USART_SetConfig+0x43a>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007048:	2b05      	cmp	r3, #5
 800704a:	d026      	beq.n	800709a <USART_SetConfig+0x436>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	2b06      	cmp	r3, #6
 8007052:	d020      	beq.n	8007096 <USART_SetConfig+0x432>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007058:	2b07      	cmp	r3, #7
 800705a:	d01a      	beq.n	8007092 <USART_SetConfig+0x42e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007060:	2b08      	cmp	r3, #8
 8007062:	d014      	beq.n	800708e <USART_SetConfig+0x42a>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	2b09      	cmp	r3, #9
 800706a:	d00e      	beq.n	800708a <USART_SetConfig+0x426>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007070:	2b0a      	cmp	r3, #10
 8007072:	d008      	beq.n	8007086 <USART_SetConfig+0x422>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007078:	2b0b      	cmp	r3, #11
 800707a:	d102      	bne.n	8007082 <USART_SetConfig+0x41e>
 800707c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007080:	e016      	b.n	80070b0 <USART_SetConfig+0x44c>
 8007082:	2301      	movs	r3, #1
 8007084:	e014      	b.n	80070b0 <USART_SetConfig+0x44c>
 8007086:	2380      	movs	r3, #128	@ 0x80
 8007088:	e012      	b.n	80070b0 <USART_SetConfig+0x44c>
 800708a:	2340      	movs	r3, #64	@ 0x40
 800708c:	e010      	b.n	80070b0 <USART_SetConfig+0x44c>
 800708e:	2320      	movs	r3, #32
 8007090:	e00e      	b.n	80070b0 <USART_SetConfig+0x44c>
 8007092:	2310      	movs	r3, #16
 8007094:	e00c      	b.n	80070b0 <USART_SetConfig+0x44c>
 8007096:	230c      	movs	r3, #12
 8007098:	e00a      	b.n	80070b0 <USART_SetConfig+0x44c>
 800709a:	230a      	movs	r3, #10
 800709c:	e008      	b.n	80070b0 <USART_SetConfig+0x44c>
 800709e:	2308      	movs	r3, #8
 80070a0:	e006      	b.n	80070b0 <USART_SetConfig+0x44c>
 80070a2:	2306      	movs	r3, #6
 80070a4:	e004      	b.n	80070b0 <USART_SetConfig+0x44c>
 80070a6:	2304      	movs	r3, #4
 80070a8:	e002      	b.n	80070b0 <USART_SetConfig+0x44c>
 80070aa:	2302      	movs	r3, #2
 80070ac:	e000      	b.n	80070b0 <USART_SetConfig+0x44c>
 80070ae:	2301      	movs	r3, #1
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	005a      	lsls	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	441a      	add	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c6:	623b      	str	r3, [r7, #32]
                                                husart->Init.ClockPrescaler));
      break;
 80070c8:	e10c      	b.n	80072e4 <USART_SetConfig+0x680>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
                                                husart->Init.ClockPrescaler));
      break;
#endif /* RCC_CR_PLL3ON */
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d044      	beq.n	800715c <USART_SetConfig+0x4f8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d03e      	beq.n	8007158 <USART_SetConfig+0x4f4>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d038      	beq.n	8007154 <USART_SetConfig+0x4f0>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d032      	beq.n	8007150 <USART_SetConfig+0x4ec>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d02c      	beq.n	800714c <USART_SetConfig+0x4e8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	2b05      	cmp	r3, #5
 80070f8:	d026      	beq.n	8007148 <USART_SetConfig+0x4e4>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fe:	2b06      	cmp	r3, #6
 8007100:	d020      	beq.n	8007144 <USART_SetConfig+0x4e0>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007106:	2b07      	cmp	r3, #7
 8007108:	d01a      	beq.n	8007140 <USART_SetConfig+0x4dc>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710e:	2b08      	cmp	r3, #8
 8007110:	d014      	beq.n	800713c <USART_SetConfig+0x4d8>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007116:	2b09      	cmp	r3, #9
 8007118:	d00e      	beq.n	8007138 <USART_SetConfig+0x4d4>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711e:	2b0a      	cmp	r3, #10
 8007120:	d008      	beq.n	8007134 <USART_SetConfig+0x4d0>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007126:	2b0b      	cmp	r3, #11
 8007128:	d102      	bne.n	8007130 <USART_SetConfig+0x4cc>
 800712a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800712e:	e016      	b.n	800715e <USART_SetConfig+0x4fa>
 8007130:	2301      	movs	r3, #1
 8007132:	e014      	b.n	800715e <USART_SetConfig+0x4fa>
 8007134:	2380      	movs	r3, #128	@ 0x80
 8007136:	e012      	b.n	800715e <USART_SetConfig+0x4fa>
 8007138:	2340      	movs	r3, #64	@ 0x40
 800713a:	e010      	b.n	800715e <USART_SetConfig+0x4fa>
 800713c:	2320      	movs	r3, #32
 800713e:	e00e      	b.n	800715e <USART_SetConfig+0x4fa>
 8007140:	2310      	movs	r3, #16
 8007142:	e00c      	b.n	800715e <USART_SetConfig+0x4fa>
 8007144:	230c      	movs	r3, #12
 8007146:	e00a      	b.n	800715e <USART_SetConfig+0x4fa>
 8007148:	230a      	movs	r3, #10
 800714a:	e008      	b.n	800715e <USART_SetConfig+0x4fa>
 800714c:	2308      	movs	r3, #8
 800714e:	e006      	b.n	800715e <USART_SetConfig+0x4fa>
 8007150:	2306      	movs	r3, #6
 8007152:	e004      	b.n	800715e <USART_SetConfig+0x4fa>
 8007154:	2304      	movs	r3, #4
 8007156:	e002      	b.n	800715e <USART_SetConfig+0x4fa>
 8007158:	2302      	movs	r3, #2
 800715a:	e000      	b.n	800715e <USART_SetConfig+0x4fa>
 800715c:	2301      	movs	r3, #1
 800715e:	4a79      	ldr	r2, [pc, #484]	@ (8007344 <USART_SetConfig+0x6e0>)
 8007160:	fbb2 f3f3 	udiv	r3, r2, r3
 8007164:	005a      	lsls	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	441a      	add	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	fbb2 f3f3 	udiv	r3, r2, r3
 8007176:	623b      	str	r3, [r7, #32]
      break;
 8007178:	e0b4      	b.n	80072e4 <USART_SetConfig+0x680>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717e:	2b00      	cmp	r3, #0
 8007180:	d044      	beq.n	800720c <USART_SetConfig+0x5a8>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007186:	2b01      	cmp	r3, #1
 8007188:	d03e      	beq.n	8007208 <USART_SetConfig+0x5a4>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	2b02      	cmp	r3, #2
 8007190:	d038      	beq.n	8007204 <USART_SetConfig+0x5a0>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	2b03      	cmp	r3, #3
 8007198:	d032      	beq.n	8007200 <USART_SetConfig+0x59c>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d02c      	beq.n	80071fc <USART_SetConfig+0x598>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	d026      	beq.n	80071f8 <USART_SetConfig+0x594>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ae:	2b06      	cmp	r3, #6
 80071b0:	d020      	beq.n	80071f4 <USART_SetConfig+0x590>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	2b07      	cmp	r3, #7
 80071b8:	d01a      	beq.n	80071f0 <USART_SetConfig+0x58c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071be:	2b08      	cmp	r3, #8
 80071c0:	d014      	beq.n	80071ec <USART_SetConfig+0x588>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c6:	2b09      	cmp	r3, #9
 80071c8:	d00e      	beq.n	80071e8 <USART_SetConfig+0x584>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	2b0a      	cmp	r3, #10
 80071d0:	d008      	beq.n	80071e4 <USART_SetConfig+0x580>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d6:	2b0b      	cmp	r3, #11
 80071d8:	d102      	bne.n	80071e0 <USART_SetConfig+0x57c>
 80071da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071de:	e016      	b.n	800720e <USART_SetConfig+0x5aa>
 80071e0:	2301      	movs	r3, #1
 80071e2:	e014      	b.n	800720e <USART_SetConfig+0x5aa>
 80071e4:	2380      	movs	r3, #128	@ 0x80
 80071e6:	e012      	b.n	800720e <USART_SetConfig+0x5aa>
 80071e8:	2340      	movs	r3, #64	@ 0x40
 80071ea:	e010      	b.n	800720e <USART_SetConfig+0x5aa>
 80071ec:	2320      	movs	r3, #32
 80071ee:	e00e      	b.n	800720e <USART_SetConfig+0x5aa>
 80071f0:	2310      	movs	r3, #16
 80071f2:	e00c      	b.n	800720e <USART_SetConfig+0x5aa>
 80071f4:	230c      	movs	r3, #12
 80071f6:	e00a      	b.n	800720e <USART_SetConfig+0x5aa>
 80071f8:	230a      	movs	r3, #10
 80071fa:	e008      	b.n	800720e <USART_SetConfig+0x5aa>
 80071fc:	2308      	movs	r3, #8
 80071fe:	e006      	b.n	800720e <USART_SetConfig+0x5aa>
 8007200:	2306      	movs	r3, #6
 8007202:	e004      	b.n	800720e <USART_SetConfig+0x5aa>
 8007204:	2304      	movs	r3, #4
 8007206:	e002      	b.n	800720e <USART_SetConfig+0x5aa>
 8007208:	2302      	movs	r3, #2
 800720a:	e000      	b.n	800720e <USART_SetConfig+0x5aa>
 800720c:	2301      	movs	r3, #1
 800720e:	4a4e      	ldr	r2, [pc, #312]	@ (8007348 <USART_SetConfig+0x6e4>)
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	005a      	lsls	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	fbb2 f3f3 	udiv	r3, r2, r3
 8007226:	623b      	str	r3, [r7, #32]
      break;
 8007228:	e05c      	b.n	80072e4 <USART_SetConfig+0x680>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	d044      	beq.n	80072bc <USART_SetConfig+0x658>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007236:	2b01      	cmp	r3, #1
 8007238:	d03e      	beq.n	80072b8 <USART_SetConfig+0x654>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723e:	2b02      	cmp	r3, #2
 8007240:	d038      	beq.n	80072b4 <USART_SetConfig+0x650>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007246:	2b03      	cmp	r3, #3
 8007248:	d032      	beq.n	80072b0 <USART_SetConfig+0x64c>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	2b04      	cmp	r3, #4
 8007250:	d02c      	beq.n	80072ac <USART_SetConfig+0x648>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007256:	2b05      	cmp	r3, #5
 8007258:	d026      	beq.n	80072a8 <USART_SetConfig+0x644>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725e:	2b06      	cmp	r3, #6
 8007260:	d020      	beq.n	80072a4 <USART_SetConfig+0x640>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007266:	2b07      	cmp	r3, #7
 8007268:	d01a      	beq.n	80072a0 <USART_SetConfig+0x63c>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726e:	2b08      	cmp	r3, #8
 8007270:	d014      	beq.n	800729c <USART_SetConfig+0x638>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	2b09      	cmp	r3, #9
 8007278:	d00e      	beq.n	8007298 <USART_SetConfig+0x634>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727e:	2b0a      	cmp	r3, #10
 8007280:	d008      	beq.n	8007294 <USART_SetConfig+0x630>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	2b0b      	cmp	r3, #11
 8007288:	d102      	bne.n	8007290 <USART_SetConfig+0x62c>
 800728a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800728e:	e016      	b.n	80072be <USART_SetConfig+0x65a>
 8007290:	2301      	movs	r3, #1
 8007292:	e014      	b.n	80072be <USART_SetConfig+0x65a>
 8007294:	2380      	movs	r3, #128	@ 0x80
 8007296:	e012      	b.n	80072be <USART_SetConfig+0x65a>
 8007298:	2340      	movs	r3, #64	@ 0x40
 800729a:	e010      	b.n	80072be <USART_SetConfig+0x65a>
 800729c:	2320      	movs	r3, #32
 800729e:	e00e      	b.n	80072be <USART_SetConfig+0x65a>
 80072a0:	2310      	movs	r3, #16
 80072a2:	e00c      	b.n	80072be <USART_SetConfig+0x65a>
 80072a4:	230c      	movs	r3, #12
 80072a6:	e00a      	b.n	80072be <USART_SetConfig+0x65a>
 80072a8:	230a      	movs	r3, #10
 80072aa:	e008      	b.n	80072be <USART_SetConfig+0x65a>
 80072ac:	2308      	movs	r3, #8
 80072ae:	e006      	b.n	80072be <USART_SetConfig+0x65a>
 80072b0:	2306      	movs	r3, #6
 80072b2:	e004      	b.n	80072be <USART_SetConfig+0x65a>
 80072b4:	2304      	movs	r3, #4
 80072b6:	e002      	b.n	80072be <USART_SetConfig+0x65a>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e000      	b.n	80072be <USART_SetConfig+0x65a>
 80072bc:	2301      	movs	r3, #1
 80072be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80072c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c6:	005a      	lsls	r2, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	441a      	add	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d8:	623b      	str	r3, [r7, #32]
      break;
 80072da:	e003      	b.n	80072e4 <USART_SetConfig+0x680>
    default:
      ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      break;
 80072e2:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d916      	bls.n	8007318 <USART_SetConfig+0x6b4>
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f0:	d212      	bcs.n	8007318 <USART_SetConfig+0x6b4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f023 030f 	bic.w	r3, r3, #15
 80072fa:	82fb      	strh	r3, [r7, #22]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	b29b      	uxth	r3, r3
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	b29a      	uxth	r2, r3
 8007308:	8afb      	ldrh	r3, [r7, #22]
 800730a:	4313      	orrs	r3, r2
 800730c:	82fb      	strh	r3, [r7, #22]
    husart->Instance->BRR = brrtemp;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	8afa      	ldrh	r2, [r7, #22]
 8007314:	60da      	str	r2, [r3, #12]
 8007316:	e002      	b.n	800731e <USART_SetConfig+0x6ba>
  }
  else
  {
    ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8007336:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 800733a:	4618      	mov	r0, r3
 800733c:	3728      	adds	r7, #40	@ 0x28
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	03d09000 	.word	0x03d09000
 8007348:	003d0900 	.word	0x003d0900

0800734c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af02      	add	r7, sp, #8
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800735a:	f7fa fadb 	bl	8001914 <HAL_GetTick>
 800735e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b08      	cmp	r3, #8
 800736c:	d10e      	bne.n	800738c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800736e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff fc3b 	bl	8006bf8 <USART_WaitOnFlagUntilTimeout>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e01e      	b.n	80073ca <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b04      	cmp	r3, #4
 8007398:	d10e      	bne.n	80073b8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800739a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff fc25 	bl	8006bf8 <USART_WaitOnFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e008      	b.n	80073ca <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_USARTEx_DisableFifoMode+0x16>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e027      	b.n	8007438 <HAL_USARTEx_DisableFifoMode+0x66>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0201 	bic.w	r2, r2, #1
 800740e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007416:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8007458:	2302      	movs	r3, #2
 800745a:	e02d      	b.n	80074b8 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f84f 	bl	800753c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e02d      	b.n	8007534 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0201 	bic.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f811 	bl	800753c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007548:	2b00      	cmp	r3, #0
 800754a:	d106      	bne.n	800755a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007558:	e02f      	b.n	80075ba <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800755a:	2308      	movs	r3, #8
 800755c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800755e:	2308      	movs	r3, #8
 8007560:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8007568:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800756a:	b2db      	uxtb	r3, r3
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8007578:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	7b3a      	ldrb	r2, [r7, #12]
 8007586:	4910      	ldr	r1, [pc, #64]	@ (80075c8 <USARTEx_SetNbDataToProcess+0x8c>)
 8007588:	5c8a      	ldrb	r2, [r1, r2]
 800758a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800758e:	7b3a      	ldrb	r2, [r7, #12]
 8007590:	490e      	ldr	r1, [pc, #56]	@ (80075cc <USARTEx_SetNbDataToProcess+0x90>)
 8007592:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007594:	fb93 f3f2 	sdiv	r3, r3, r2
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	7b7a      	ldrb	r2, [r7, #13]
 80075a2:	4909      	ldr	r1, [pc, #36]	@ (80075c8 <USARTEx_SetNbDataToProcess+0x8c>)
 80075a4:	5c8a      	ldrb	r2, [r1, r2]
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80075aa:	7b7a      	ldrb	r2, [r7, #13]
 80075ac:	4907      	ldr	r1, [pc, #28]	@ (80075cc <USARTEx_SetNbDataToProcess+0x90>)
 80075ae:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	08007724 	.word	0x08007724
 80075cc:	0800772c 	.word	0x0800772c

080075d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075d8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80075dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	43db      	mvns	r3, r3
 80075e6:	401a      	ands	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8007606:	78fb      	ldrb	r3, [r7, #3]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d106      	bne.n	800761a <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	641a      	str	r2, [r3, #64]	@ 0x40
 8007618:	e00b      	b.n	8007632 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d106      	bne.n	800762e <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007624:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	641a      	str	r2, [r3, #64]	@ 0x40
 800762c:	e001      	b.n	8007632 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8007640:	b084      	sub	sp, #16
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	f107 001c 	add.w	r0, r7, #28
 800764e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765c:	f023 0201 	bic.w	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8007664:	2100      	movs	r1, #0
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7ff ffc7 	bl	80075fa <USB_SetCurrentMode>
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007682:	b004      	add	sp, #16
 8007684:	4770      	bx	lr

08007686 <memset>:
 8007686:	4402      	add	r2, r0
 8007688:	4603      	mov	r3, r0
 800768a:	4293      	cmp	r3, r2
 800768c:	d100      	bne.n	8007690 <memset+0xa>
 800768e:	4770      	bx	lr
 8007690:	f803 1b01 	strb.w	r1, [r3], #1
 8007694:	e7f9      	b.n	800768a <memset+0x4>
	...

08007698 <__libc_init_array>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	4d0d      	ldr	r5, [pc, #52]	@ (80076d0 <__libc_init_array+0x38>)
 800769c:	2600      	movs	r6, #0
 800769e:	4c0d      	ldr	r4, [pc, #52]	@ (80076d4 <__libc_init_array+0x3c>)
 80076a0:	1b64      	subs	r4, r4, r5
 80076a2:	10a4      	asrs	r4, r4, #2
 80076a4:	42a6      	cmp	r6, r4
 80076a6:	d109      	bne.n	80076bc <__libc_init_array+0x24>
 80076a8:	4d0b      	ldr	r5, [pc, #44]	@ (80076d8 <__libc_init_array+0x40>)
 80076aa:	2600      	movs	r6, #0
 80076ac:	4c0b      	ldr	r4, [pc, #44]	@ (80076dc <__libc_init_array+0x44>)
 80076ae:	f000 f817 	bl	80076e0 <_init>
 80076b2:	1b64      	subs	r4, r4, r5
 80076b4:	10a4      	asrs	r4, r4, #2
 80076b6:	42a6      	cmp	r6, r4
 80076b8:	d105      	bne.n	80076c6 <__libc_init_array+0x2e>
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c0:	3601      	adds	r6, #1
 80076c2:	4798      	blx	r3
 80076c4:	e7ee      	b.n	80076a4 <__libc_init_array+0xc>
 80076c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ca:	3601      	adds	r6, #1
 80076cc:	4798      	blx	r3
 80076ce:	e7f2      	b.n	80076b6 <__libc_init_array+0x1e>
 80076d0:	08007734 	.word	0x08007734
 80076d4:	08007734 	.word	0x08007734
 80076d8:	08007734 	.word	0x08007734
 80076dc:	08007738 	.word	0x08007738

080076e0 <_init>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	bf00      	nop
 80076e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e6:	bc08      	pop	{r3}
 80076e8:	469e      	mov	lr, r3
 80076ea:	4770      	bx	lr

080076ec <_fini>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	bf00      	nop
 80076f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f2:	bc08      	pop	{r3}
 80076f4:	469e      	mov	lr, r3
 80076f6:	4770      	bx	lr
